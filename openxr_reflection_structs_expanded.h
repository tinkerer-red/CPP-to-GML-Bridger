#line 1 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 1 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr_platform_defines.h" #line 49 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr_platform_defines.h" #line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stddef.h" #pragma once #line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #pragma once #line 1 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #pragma once #line 32 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 34 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 35 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 39 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 49 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 54 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 55 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 56 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 1 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\sal.h" #pragma once #line 151 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\sal.h" #line 155 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\sal.h" #line 185 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\sal.h" #line 188 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\sal.h" #line 190 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\sal.h" #line 196 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\sal.h" #line 200 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\sal.h" #line 207 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\sal.h" #line 219 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\sal.h" #line 228 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\sal.h" #line 229 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\sal.h" #pragma region Input Buffer SAL 1 compatibility macros #pragma endregion Input Buffer SAL 1 compatibility macros #line 1555 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\sal.h" #line 1586 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\sal.h" #line 1611 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\sal.h" #line 1624 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\sal.h" #line 1663 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\sal.h" #line 1775 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\sal.h" #line 1878 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\sal.h" #line 2047 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\sal.h" #line 2149 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\sal.h" #line 2366 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\sal.h" #line 2367 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\sal.h" #line 2595 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\sal.h" #line 2634 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\sal.h" #line 2868 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\sal.h" #line 2878 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\sal.h" #line 2886 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\sal.h" #line 2887 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\sal.h" #line 2894 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\sal.h" #line 2895 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\sal.h" #line 2902 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\sal.h" #line 2903 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\sal.h" #line 2915 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\sal.h" #line 2949 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\sal.h" #line 1 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\concurrencysal.h" #pragma once #line 292 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\concurrencysal.h" #line 296 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\concurrencysal.h" #line 389 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\concurrencysal.h" #line 395 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\concurrencysal.h" #line 2975 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\sal.h" #line 58 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 1 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vadefs.h" #pragma once #pragma pack(push, 8) #line 24 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vadefs.h" #line 25 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vadefs.h" #line 34 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vadefs.h" #line 35 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vadefs.h" #line 40 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vadefs.h" #line 46 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vadefs.h" #pragma warning(push) #pragma warning(disable: 4514 4820) #line 57 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vadefs.h" typedef unsigned __int64 uintptr_t; #line 65 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vadefs.h" #line 66 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vadefs.h" typedef char* va_list; #line 74 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vadefs.h" #line 75 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vadefs.h" #line 81 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vadefs.h" #line 87 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vadefs.h" #line 91 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vadefs.h" #line 94 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vadefs.h" #line 106 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vadefs.h" #line 114 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vadefs.h" #line 126 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vadefs.h" #line 132 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vadefs.h" #line 143 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vadefs.h" #line 154 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vadefs.h" void  __va_start(va_list* , ...);
#line 165 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vadefs.h" #line 202 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vadefs.h" #line 206 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vadefs.h" #pragma warning(pop) #pragma pack(pop) #line 59 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #pragma warning(push) #pragma warning(disable: 4514 4820) #line 77 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 87 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 95 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" __pragma(pack(push, 8)) #line 106 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 107 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 126 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 128 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 130 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 131 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 136 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 138 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 139 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 145 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 148 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 154 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 165 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 167 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 173 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 181 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 182 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" typedef unsigned __int64 size_t; typedef __int64 ptrdiff_t; typedef __int64 intptr_t; #line 196 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 200 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 204 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" typedef _Bool __vcrt_bool; #line 206 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 211 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 215 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 219 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" typedef unsigned short wchar_t; #line 225 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 232 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 233 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 239 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 243 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 255 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 259 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 269 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 274 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 276 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 277 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 282 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 284 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 285 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 290 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 292 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 293 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 299 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 303 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 313 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 314 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 318 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 320 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 334 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 335 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 344 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 351 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 362 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 363 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 367 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 375 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 376 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" void  __security_init_cookie(void);
#line 384 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 387 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" void  __security_check_cookie(uintptr_t _StackCookie);
__declspec(noreturn) void  __report_gsfailure(uintptr_t _StackCookie);
#line 390 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 391 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" extern uintptr_t __security_cookie; #line 399 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" __pragma(pack(pop)) #pragma warning(pop) #line 405 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\vcruntime.h" #line 11 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 38 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 39 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 43 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 51 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 74 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 79 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 95 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 111 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 112 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 119 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 120 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #pragma warning(push) #pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727) __pragma(pack(push, 8)) #line 136 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 138 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 140 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 141 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 147 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 152 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 154 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 156 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 157 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 161 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 163 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 169 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 175 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 177 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 184 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 188 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 190 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 201 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 219 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 220 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 224 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 226 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 230 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 232 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 236 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 238 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 245 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 246 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 270 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 274 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" typedef _Bool __crt_bool; #line 276 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 296 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 297 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 298 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 320 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 322 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 323 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 327 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 331 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 343 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 345 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 346 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 347 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 352 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 354 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 355 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" void  _invalid_parameter_noinfo(void);
__declspec(noreturn) void  _invalid_parameter_noinfo_noreturn(void);
__declspec(noreturn) void  _invoke_watson(wchar_t const* _Expression, wchar_t const* _FunctionName, wchar_t const* _FileName, unsigned int _LineNo, uintptr_t _Reserved);
#line 401 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 402 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 419 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 423 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 432 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 433 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 451 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 452 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 459 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 460 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 464 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 478 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 494 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 501 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 505 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 510 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 511 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 521 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 522 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 523 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 527 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 533 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 543 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 544 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 553 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 563 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 570 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 575 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 583 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 591 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 592 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 596 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" typedef int errno_t; typedef unsigned short wint_t; typedef unsigned short wctype_t; typedef long __time32_t; typedef __int64 __time64_t; typedef struct __crt_locale_data_public { unsigned short const* _locale_pctype; int _locale_mb_cur_max; unsigned int _locale_lc_codepage; } __crt_locale_data_public; typedef struct __crt_locale_pointers { struct __crt_locale_data* locinfo; struct __crt_multibyte_data* mbcinfo; } __crt_locale_pointers; typedef __crt_locale_pointers* _locale_t; typedef struct _Mbstatet { unsigned long _Wchar; unsigned short _Byte, _State; } _Mbstatet; typedef _Mbstatet mbstate_t; #line 636 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 640 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" typedef __time64_t time_t; #line 647 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 648 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 653 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" typedef size_t rsize_t; #line 657 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 812 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 827 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 828 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 1879 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 2069 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 2070 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" #line 2071 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\corecrt.h" __pragma(pack(pop)) #pragma warning(pop) #line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stddef.h" #pragma warning(push) #pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727) __pragma(pack(push, 8)) int*  _errno(void);
errno_t  _set_errno(int _Value);
errno_t  _get_errno(int* _Value);
#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stddef.h" #line 51 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stddef.h" #line 54 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stddef.h" extern unsigned long  __threadid(void);
extern uintptr_t  __threadhandle(void);
__pragma(pack(pop)) #pragma warning(pop) #line 65 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.22621.0\\ucrt\\stddef.h" #line 51 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr_platform_defines.h" #line 63 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr_platform_defines.h" #line 1 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\stdint.h" #pragma once #pragma warning(push) #pragma warning(disable: 4514 4820) typedef signed char int8_t; typedef short int16_t; typedef int int32_t; typedef long long int64_t; typedef unsigned char uint8_t; typedef unsigned short uint16_t; typedef unsigned int uint32_t; typedef unsigned long long uint64_t; typedef signed char int_least8_t; typedef short int_least16_t; typedef int int_least32_t; typedef long long int_least64_t; typedef unsigned char uint_least8_t; typedef unsigned short uint_least16_t; typedef unsigned int uint_least32_t; typedef unsigned long long uint_least64_t; typedef signed char int_fast8_t; typedef int int_fast16_t; typedef int int_fast32_t; typedef long long int_fast64_t; typedef unsigned char uint_fast8_t; typedef unsigned int uint_fast16_t; typedef unsigned int uint_fast32_t; typedef unsigned long long uint_fast64_t; typedef long long intmax_t; typedef unsigned long long uintmax_t; #line 97 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\stdint.h" #line 112 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\stdint.h" #line 113 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\stdint.h" #pragma warning(pop) #line 139 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.41.34120\\include\\stdint.h" #line 64 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr_platform_defines.h" #line 65 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr_platform_defines.h" #line 66 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr_platform_defines.h" #line 73 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr_platform_defines.h" #line 79 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr_platform_defines.h" #line 81 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr_platform_defines.h" #line 82 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr_platform_defines.h" #line 94 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr_platform_defines.h" #line 104 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr_platform_defines.h" #line 105 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr_platform_defines.h" #line 109 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr_platform_defines.h" #line 115 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr_platform_defines.h" #line 25 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 45 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 47 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 48 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 90 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 92 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 93 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 101 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 102 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 110 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 111 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 116 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef uint64_t XrVersion; typedef uint64_t XrFlags64; typedef uint64_t XrSystemId; typedef uint32_t XrBool32; typedef uint64_t XrPath; typedef int64_t XrTime; typedef int64_t XrDuration; typedef struct XrInstance_T* XrInstance; typedef struct XrSession_T* XrSession; typedef struct XrSpace_T* XrSpace; typedef struct XrAction_T* XrAction; typedef struct XrSwapchain_T* XrSwapchain; typedef struct XrActionSet_T* XrActionSet; typedef enum XrResult { XR_SUCCESS = 0, XR_TIMEOUT_EXPIRED = 1, XR_SESSION_LOSS_PENDING = 3, XR_EVENT_UNAVAILABLE = 4, XR_SPACE_BOUNDS_UNAVAILABLE = 7, XR_SESSION_NOT_FOCUSED = 8, XR_FRAME_DISCARDED = 9, XR_ERROR_VALIDATION_FAILURE = -1, XR_ERROR_RUNTIME_FAILURE = -2, XR_ERROR_OUT_OF_MEMORY = -3, XR_ERROR_API_VERSION_UNSUPPORTED = -4, XR_ERROR_INITIALIZATION_FAILED = -6, XR_ERROR_FUNCTION_UNSUPPORTED = -7, XR_ERROR_FEATURE_UNSUPPORTED = -8, XR_ERROR_EXTENSION_NOT_PRESENT = -9, XR_ERROR_LIMIT_REACHED = -10, XR_ERROR_SIZE_INSUFFICIENT = -11, XR_ERROR_HANDLE_INVALID = -12, XR_ERROR_INSTANCE_LOST = -13, XR_ERROR_SESSION_RUNNING = -14, XR_ERROR_SESSION_NOT_RUNNING = -16, XR_ERROR_SESSION_LOST = -17, XR_ERROR_SYSTEM_INVALID = -18, XR_ERROR_PATH_INVALID = -19, XR_ERROR_PATH_COUNT_EXCEEDED = -20, XR_ERROR_PATH_FORMAT_INVALID = -21, XR_ERROR_PATH_UNSUPPORTED = -22, XR_ERROR_LAYER_INVALID = -23, XR_ERROR_LAYER_LIMIT_EXCEEDED = -24, XR_ERROR_SWAPCHAIN_RECT_INVALID = -25, XR_ERROR_SWAPCHAIN_FORMAT_UNSUPPORTED = -26, XR_ERROR_ACTION_TYPE_MISMATCH = -27, XR_ERROR_SESSION_NOT_READY = -28, XR_ERROR_SESSION_NOT_STOPPING = -29, XR_ERROR_TIME_INVALID = -30, XR_ERROR_REFERENCE_SPACE_UNSUPPORTED = -31, XR_ERROR_FILE_ACCESS_ERROR = -32, XR_ERROR_FILE_CONTENTS_INVALID = -33, XR_ERROR_FORM_FACTOR_UNSUPPORTED = -34, XR_ERROR_FORM_FACTOR_UNAVAILABLE = -35, XR_ERROR_API_LAYER_NOT_PRESENT = -36, XR_ERROR_CALL_ORDER_INVALID = -37, XR_ERROR_GRAPHICS_DEVICE_INVALID = -38, XR_ERROR_POSE_INVALID = -39, XR_ERROR_INDEX_OUT_OF_RANGE = -40, XR_ERROR_VIEW_CONFIGURATION_TYPE_UNSUPPORTED = -41, XR_ERROR_ENVIRONMENT_BLEND_MODE_UNSUPPORTED = -42, XR_ERROR_NAME_DUPLICATED = -44, XR_ERROR_NAME_INVALID = -45, XR_ERROR_ACTIONSET_NOT_ATTACHED = -46, XR_ERROR_ACTIONSETS_ALREADY_ATTACHED = -47, XR_ERROR_LOCALIZED_NAME_DUPLICATED = -48, XR_ERROR_LOCALIZED_NAME_INVALID = -49, XR_ERROR_GRAPHICS_REQUIREMENTS_CALL_MISSING = -50, XR_ERROR_RUNTIME_UNAVAILABLE = -51, XR_ERROR_EXTENSION_DEPENDENCY_NOT_ENABLED = -1000710001, XR_ERROR_PERMISSION_INSUFFICIENT = -1000710000, XR_ERROR_ANDROID_THREAD_SETTINGS_ID_INVALID_KHR = -1000003000, XR_ERROR_ANDROID_THREAD_SETTINGS_FAILURE_KHR = -1000003001, XR_ERROR_CREATE_SPATIAL_ANCHOR_FAILED_MSFT = -1000039001, XR_ERROR_SECONDARY_VIEW_CONFIGURATION_TYPE_NOT_ENABLED_MSFT = -1000053000, XR_ERROR_CONTROLLER_MODEL_KEY_INVALID_MSFT = -1000055000, XR_ERROR_REPROJECTION_MODE_UNSUPPORTED_MSFT = -1000066000, XR_ERROR_COMPUTE_NEW_SCENE_NOT_COMPLETED_MSFT = -1000097000, XR_ERROR_SCENE_COMPONENT_ID_INVALID_MSFT = -1000097001, XR_ERROR_SCENE_COMPONENT_TYPE_MISMATCH_MSFT = -1000097002, XR_ERROR_SCENE_MESH_BUFFER_ID_INVALID_MSFT = -1000097003, XR_ERROR_SCENE_COMPUTE_FEATURE_INCOMPATIBLE_MSFT = -1000097004, XR_ERROR_SCENE_COMPUTE_CONSISTENCY_MISMATCH_MSFT = -1000097005, XR_ERROR_DISPLAY_REFRESH_RATE_UNSUPPORTED_FB = -1000101000, XR_ERROR_COLOR_SPACE_UNSUPPORTED_FB = -1000108000, XR_ERROR_SPACE_COMPONENT_NOT_SUPPORTED_FB = -1000113000, XR_ERROR_SPACE_COMPONENT_NOT_ENABLED_FB = -1000113001, XR_ERROR_SPACE_COMPONENT_STATUS_PENDING_FB = -1000113002, XR_ERROR_SPACE_COMPONENT_STATUS_ALREADY_SET_FB = -1000113003, XR_ERROR_UNEXPECTED_STATE_PASSTHROUGH_FB = -1000118000, XR_ERROR_FEATURE_ALREADY_CREATED_PASSTHROUGH_FB = -1000118001, XR_ERROR_FEATURE_REQUIRED_PASSTHROUGH_FB = -1000118002, XR_ERROR_NOT_PERMITTED_PASSTHROUGH_FB = -1000118003, XR_ERROR_INSUFFICIENT_RESOURCES_PASSTHROUGH_FB = -1000118004, XR_ERROR_UNKNOWN_PASSTHROUGH_FB = -1000118050, XR_ERROR_RENDER_MODEL_KEY_INVALID_FB = -1000119000, XR_RENDER_MODEL_UNAVAILABLE_FB = 1000119020, XR_ERROR_MARKER_NOT_TRACKED_VARJO = -1000124000, XR_ERROR_MARKER_ID_INVALID_VARJO = -1000124001, XR_ERROR_MARKER_DETECTOR_PERMISSION_DENIED_ML = -1000138000, XR_ERROR_MARKER_DETECTOR_LOCATE_FAILED_ML = -1000138001, XR_ERROR_MARKER_DETECTOR_INVALID_DATA_QUERY_ML = -1000138002, XR_ERROR_MARKER_DETECTOR_INVALID_CREATE_INFO_ML = -1000138003, XR_ERROR_MARKER_INVALID_ML = -1000138004, XR_ERROR_LOCALIZATION_MAP_INCOMPATIBLE_ML = -1000139000, XR_ERROR_LOCALIZATION_MAP_UNAVAILABLE_ML = -1000139001, XR_ERROR_LOCALIZATION_MAP_FAIL_ML = -1000139002, XR_ERROR_LOCALIZATION_MAP_IMPORT_EXPORT_PERMISSION_DENIED_ML = -1000139003, XR_ERROR_LOCALIZATION_MAP_PERMISSION_DENIED_ML = -1000139004, XR_ERROR_LOCALIZATION_MAP_ALREADY_EXISTS_ML = -1000139005, XR_ERROR_LOCALIZATION_MAP_CANNOT_EXPORT_CLOUD_MAP_ML = -1000139006, XR_ERROR_SPATIAL_ANCHORS_PERMISSION_DENIED_ML = -1000140000, XR_ERROR_SPATIAL_ANCHORS_NOT_LOCALIZED_ML = -1000140001, XR_ERROR_SPATIAL_ANCHORS_OUT_OF_MAP_BOUNDS_ML = -1000140002, XR_ERROR_SPATIAL_ANCHORS_SPACE_NOT_LOCATABLE_ML = -1000140003, XR_ERROR_SPATIAL_ANCHORS_ANCHOR_NOT_FOUND_ML = -1000141000, XR_ERROR_SPATIAL_ANCHOR_NAME_NOT_FOUND_MSFT = -1000142001, XR_ERROR_SPATIAL_ANCHOR_NAME_INVALID_MSFT = -1000142002, XR_SCENE_MARKER_DATA_NOT_STRING_MSFT = 1000147000, XR_ERROR_SPACE_MAPPING_INSUFFICIENT_FB = -1000169000, XR_ERROR_SPACE_LOCALIZATION_FAILED_FB = -1000169001, XR_ERROR_SPACE_NETWORK_TIMEOUT_FB = -1000169002, XR_ERROR_SPACE_NETWORK_REQUEST_FAILED_FB = -1000169003, XR_ERROR_SPACE_CLOUD_STORAGE_DISABLED_FB = -1000169004, XR_ERROR_PASSTHROUGH_COLOR_LUT_BUFFER_SIZE_MISMATCH_META = -1000266000, XR_ENVIRONMENT_DEPTH_NOT_AVAILABLE_META = 1000291000, XR_ERROR_RENDER_MODEL_ID_INVALID_EXT = -1000300000, XR_ERROR_RENDER_MODEL_ASSET_UNAVAILABLE_EXT = -1000300001, XR_ERROR_RENDER_MODEL_GLTF_EXTENSION_REQUIRED_EXT = -1000300002, XR_ERROR_NOT_INTERACTION_RENDER_MODEL_EXT = -1000301000, XR_ERROR_HINT_ALREADY_SET_QCOM = -1000306000, XR_ERROR_NOT_AN_ANCHOR_HTC = -1000319000, XR_ERROR_SPATIAL_ENTITY_ID_INVALID_BD = -1000389000, XR_ERROR_SPATIAL_SENSING_SERVICE_UNAVAILABLE_BD = -1000389001, XR_ERROR_ANCHOR_NOT_SUPPORTED_FOR_ENTITY_BD = -1000389002, XR_ERROR_SPATIAL_ANCHOR_NOT_FOUND_BD = -1000390000, XR_ERROR_SPATIAL_ANCHOR_SHARING_NETWORK_TIMEOUT_BD = -1000391000, XR_ERROR_SPATIAL_ANCHOR_SHARING_AUTHENTICATION_FAILURE_BD = -1000391001, XR_ERROR_SPATIAL_ANCHOR_SHARING_NETWORK_FAILURE_BD = -1000391002, XR_ERROR_SPATIAL_ANCHOR_SHARING_LOCALIZATION_FAIL_BD = -1000391003, XR_ERROR_SPATIAL_ANCHOR_SHARING_MAP_INSUFFICIENT_BD = -1000391004, XR_ERROR_SCENE_CAPTURE_FAILURE_BD = -1000392000, XR_ERROR_SPACE_NOT_LOCATABLE_EXT = -1000429000, XR_ERROR_PLANE_DETECTION_PERMISSION_DENIED_EXT = -1000429001, XR_ERROR_FUTURE_PENDING_EXT = -1000469001, XR_ERROR_FUTURE_INVALID_EXT = -1000469002, XR_ERROR_SYSTEM_NOTIFICATION_PERMISSION_DENIED_ML = -1000473000, XR_ERROR_SYSTEM_NOTIFICATION_INCOMPATIBLE_SKU_ML = -1000473001, XR_ERROR_WORLD_MESH_DETECTOR_PERMISSION_DENIED_ML = -1000474000, XR_ERROR_WORLD_MESH_DETECTOR_SPACE_NOT_LOCATABLE_ML = -1000474001, XR_ERROR_FACIAL_EXPRESSION_PERMISSION_DENIED_ML = 1000482000, XR_ERROR_COLOCATION_DISCOVERY_NETWORK_FAILED_META = -1000571001, XR_ERROR_COLOCATION_DISCOVERY_NO_DISCOVERY_METHOD_META = -1000571002, XR_COLOCATION_DISCOVERY_ALREADY_ADVERTISING_META = 1000571003, XR_COLOCATION_DISCOVERY_ALREADY_DISCOVERING_META = 1000571004, XR_ERROR_SPACE_GROUP_NOT_FOUND_META = -1000572002, XR_ERROR_SPATIAL_CAPABILITY_UNSUPPORTED_EXT = -1000740001, XR_ERROR_SPATIAL_ENTITY_ID_INVALID_EXT = -1000740002, XR_ERROR_SPATIAL_BUFFER_ID_INVALID_EXT = -1000740003, XR_ERROR_SPATIAL_COMPONENT_UNSUPPORTED_FOR_CAPABILITY_EXT = -1000740004, XR_ERROR_SPATIAL_CAPABILITY_CONFIGURATION_INVALID_EXT = -1000740005, XR_ERROR_SPATIAL_COMPONENT_NOT_ENABLED_EXT = -1000740006, XR_ERROR_SPATIAL_PERSISTENCE_SCOPE_UNSUPPORTED_EXT = -1000763001, XR_ERROR_SPATIAL_PERSISTENCE_SCOPE_INCOMPATIBLE_EXT = -1000781001, XR_ERROR_EXTENSION_DEPENDENCY_NOT_ENABLED_KHR = XR_ERROR_EXTENSION_DEPENDENCY_NOT_ENABLED, XR_ERROR_PERMISSION_INSUFFICIENT_KHR = XR_ERROR_PERMISSION_INSUFFICIENT, XR_RESULT_MAX_ENUM = 0x7FFFFFFF } XrResult; typedef enum XrStructureType { XR_TYPE_UNKNOWN = 0, XR_TYPE_API_LAYER_PROPERTIES = 1, XR_TYPE_EXTENSION_PROPERTIES = 2, XR_TYPE_INSTANCE_CREATE_INFO = 3, XR_TYPE_SYSTEM_GET_INFO = 4, XR_TYPE_SYSTEM_PROPERTIES = 5, XR_TYPE_VIEW_LOCATE_INFO = 6, XR_TYPE_VIEW = 7, XR_TYPE_SESSION_CREATE_INFO = 8, XR_TYPE_SWAPCHAIN_CREATE_INFO = 9, XR_TYPE_SESSION_BEGIN_INFO = 10, XR_TYPE_VIEW_STATE = 11, XR_TYPE_FRAME_END_INFO = 12, XR_TYPE_HAPTIC_VIBRATION = 13, XR_TYPE_EVENT_DATA_BUFFER = 16, XR_TYPE_EVENT_DATA_INSTANCE_LOSS_PENDING = 17, XR_TYPE_EVENT_DATA_SESSION_STATE_CHANGED = 18, XR_TYPE_ACTION_STATE_BOOLEAN = 23, XR_TYPE_ACTION_STATE_FLOAT = 24, XR_TYPE_ACTION_STATE_VECTOR2F = 25, XR_TYPE_ACTION_STATE_POSE = 27, XR_TYPE_ACTION_SET_CREATE_INFO = 28, XR_TYPE_ACTION_CREATE_INFO = 29, XR_TYPE_INSTANCE_PROPERTIES = 32, XR_TYPE_FRAME_WAIT_INFO = 33, XR_TYPE_COMPOSITION_LAYER_PROJECTION = 35, XR_TYPE_COMPOSITION_LAYER_QUAD = 36, XR_TYPE_REFERENCE_SPACE_CREATE_INFO = 37, XR_TYPE_ACTION_SPACE_CREATE_INFO = 38, XR_TYPE_EVENT_DATA_REFERENCE_SPACE_CHANGE_PENDING = 40, XR_TYPE_VIEW_CONFIGURATION_VIEW = 41, XR_TYPE_SPACE_LOCATION = 42, XR_TYPE_SPACE_VELOCITY = 43, XR_TYPE_FRAME_STATE = 44, XR_TYPE_VIEW_CONFIGURATION_PROPERTIES = 45, XR_TYPE_FRAME_BEGIN_INFO = 46, XR_TYPE_COMPOSITION_LAYER_PROJECTION_VIEW = 48, XR_TYPE_EVENT_DATA_EVENTS_LOST = 49, XR_TYPE_INTERACTION_PROFILE_SUGGESTED_BINDING = 51, XR_TYPE_EVENT_DATA_INTERACTION_PROFILE_CHANGED = 52, XR_TYPE_INTERACTION_PROFILE_STATE = 53, XR_TYPE_SWAPCHAIN_IMAGE_ACQUIRE_INFO = 55, XR_TYPE_SWAPCHAIN_IMAGE_WAIT_INFO = 56, XR_TYPE_SWAPCHAIN_IMAGE_RELEASE_INFO = 57, XR_TYPE_ACTION_STATE_GET_INFO = 58, XR_TYPE_HAPTIC_ACTION_INFO = 59, XR_TYPE_SESSION_ACTION_SETS_ATTACH_INFO = 60, XR_TYPE_ACTIONS_SYNC_INFO = 61, XR_TYPE_BOUND_SOURCES_FOR_ACTION_ENUMERATE_INFO = 62, XR_TYPE_INPUT_SOURCE_LOCALIZED_NAME_GET_INFO = 63, XR_TYPE_SPACES_LOCATE_INFO = 1000471000, XR_TYPE_SPACE_LOCATIONS = 1000471001, XR_TYPE_SPACE_VELOCITIES = 1000471002, XR_TYPE_COMPOSITION_LAYER_CUBE_KHR = 1000006000, XR_TYPE_INSTANCE_CREATE_INFO_ANDROID_KHR = 1000008000, XR_TYPE_COMPOSITION_LAYER_DEPTH_INFO_KHR = 1000010000, XR_TYPE_VULKAN_SWAPCHAIN_FORMAT_LIST_CREATE_INFO_KHR = 1000014000, XR_TYPE_EVENT_DATA_PERF_SETTINGS_EXT = 1000015000, XR_TYPE_COMPOSITION_LAYER_CYLINDER_KHR = 1000017000, XR_TYPE_COMPOSITION_LAYER_EQUIRECT_KHR = 1000018000, XR_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT = 1000019000, XR_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT = 1000019001, XR_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT = 1000019002, XR_TYPE_DEBUG_UTILS_LABEL_EXT = 1000019003, XR_TYPE_GRAPHICS_BINDING_OPENGL_WIN32_KHR = 1000023000, XR_TYPE_GRAPHICS_BINDING_OPENGL_XLIB_KHR = 1000023001, XR_TYPE_GRAPHICS_BINDING_OPENGL_XCB_KHR = 1000023002, XR_TYPE_GRAPHICS_BINDING_OPENGL_WAYLAND_KHR = 1000023003, XR_TYPE_SWAPCHAIN_IMAGE_OPENGL_KHR = 1000023004, XR_TYPE_GRAPHICS_REQUIREMENTS_OPENGL_KHR = 1000023005, XR_TYPE_GRAPHICS_BINDING_OPENGL_ES_ANDROID_KHR = 1000024001, XR_TYPE_SWAPCHAIN_IMAGE_OPENGL_ES_KHR = 1000024002, XR_TYPE_GRAPHICS_REQUIREMENTS_OPENGL_ES_KHR = 1000024003, XR_TYPE_GRAPHICS_BINDING_VULKAN_KHR = 1000025000, XR_TYPE_SWAPCHAIN_IMAGE_VULKAN_KHR = 1000025001, XR_TYPE_GRAPHICS_REQUIREMENTS_VULKAN_KHR = 1000025002, XR_TYPE_GRAPHICS_BINDING_D3D11_KHR = 1000027000, XR_TYPE_SWAPCHAIN_IMAGE_D3D11_KHR = 1000027001, XR_TYPE_GRAPHICS_REQUIREMENTS_D3D11_KHR = 1000027002, XR_TYPE_GRAPHICS_BINDING_D3D12_KHR = 1000028000, XR_TYPE_SWAPCHAIN_IMAGE_D3D12_KHR = 1000028001, XR_TYPE_GRAPHICS_REQUIREMENTS_D3D12_KHR = 1000028002, XR_TYPE_GRAPHICS_BINDING_METAL_KHR = 1000029000, XR_TYPE_SWAPCHAIN_IMAGE_METAL_KHR = 1000029001, XR_TYPE_GRAPHICS_REQUIREMENTS_METAL_KHR = 1000029002, XR_TYPE_SYSTEM_EYE_GAZE_INTERACTION_PROPERTIES_EXT = 1000030000, XR_TYPE_EYE_GAZE_SAMPLE_TIME_EXT = 1000030001, XR_TYPE_VISIBILITY_MASK_KHR = 1000031000, XR_TYPE_EVENT_DATA_VISIBILITY_MASK_CHANGED_KHR = 1000031001, XR_TYPE_SESSION_CREATE_INFO_OVERLAY_EXTX = 1000033000, XR_TYPE_EVENT_DATA_MAIN_SESSION_VISIBILITY_CHANGED_EXTX = 1000033003, XR_TYPE_COMPOSITION_LAYER_COLOR_SCALE_BIAS_KHR = 1000034000, XR_TYPE_SPATIAL_ANCHOR_CREATE_INFO_MSFT = 1000039000, XR_TYPE_SPATIAL_ANCHOR_SPACE_CREATE_INFO_MSFT = 1000039001, XR_TYPE_COMPOSITION_LAYER_IMAGE_LAYOUT_FB = 1000040000, XR_TYPE_COMPOSITION_LAYER_ALPHA_BLEND_FB = 1000041001, XR_TYPE_VIEW_CONFIGURATION_DEPTH_RANGE_EXT = 1000046000, XR_TYPE_GRAPHICS_BINDING_EGL_MNDX = 1000048004, XR_TYPE_SPATIAL_GRAPH_NODE_SPACE_CREATE_INFO_MSFT = 1000049000, XR_TYPE_SPATIAL_GRAPH_STATIC_NODE_BINDING_CREATE_INFO_MSFT = 1000049001, XR_TYPE_SPATIAL_GRAPH_NODE_BINDING_PROPERTIES_GET_INFO_MSFT = 1000049002, XR_TYPE_SPATIAL_GRAPH_NODE_BINDING_PROPERTIES_MSFT = 1000049003, XR_TYPE_SYSTEM_HAND_TRACKING_PROPERTIES_EXT = 1000051000, XR_TYPE_HAND_TRACKER_CREATE_INFO_EXT = 1000051001, XR_TYPE_HAND_JOINTS_LOCATE_INFO_EXT = 1000051002, XR_TYPE_HAND_JOINT_LOCATIONS_EXT = 1000051003, XR_TYPE_HAND_JOINT_VELOCITIES_EXT = 1000051004, XR_TYPE_SYSTEM_HAND_TRACKING_MESH_PROPERTIES_MSFT = 1000052000, XR_TYPE_HAND_MESH_SPACE_CREATE_INFO_MSFT = 1000052001, XR_TYPE_HAND_MESH_UPDATE_INFO_MSFT = 1000052002, XR_TYPE_HAND_MESH_MSFT = 1000052003, XR_TYPE_HAND_POSE_TYPE_INFO_MSFT = 1000052004, XR_TYPE_SECONDARY_VIEW_CONFIGURATION_SESSION_BEGIN_INFO_MSFT = 1000053000, XR_TYPE_SECONDARY_VIEW_CONFIGURATION_STATE_MSFT = 1000053001, XR_TYPE_SECONDARY_VIEW_CONFIGURATION_FRAME_STATE_MSFT = 1000053002, XR_TYPE_SECONDARY_VIEW_CONFIGURATION_FRAME_END_INFO_MSFT = 1000053003, XR_TYPE_SECONDARY_VIEW_CONFIGURATION_LAYER_INFO_MSFT = 1000053004, XR_TYPE_SECONDARY_VIEW_CONFIGURATION_SWAPCHAIN_CREATE_INFO_MSFT = 1000053005, XR_TYPE_CONTROLLER_MODEL_KEY_STATE_MSFT = 1000055000, XR_TYPE_CONTROLLER_MODEL_NODE_PROPERTIES_MSFT = 1000055001, XR_TYPE_CONTROLLER_MODEL_PROPERTIES_MSFT = 1000055002, XR_TYPE_CONTROLLER_MODEL_NODE_STATE_MSFT = 1000055003, XR_TYPE_CONTROLLER_MODEL_STATE_MSFT = 1000055004, XR_TYPE_VIEW_CONFIGURATION_VIEW_FOV_EPIC = 1000059000, XR_TYPE_HOLOGRAPHIC_WINDOW_ATTACHMENT_MSFT = 1000063000, XR_TYPE_COMPOSITION_LAYER_REPROJECTION_INFO_MSFT = 1000066000, XR_TYPE_COMPOSITION_LAYER_REPROJECTION_PLANE_OVERRIDE_MSFT = 1000066001, XR_TYPE_ANDROID_SURFACE_SWAPCHAIN_CREATE_INFO_FB = 1000070000, XR_TYPE_COMPOSITION_LAYER_SECURE_CONTENT_FB = 1000072000, XR_TYPE_BODY_TRACKER_CREATE_INFO_FB = 1000076001, XR_TYPE_BODY_JOINTS_LOCATE_INFO_FB = 1000076002, XR_TYPE_SYSTEM_BODY_TRACKING_PROPERTIES_FB = 1000076004, XR_TYPE_BODY_JOINT_LOCATIONS_FB = 1000076005, XR_TYPE_BODY_SKELETON_FB = 1000076006, XR_TYPE_INTERACTION_PROFILE_DPAD_BINDING_EXT = 1000078000, XR_TYPE_INTERACTION_PROFILE_ANALOG_THRESHOLD_VALVE = 1000079000, XR_TYPE_HAND_JOINTS_MOTION_RANGE_INFO_EXT = 1000080000, XR_TYPE_LOADER_INIT_INFO_ANDROID_KHR = 1000089000, XR_TYPE_VULKAN_INSTANCE_CREATE_INFO_KHR = 1000090000, XR_TYPE_VULKAN_DEVICE_CREATE_INFO_KHR = 1000090001, XR_TYPE_VULKAN_GRAPHICS_DEVICE_GET_INFO_KHR = 1000090003, XR_TYPE_COMPOSITION_LAYER_EQUIRECT2_KHR = 1000091000, XR_TYPE_SCENE_OBSERVER_CREATE_INFO_MSFT = 1000097000, XR_TYPE_SCENE_CREATE_INFO_MSFT = 1000097001, XR_TYPE_NEW_SCENE_COMPUTE_INFO_MSFT = 1000097002, XR_TYPE_VISUAL_MESH_COMPUTE_LOD_INFO_MSFT = 1000097003, XR_TYPE_SCENE_COMPONENTS_MSFT = 1000097004, XR_TYPE_SCENE_COMPONENTS_GET_INFO_MSFT = 1000097005, XR_TYPE_SCENE_COMPONENT_LOCATIONS_MSFT = 1000097006, XR_TYPE_SCENE_COMPONENTS_LOCATE_INFO_MSFT = 1000097007, XR_TYPE_SCENE_OBJECTS_MSFT = 1000097008, XR_TYPE_SCENE_COMPONENT_PARENT_FILTER_INFO_MSFT = 1000097009, XR_TYPE_SCENE_OBJECT_TYPES_FILTER_INFO_MSFT = 1000097010, XR_TYPE_SCENE_PLANES_MSFT = 1000097011, XR_TYPE_SCENE_PLANE_ALIGNMENT_FILTER_INFO_MSFT = 1000097012, XR_TYPE_SCENE_MESHES_MSFT = 1000097013, XR_TYPE_SCENE_MESH_BUFFERS_GET_INFO_MSFT = 1000097014, XR_TYPE_SCENE_MESH_BUFFERS_MSFT = 1000097015, XR_TYPE_SCENE_MESH_VERTEX_BUFFER_MSFT = 1000097016, XR_TYPE_SCENE_MESH_INDICES_UINT32_MSFT = 1000097017, XR_TYPE_SCENE_MESH_INDICES_UINT16_MSFT = 1000097018, XR_TYPE_SERIALIZED_SCENE_FRAGMENT_DATA_GET_INFO_MSFT = 1000098000, XR_TYPE_SCENE_DESERIALIZE_INFO_MSFT = 1000098001, XR_TYPE_EVENT_DATA_DISPLAY_REFRESH_RATE_CHANGED_FB = 1000101000, XR_TYPE_VIVE_TRACKER_PATHS_HTCX = 1000103000, XR_TYPE_EVENT_DATA_VIVE_TRACKER_CONNECTED_HTCX = 1000103001, XR_TYPE_SYSTEM_FACIAL_TRACKING_PROPERTIES_HTC = 1000104000, XR_TYPE_FACIAL_TRACKER_CREATE_INFO_HTC = 1000104001, XR_TYPE_FACIAL_EXPRESSIONS_HTC = 1000104002, XR_TYPE_SYSTEM_COLOR_SPACE_PROPERTIES_FB = 1000108000, XR_TYPE_HAND_TRACKING_MESH_FB = 1000110001, XR_TYPE_HAND_TRACKING_SCALE_FB = 1000110003, XR_TYPE_HAND_TRACKING_AIM_STATE_FB = 1000111001, XR_TYPE_HAND_TRACKING_CAPSULES_STATE_FB = 1000112000, XR_TYPE_SYSTEM_SPATIAL_ENTITY_PROPERTIES_FB = 1000113004, XR_TYPE_SPATIAL_ANCHOR_CREATE_INFO_FB = 1000113003, XR_TYPE_SPACE_COMPONENT_STATUS_SET_INFO_FB = 1000113007, XR_TYPE_SPACE_COMPONENT_STATUS_FB = 1000113001, XR_TYPE_EVENT_DATA_SPATIAL_ANCHOR_CREATE_COMPLETE_FB = 1000113005, XR_TYPE_EVENT_DATA_SPACE_SET_STATUS_COMPLETE_FB = 1000113006, XR_TYPE_FOVEATION_PROFILE_CREATE_INFO_FB = 1000114000, XR_TYPE_SWAPCHAIN_CREATE_INFO_FOVEATION_FB = 1000114001, XR_TYPE_SWAPCHAIN_STATE_FOVEATION_FB = 1000114002, XR_TYPE_FOVEATION_LEVEL_PROFILE_CREATE_INFO_FB = 1000115000, XR_TYPE_KEYBOARD_SPACE_CREATE_INFO_FB = 1000116009, XR_TYPE_KEYBOARD_TRACKING_QUERY_FB = 1000116004, XR_TYPE_SYSTEM_KEYBOARD_TRACKING_PROPERTIES_FB = 1000116002, XR_TYPE_TRIANGLE_MESH_CREATE_INFO_FB = 1000117001, XR_TYPE_SYSTEM_PASSTHROUGH_PROPERTIES_FB = 1000118000, XR_TYPE_PASSTHROUGH_CREATE_INFO_FB = 1000118001, XR_TYPE_PASSTHROUGH_LAYER_CREATE_INFO_FB = 1000118002, XR_TYPE_COMPOSITION_LAYER_PASSTHROUGH_FB = 1000118003, XR_TYPE_GEOMETRY_INSTANCE_CREATE_INFO_FB = 1000118004, XR_TYPE_GEOMETRY_INSTANCE_TRANSFORM_FB = 1000118005, XR_TYPE_SYSTEM_PASSTHROUGH_PROPERTIES2_FB = 1000118006, XR_TYPE_PASSTHROUGH_STYLE_FB = 1000118020, XR_TYPE_PASSTHROUGH_COLOR_MAP_MONO_TO_RGBA_FB = 1000118021, XR_TYPE_PASSTHROUGH_COLOR_MAP_MONO_TO_MONO_FB = 1000118022, XR_TYPE_PASSTHROUGH_BRIGHTNESS_CONTRAST_SATURATION_FB = 1000118023, XR_TYPE_EVENT_DATA_PASSTHROUGH_STATE_CHANGED_FB = 1000118030, XR_TYPE_RENDER_MODEL_PATH_INFO_FB = 1000119000, XR_TYPE_RENDER_MODEL_PROPERTIES_FB = 1000119001, XR_TYPE_RENDER_MODEL_BUFFER_FB = 1000119002, XR_TYPE_RENDER_MODEL_LOAD_INFO_FB = 1000119003, XR_TYPE_SYSTEM_RENDER_MODEL_PROPERTIES_FB = 1000119004, XR_TYPE_RENDER_MODEL_CAPABILITIES_REQUEST_FB = 1000119005, XR_TYPE_BINDING_MODIFICATIONS_KHR = 1000120000, XR_TYPE_VIEW_LOCATE_FOVEATED_RENDERING_VARJO = 1000121000, XR_TYPE_FOVEATED_VIEW_CONFIGURATION_VIEW_VARJO = 1000121001, XR_TYPE_SYSTEM_FOVEATED_RENDERING_PROPERTIES_VARJO = 1000121002, XR_TYPE_COMPOSITION_LAYER_DEPTH_TEST_VARJO = 1000122000, XR_TYPE_SYSTEM_MARKER_TRACKING_PROPERTIES_VARJO = 1000124000, XR_TYPE_EVENT_DATA_MARKER_TRACKING_UPDATE_VARJO = 1000124001, XR_TYPE_MARKER_SPACE_CREATE_INFO_VARJO = 1000124002, XR_TYPE_FRAME_END_INFO_ML = 1000135000, XR_TYPE_GLOBAL_DIMMER_FRAME_END_INFO_ML = 1000136000, XR_TYPE_COORDINATE_SPACE_CREATE_INFO_ML = 1000137000, XR_TYPE_SYSTEM_MARKER_UNDERSTANDING_PROPERTIES_ML = 1000138000, XR_TYPE_MARKER_DETECTOR_CREATE_INFO_ML = 1000138001, XR_TYPE_MARKER_DETECTOR_ARUCO_INFO_ML = 1000138002, XR_TYPE_MARKER_DETECTOR_SIZE_INFO_ML = 1000138003, XR_TYPE_MARKER_DETECTOR_APRIL_TAG_INFO_ML = 1000138004, XR_TYPE_MARKER_DETECTOR_CUSTOM_PROFILE_INFO_ML = 1000138005, XR_TYPE_MARKER_DETECTOR_SNAPSHOT_INFO_ML = 1000138006, XR_TYPE_MARKER_DETECTOR_STATE_ML = 1000138007, XR_TYPE_MARKER_SPACE_CREATE_INFO_ML = 1000138008, XR_TYPE_LOCALIZATION_MAP_ML = 1000139000, XR_TYPE_EVENT_DATA_LOCALIZATION_CHANGED_ML = 1000139001, XR_TYPE_MAP_LOCALIZATION_REQUEST_INFO_ML = 1000139002, XR_TYPE_LOCALIZATION_MAP_IMPORT_INFO_ML = 1000139003, XR_TYPE_LOCALIZATION_ENABLE_EVENTS_INFO_ML = 1000139004, XR_TYPE_SPATIAL_ANCHORS_CREATE_INFO_FROM_POSE_ML = 1000140000, XR_TYPE_CREATE_SPATIAL_ANCHORS_COMPLETION_ML = 1000140001, XR_TYPE_SPATIAL_ANCHOR_STATE_ML = 1000140002, XR_TYPE_SPATIAL_ANCHORS_CREATE_STORAGE_INFO_ML = 1000141000, XR_TYPE_SPATIAL_ANCHORS_QUERY_INFO_RADIUS_ML = 1000141001, XR_TYPE_SPATIAL_ANCHORS_QUERY_COMPLETION_ML = 1000141002, XR_TYPE_SPATIAL_ANCHORS_CREATE_INFO_FROM_UUIDS_ML = 1000141003, XR_TYPE_SPATIAL_ANCHORS_PUBLISH_INFO_ML = 1000141004, XR_TYPE_SPATIAL_ANCHORS_PUBLISH_COMPLETION_ML = 1000141005, XR_TYPE_SPATIAL_ANCHORS_DELETE_INFO_ML = 1000141006, XR_TYPE_SPATIAL_ANCHORS_DELETE_COMPLETION_ML = 1000141007, XR_TYPE_SPATIAL_ANCHORS_UPDATE_EXPIRATION_INFO_ML = 1000141008, XR_TYPE_SPATIAL_ANCHORS_UPDATE_EXPIRATION_COMPLETION_ML = 1000141009, XR_TYPE_SPATIAL_ANCHORS_PUBLISH_COMPLETION_DETAILS_ML = 1000141010, XR_TYPE_SPATIAL_ANCHORS_DELETE_COMPLETION_DETAILS_ML = 1000141011, XR_TYPE_SPATIAL_ANCHORS_UPDATE_EXPIRATION_COMPLETION_DETAILS_ML = 1000141012, XR_TYPE_EVENT_DATA_HEADSET_FIT_CHANGED_ML = 1000472000, XR_TYPE_EVENT_DATA_EYE_CALIBRATION_CHANGED_ML = 1000472001, XR_TYPE_USER_CALIBRATION_ENABLE_EVENTS_INFO_ML = 1000472002, XR_TYPE_SPATIAL_ANCHOR_PERSISTENCE_INFO_MSFT = 1000142000, XR_TYPE_SPATIAL_ANCHOR_FROM_PERSISTED_ANCHOR_CREATE_INFO_MSFT = 1000142001, XR_TYPE_SCENE_MARKERS_MSFT = 1000147000, XR_TYPE_SCENE_MARKER_TYPE_FILTER_MSFT = 1000147001, XR_TYPE_SCENE_MARKER_QR_CODES_MSFT = 1000147002, XR_TYPE_SPACE_QUERY_INFO_FB = 1000156001, XR_TYPE_SPACE_QUERY_RESULTS_FB = 1000156002, XR_TYPE_SPACE_STORAGE_LOCATION_FILTER_INFO_FB = 1000156003, XR_TYPE_SPACE_UUID_FILTER_INFO_FB = 1000156054, XR_TYPE_SPACE_COMPONENT_FILTER_INFO_FB = 1000156052, XR_TYPE_EVENT_DATA_SPACE_QUERY_RESULTS_AVAILABLE_FB = 1000156103, XR_TYPE_EVENT_DATA_SPACE_QUERY_COMPLETE_FB = 1000156104, XR_TYPE_SPACE_SAVE_INFO_FB = 1000158000, XR_TYPE_SPACE_ERASE_INFO_FB = 1000158001, XR_TYPE_EVENT_DATA_SPACE_SAVE_COMPLETE_FB = 1000158106, XR_TYPE_EVENT_DATA_SPACE_ERASE_COMPLETE_FB = 1000158107, XR_TYPE_SWAPCHAIN_IMAGE_FOVEATION_VULKAN_FB = 1000160000, XR_TYPE_SWAPCHAIN_STATE_ANDROID_SURFACE_DIMENSIONS_FB = 1000161000, XR_TYPE_SWAPCHAIN_STATE_SAMPLER_OPENGL_ES_FB = 1000162000, XR_TYPE_SWAPCHAIN_STATE_SAMPLER_VULKAN_FB = 1000163000, XR_TYPE_SPACE_SHARE_INFO_FB = 1000169001, XR_TYPE_EVENT_DATA_SPACE_SHARE_COMPLETE_FB = 1000169002, XR_TYPE_COMPOSITION_LAYER_SPACE_WARP_INFO_FB = 1000171000, XR_TYPE_SYSTEM_SPACE_WARP_PROPERTIES_FB = 1000171001, XR_TYPE_HAPTIC_AMPLITUDE_ENVELOPE_VIBRATION_FB = 1000173001, XR_TYPE_SEMANTIC_LABELS_FB = 1000175000, XR_TYPE_ROOM_LAYOUT_FB = 1000175001, XR_TYPE_BOUNDARY_2D_FB = 1000175002, XR_TYPE_SEMANTIC_LABELS_SUPPORT_INFO_FB = 1000175010, XR_TYPE_DIGITAL_LENS_CONTROL_ALMALENCE = 1000196000, XR_TYPE_EVENT_DATA_SCENE_CAPTURE_COMPLETE_FB = 1000198001, XR_TYPE_SCENE_CAPTURE_REQUEST_INFO_FB = 1000198050, XR_TYPE_SPACE_CONTAINER_FB = 1000199000, XR_TYPE_FOVEATION_EYE_TRACKED_PROFILE_CREATE_INFO_META = 1000200000, XR_TYPE_FOVEATION_EYE_TRACKED_STATE_META = 1000200001, XR_TYPE_SYSTEM_FOVEATION_EYE_TRACKED_PROPERTIES_META = 1000200002, XR_TYPE_SYSTEM_FACE_TRACKING_PROPERTIES_FB = 1000201004, XR_TYPE_FACE_TRACKER_CREATE_INFO_FB = 1000201005, XR_TYPE_FACE_EXPRESSION_INFO_FB = 1000201002, XR_TYPE_FACE_EXPRESSION_WEIGHTS_FB = 1000201006, XR_TYPE_EYE_TRACKER_CREATE_INFO_FB = 1000202001, XR_TYPE_EYE_GAZES_INFO_FB = 1000202002, XR_TYPE_EYE_GAZES_FB = 1000202003, XR_TYPE_SYSTEM_EYE_TRACKING_PROPERTIES_FB = 1000202004, XR_TYPE_PASSTHROUGH_KEYBOARD_HANDS_INTENSITY_FB = 1000203002, XR_TYPE_COMPOSITION_LAYER_SETTINGS_FB = 1000204000, XR_TYPE_HAPTIC_PCM_VIBRATION_FB = 1000209001, XR_TYPE_DEVICE_PCM_SAMPLE_RATE_STATE_FB = 1000209002, XR_TYPE_FRAME_SYNTHESIS_INFO_EXT = 1000211000, XR_TYPE_FRAME_SYNTHESIS_CONFIG_VIEW_EXT = 1000211001, XR_TYPE_COMPOSITION_LAYER_DEPTH_TEST_FB = 1000212000, XR_TYPE_LOCAL_DIMMING_FRAME_END_INFO_META = 1000216000, XR_TYPE_PASSTHROUGH_PREFERENCES_META = 1000217000, XR_TYPE_SYSTEM_VIRTUAL_KEYBOARD_PROPERTIES_META = 1000219001, XR_TYPE_VIRTUAL_KEYBOARD_CREATE_INFO_META = 1000219002, XR_TYPE_VIRTUAL_KEYBOARD_SPACE_CREATE_INFO_META = 1000219003, XR_TYPE_VIRTUAL_KEYBOARD_LOCATION_INFO_META = 1000219004, XR_TYPE_VIRTUAL_KEYBOARD_MODEL_VISIBILITY_SET_INFO_META = 1000219005, XR_TYPE_VIRTUAL_KEYBOARD_ANIMATION_STATE_META = 1000219006, XR_TYPE_VIRTUAL_KEYBOARD_MODEL_ANIMATION_STATES_META = 1000219007, XR_TYPE_VIRTUAL_KEYBOARD_TEXTURE_DATA_META = 1000219009, XR_TYPE_VIRTUAL_KEYBOARD_INPUT_INFO_META = 1000219010, XR_TYPE_VIRTUAL_KEYBOARD_TEXT_CONTEXT_CHANGE_INFO_META = 1000219011, XR_TYPE_EVENT_DATA_VIRTUAL_KEYBOARD_COMMIT_TEXT_META = 1000219014, XR_TYPE_EVENT_DATA_VIRTUAL_KEYBOARD_BACKSPACE_META = 1000219015, XR_TYPE_EVENT_DATA_VIRTUAL_KEYBOARD_ENTER_META = 1000219016, XR_TYPE_EVENT_DATA_VIRTUAL_KEYBOARD_SHOWN_META = 1000219017, XR_TYPE_EVENT_DATA_VIRTUAL_KEYBOARD_HIDDEN_META = 1000219018, XR_TYPE_EXTERNAL_CAMERA_OCULUS = 1000226000, XR_TYPE_VULKAN_SWAPCHAIN_CREATE_INFO_META = 1000227000, XR_TYPE_PERFORMANCE_METRICS_STATE_META = 1000232001, XR_TYPE_PERFORMANCE_METRICS_COUNTER_META = 1000232002, XR_TYPE_SPACE_LIST_SAVE_INFO_FB = 1000238000, XR_TYPE_EVENT_DATA_SPACE_LIST_SAVE_COMPLETE_FB = 1000238001, XR_TYPE_SPACE_USER_CREATE_INFO_FB = 1000241001, XR_TYPE_SYSTEM_HEADSET_ID_PROPERTIES_META = 1000245000, XR_TYPE_RECOMMENDED_LAYER_RESOLUTION_META = 1000254000, XR_TYPE_RECOMMENDED_LAYER_RESOLUTION_GET_INFO_META = 1000254001, XR_TYPE_SYSTEM_PASSTHROUGH_COLOR_LUT_PROPERTIES_META = 1000266000, XR_TYPE_PASSTHROUGH_COLOR_LUT_CREATE_INFO_META = 1000266001, XR_TYPE_PASSTHROUGH_COLOR_LUT_UPDATE_INFO_META = 1000266002, XR_TYPE_PASSTHROUGH_COLOR_MAP_LUT_META = 1000266100, XR_TYPE_PASSTHROUGH_COLOR_MAP_INTERPOLATED_LUT_META = 1000266101, XR_TYPE_SPACE_TRIANGLE_MESH_GET_INFO_META = 1000269001, XR_TYPE_SPACE_TRIANGLE_MESH_META = 1000269002, XR_TYPE_SYSTEM_PROPERTIES_BODY_TRACKING_FULL_BODY_META = 1000274000, XR_TYPE_EVENT_DATA_PASSTHROUGH_LAYER_RESUMED_META = 1000282000, XR_TYPE_SYSTEM_FACE_TRACKING_PROPERTIES2_FB = 1000287013, XR_TYPE_FACE_TRACKER_CREATE_INFO2_FB = 1000287014, XR_TYPE_FACE_EXPRESSION_INFO2_FB = 1000287015, XR_TYPE_FACE_EXPRESSION_WEIGHTS2_FB = 1000287016, XR_TYPE_SYSTEM_SPATIAL_ENTITY_SHARING_PROPERTIES_META = 1000290000, XR_TYPE_SHARE_SPACES_INFO_META = 1000290001, XR_TYPE_EVENT_DATA_SHARE_SPACES_COMPLETE_META = 1000290002, XR_TYPE_ENVIRONMENT_DEPTH_PROVIDER_CREATE_INFO_META = 1000291000, XR_TYPE_ENVIRONMENT_DEPTH_SWAPCHAIN_CREATE_INFO_META = 1000291001, XR_TYPE_ENVIRONMENT_DEPTH_SWAPCHAIN_STATE_META = 1000291002, XR_TYPE_ENVIRONMENT_DEPTH_IMAGE_ACQUIRE_INFO_META = 1000291003, XR_TYPE_ENVIRONMENT_DEPTH_IMAGE_VIEW_META = 1000291004, XR_TYPE_ENVIRONMENT_DEPTH_IMAGE_META = 1000291005, XR_TYPE_ENVIRONMENT_DEPTH_HAND_REMOVAL_SET_INFO_META = 1000291006, XR_TYPE_SYSTEM_ENVIRONMENT_DEPTH_PROPERTIES_META = 1000291007, XR_TYPE_RENDER_MODEL_CREATE_INFO_EXT = 1000300000, XR_TYPE_RENDER_MODEL_PROPERTIES_GET_INFO_EXT = 1000300001, XR_TYPE_RENDER_MODEL_PROPERTIES_EXT = 1000300002, XR_TYPE_RENDER_MODEL_SPACE_CREATE_INFO_EXT = 1000300003, XR_TYPE_RENDER_MODEL_STATE_GET_INFO_EXT = 1000300004, XR_TYPE_RENDER_MODEL_STATE_EXT = 1000300005, XR_TYPE_RENDER_MODEL_ASSET_CREATE_INFO_EXT = 1000300006, XR_TYPE_RENDER_MODEL_ASSET_DATA_GET_INFO_EXT = 1000300007, XR_TYPE_RENDER_MODEL_ASSET_DATA_EXT = 1000300008, XR_TYPE_RENDER_MODEL_ASSET_PROPERTIES_GET_INFO_EXT = 1000300009, XR_TYPE_RENDER_MODEL_ASSET_PROPERTIES_EXT = 1000300010, XR_TYPE_INTERACTION_RENDER_MODEL_IDS_ENUMERATE_INFO_EXT = 1000301000, XR_TYPE_INTERACTION_RENDER_MODEL_SUBACTION_PATH_INFO_EXT = 1000301001, XR_TYPE_EVENT_DATA_INTERACTION_RENDER_MODELS_CHANGED_EXT = 1000301002, XR_TYPE_INTERACTION_RENDER_MODEL_TOP_LEVEL_USER_PATH_GET_INFO_EXT = 1000301003, XR_TYPE_PASSTHROUGH_CREATE_INFO_HTC = 1000317001, XR_TYPE_PASSTHROUGH_COLOR_HTC = 1000317002, XR_TYPE_PASSTHROUGH_MESH_TRANSFORM_INFO_HTC = 1000317003, XR_TYPE_COMPOSITION_LAYER_PASSTHROUGH_HTC = 1000317004, XR_TYPE_FOVEATION_APPLY_INFO_HTC = 1000318000, XR_TYPE_FOVEATION_DYNAMIC_MODE_INFO_HTC = 1000318001, XR_TYPE_FOVEATION_CUSTOM_MODE_INFO_HTC = 1000318002, XR_TYPE_SYSTEM_ANCHOR_PROPERTIES_HTC = 1000319000, XR_TYPE_SPATIAL_ANCHOR_CREATE_INFO_HTC = 1000319001, XR_TYPE_SYSTEM_BODY_TRACKING_PROPERTIES_HTC = 1000320000, XR_TYPE_BODY_TRACKER_CREATE_INFO_HTC = 1000320001, XR_TYPE_BODY_JOINTS_LOCATE_INFO_HTC = 1000320002, XR_TYPE_BODY_JOINT_LOCATIONS_HTC = 1000320003, XR_TYPE_BODY_SKELETON_HTC = 1000320004, XR_TYPE_ACTIVE_ACTION_SET_PRIORITIES_EXT = 1000373000, XR_TYPE_SYSTEM_FORCE_FEEDBACK_CURL_PROPERTIES_MNDX = 1000375000, XR_TYPE_FORCE_FEEDBACK_CURL_APPLY_LOCATIONS_MNDX = 1000375001, XR_TYPE_BODY_TRACKER_CREATE_INFO_BD = 1000385001, XR_TYPE_BODY_JOINTS_LOCATE_INFO_BD = 1000385002, XR_TYPE_BODY_JOINT_LOCATIONS_BD = 1000385003, XR_TYPE_SYSTEM_BODY_TRACKING_PROPERTIES_BD = 1000385004, XR_TYPE_SYSTEM_SPATIAL_SENSING_PROPERTIES_BD = 1000389000, XR_TYPE_SPATIAL_ENTITY_COMPONENT_GET_INFO_BD = 1000389001, XR_TYPE_SPATIAL_ENTITY_LOCATION_GET_INFO_BD = 1000389002, XR_TYPE_SPATIAL_ENTITY_COMPONENT_DATA_LOCATION_BD = 1000389003, XR_TYPE_SPATIAL_ENTITY_COMPONENT_DATA_SEMANTIC_BD = 1000389004, XR_TYPE_SPATIAL_ENTITY_COMPONENT_DATA_BOUNDING_BOX_2D_BD = 1000389005, XR_TYPE_SPATIAL_ENTITY_COMPONENT_DATA_POLYGON_BD = 1000389006, XR_TYPE_SPATIAL_ENTITY_COMPONENT_DATA_BOUNDING_BOX_3D_BD = 1000389007, XR_TYPE_SPATIAL_ENTITY_COMPONENT_DATA_TRIANGLE_MESH_BD = 1000389008, XR_TYPE_SENSE_DATA_PROVIDER_CREATE_INFO_BD = 1000389009, XR_TYPE_SENSE_DATA_PROVIDER_START_INFO_BD = 1000389010, XR_TYPE_EVENT_DATA_SENSE_DATA_PROVIDER_STATE_CHANGED_BD = 1000389011, XR_TYPE_EVENT_DATA_SENSE_DATA_UPDATED_BD = 1000389012, XR_TYPE_SENSE_DATA_QUERY_INFO_BD = 1000389013, XR_TYPE_SENSE_DATA_QUERY_COMPLETION_BD = 1000389014, XR_TYPE_SENSE_DATA_FILTER_UUID_BD = 1000389015, XR_TYPE_SENSE_DATA_FILTER_SEMANTIC_BD = 1000389016, XR_TYPE_QUERIED_SENSE_DATA_GET_INFO_BD = 1000389017, XR_TYPE_QUERIED_SENSE_DATA_BD = 1000389018, XR_TYPE_SPATIAL_ENTITY_STATE_BD = 1000389019, XR_TYPE_SPATIAL_ENTITY_ANCHOR_CREATE_INFO_BD = 1000389020, XR_TYPE_ANCHOR_SPACE_CREATE_INFO_BD = 1000389021, XR_TYPE_SYSTEM_SPATIAL_ANCHOR_PROPERTIES_BD = 1000390000, XR_TYPE_SPATIAL_ANCHOR_CREATE_INFO_BD = 1000390001, XR_TYPE_SPATIAL_ANCHOR_CREATE_COMPLETION_BD = 1000390002, XR_TYPE_SPATIAL_ANCHOR_PERSIST_INFO_BD = 1000390003, XR_TYPE_SPATIAL_ANCHOR_UNPERSIST_INFO_BD = 1000390004, XR_TYPE_SYSTEM_SPATIAL_ANCHOR_SHARING_PROPERTIES_BD = 1000391000, XR_TYPE_SPATIAL_ANCHOR_SHARE_INFO_BD = 1000391001, XR_TYPE_SHARED_SPATIAL_ANCHOR_DOWNLOAD_INFO_BD = 1000391002, XR_TYPE_SYSTEM_SPATIAL_SCENE_PROPERTIES_BD = 1000392000, XR_TYPE_SCENE_CAPTURE_INFO_BD = 1000392001, XR_TYPE_SYSTEM_SPATIAL_MESH_PROPERTIES_BD = 1000393000, XR_TYPE_SENSE_DATA_PROVIDER_CREATE_INFO_SPATIAL_MESH_BD = 1000393001, XR_TYPE_FUTURE_POLL_RESULT_PROGRESS_BD = 1000394001, XR_TYPE_SYSTEM_SPATIAL_PLANE_PROPERTIES_BD = 1000396000, XR_TYPE_SPATIAL_ENTITY_COMPONENT_DATA_PLANE_ORIENTATION_BD = 1000396001, XR_TYPE_SENSE_DATA_FILTER_PLANE_ORIENTATION_BD = 1000396002, XR_TYPE_HAND_TRACKING_DATA_SOURCE_INFO_EXT = 1000428000, XR_TYPE_HAND_TRACKING_DATA_SOURCE_STATE_EXT = 1000428001, XR_TYPE_PLANE_DETECTOR_CREATE_INFO_EXT = 1000429001, XR_TYPE_PLANE_DETECTOR_BEGIN_INFO_EXT = 1000429002, XR_TYPE_PLANE_DETECTOR_GET_INFO_EXT = 1000429003, XR_TYPE_PLANE_DETECTOR_LOCATIONS_EXT = 1000429004, XR_TYPE_PLANE_DETECTOR_LOCATION_EXT = 1000429005, XR_TYPE_PLANE_DETECTOR_POLYGON_BUFFER_EXT = 1000429006, XR_TYPE_SYSTEM_PLANE_DETECTION_PROPERTIES_EXT = 1000429007, XR_TYPE_FUTURE_CANCEL_INFO_EXT = 1000469000, XR_TYPE_FUTURE_POLL_INFO_EXT = 1000469001, XR_TYPE_FUTURE_COMPLETION_EXT = 1000469002, XR_TYPE_FUTURE_POLL_RESULT_EXT = 1000469003, XR_TYPE_EVENT_DATA_USER_PRESENCE_CHANGED_EXT = 1000470000, XR_TYPE_SYSTEM_USER_PRESENCE_PROPERTIES_EXT = 1000470001, XR_TYPE_SYSTEM_NOTIFICATIONS_SET_INFO_ML = 1000473000, XR_TYPE_WORLD_MESH_DETECTOR_CREATE_INFO_ML = 1000474001, XR_TYPE_WORLD_MESH_STATE_REQUEST_INFO_ML = 1000474002, XR_TYPE_WORLD_MESH_BLOCK_STATE_ML = 1000474003, XR_TYPE_WORLD_MESH_STATE_REQUEST_COMPLETION_ML = 1000474004, XR_TYPE_WORLD_MESH_BUFFER_RECOMMENDED_SIZE_INFO_ML = 1000474005, XR_TYPE_WORLD_MESH_BUFFER_SIZE_ML = 1000474006, XR_TYPE_WORLD_MESH_BUFFER_ML = 1000474007, XR_TYPE_WORLD_MESH_BLOCK_REQUEST_ML = 1000474008, XR_TYPE_WORLD_MESH_GET_INFO_ML = 1000474009, XR_TYPE_WORLD_MESH_BLOCK_ML = 1000474010, XR_TYPE_WORLD_MESH_REQUEST_COMPLETION_ML = 1000474011, XR_TYPE_WORLD_MESH_REQUEST_COMPLETION_INFO_ML = 1000474012, XR_TYPE_SYSTEM_FACIAL_EXPRESSION_PROPERTIES_ML = 1000482004, XR_TYPE_FACIAL_EXPRESSION_CLIENT_CREATE_INFO_ML = 1000482005, XR_TYPE_FACIAL_EXPRESSION_BLEND_SHAPE_GET_INFO_ML = 1000482006, XR_TYPE_FACIAL_EXPRESSION_BLEND_SHAPE_PROPERTIES_ML = 1000482007, XR_TYPE_SYSTEM_SIMULTANEOUS_HANDS_AND_CONTROLLERS_PROPERTIES_META = 1000532001, XR_TYPE_SIMULTANEOUS_HANDS_AND_CONTROLLERS_TRACKING_RESUME_INFO_META = 1000532002, XR_TYPE_SIMULTANEOUS_HANDS_AND_CONTROLLERS_TRACKING_PAUSE_INFO_META = 1000532003, XR_TYPE_COLOCATION_DISCOVERY_START_INFO_META = 1000571010, XR_TYPE_COLOCATION_DISCOVERY_STOP_INFO_META = 1000571011, XR_TYPE_COLOCATION_ADVERTISEMENT_START_INFO_META = 1000571012, XR_TYPE_COLOCATION_ADVERTISEMENT_STOP_INFO_META = 1000571013, XR_TYPE_EVENT_DATA_START_COLOCATION_ADVERTISEMENT_COMPLETE_META = 1000571020, XR_TYPE_EVENT_DATA_STOP_COLOCATION_ADVERTISEMENT_COMPLETE_META = 1000571021, XR_TYPE_EVENT_DATA_COLOCATION_ADVERTISEMENT_COMPLETE_META = 1000571022, XR_TYPE_EVENT_DATA_START_COLOCATION_DISCOVERY_COMPLETE_META = 1000571023, XR_TYPE_EVENT_DATA_COLOCATION_DISCOVERY_RESULT_META = 1000571024, XR_TYPE_EVENT_DATA_COLOCATION_DISCOVERY_COMPLETE_META = 1000571025, XR_TYPE_EVENT_DATA_STOP_COLOCATION_DISCOVERY_COMPLETE_META = 1000571026, XR_TYPE_SYSTEM_COLOCATION_DISCOVERY_PROPERTIES_META = 1000571030, XR_TYPE_SHARE_SPACES_RECIPIENT_GROUPS_META = 1000572000, XR_TYPE_SPACE_GROUP_UUID_FILTER_INFO_META = 1000572001, XR_TYPE_SYSTEM_SPATIAL_ENTITY_GROUP_SHARING_PROPERTIES_META = 1000572100, XR_TYPE_SPATIAL_CAPABILITY_COMPONENT_TYPES_EXT = 1000740000, XR_TYPE_SPATIAL_CONTEXT_CREATE_INFO_EXT = 1000740001, XR_TYPE_CREATE_SPATIAL_CONTEXT_COMPLETION_EXT = 1000740002, XR_TYPE_SPATIAL_DISCOVERY_SNAPSHOT_CREATE_INFO_EXT = 1000740003, XR_TYPE_CREATE_SPATIAL_DISCOVERY_SNAPSHOT_COMPLETION_INFO_EXT = 1000740004, XR_TYPE_CREATE_SPATIAL_DISCOVERY_SNAPSHOT_COMPLETION_EXT = 1000740005, XR_TYPE_SPATIAL_COMPONENT_DATA_QUERY_CONDITION_EXT = 1000740006, XR_TYPE_SPATIAL_COMPONENT_DATA_QUERY_RESULT_EXT = 1000740007, XR_TYPE_SPATIAL_BUFFER_GET_INFO_EXT = 1000740008, XR_TYPE_SPATIAL_COMPONENT_BOUNDED_2D_LIST_EXT = 1000740009, XR_TYPE_SPATIAL_COMPONENT_BOUNDED_3D_LIST_EXT = 1000740010, XR_TYPE_SPATIAL_COMPONENT_PARENT_LIST_EXT = 1000740011, XR_TYPE_SPATIAL_COMPONENT_MESH_3D_LIST_EXT = 1000740012, XR_TYPE_SPATIAL_ENTITY_FROM_ID_CREATE_INFO_EXT = 1000740013, XR_TYPE_SPATIAL_UPDATE_SNAPSHOT_CREATE_INFO_EXT = 1000740014, XR_TYPE_EVENT_DATA_SPATIAL_DISCOVERY_RECOMMENDED_EXT = 1000740015, XR_TYPE_SPATIAL_FILTER_TRACKING_STATE_EXT = 1000740016, XR_TYPE_SPATIAL_CAPABILITY_CONFIGURATION_PLANE_TRACKING_EXT = 1000741000, XR_TYPE_SPATIAL_COMPONENT_PLANE_ALIGNMENT_LIST_EXT = 1000741001, XR_TYPE_SPATIAL_COMPONENT_MESH_2D_LIST_EXT = 1000741002, XR_TYPE_SPATIAL_COMPONENT_POLYGON_2D_LIST_EXT = 1000741003, XR_TYPE_SPATIAL_COMPONENT_PLANE_SEMANTIC_LABEL_LIST_EXT = 1000741004, XR_TYPE_SPATIAL_CAPABILITY_CONFIGURATION_QR_CODE_EXT = 1000743000, XR_TYPE_SPATIAL_CAPABILITY_CONFIGURATION_MICRO_QR_CODE_EXT = 1000743001, XR_TYPE_SPATIAL_CAPABILITY_CONFIGURATION_ARUCO_MARKER_EXT = 1000743002, XR_TYPE_SPATIAL_CAPABILITY_CONFIGURATION_APRIL_TAG_EXT = 1000743003, XR_TYPE_SPATIAL_MARKER_SIZE_EXT = 1000743004, XR_TYPE_SPATIAL_MARKER_STATIC_OPTIMIZATION_EXT = 1000743005, XR_TYPE_SPATIAL_COMPONENT_MARKER_LIST_EXT = 1000743006, XR_TYPE_SPATIAL_CAPABILITY_CONFIGURATION_ANCHOR_EXT = 1000762000, XR_TYPE_SPATIAL_COMPONENT_ANCHOR_LIST_EXT = 1000762001, XR_TYPE_SPATIAL_ANCHOR_CREATE_INFO_EXT = 1000762002, XR_TYPE_SPATIAL_PERSISTENCE_CONTEXT_CREATE_INFO_EXT = 1000763000, XR_TYPE_CREATE_SPATIAL_PERSISTENCE_CONTEXT_COMPLETION_EXT = 1000763001, XR_TYPE_SPATIAL_CONTEXT_PERSISTENCE_CONFIG_EXT = 1000763002, XR_TYPE_SPATIAL_DISCOVERY_PERSISTENCE_UUID_FILTER_EXT = 1000763003, XR_TYPE_SPATIAL_COMPONENT_PERSISTENCE_LIST_EXT = 1000763004, XR_TYPE_SPATIAL_ENTITY_PERSIST_INFO_EXT = 1000781000, XR_TYPE_PERSIST_SPATIAL_ENTITY_COMPLETION_EXT = 1000781001, XR_TYPE_SPATIAL_ENTITY_UNPERSIST_INFO_EXT = 1000781002, XR_TYPE_UNPERSIST_SPATIAL_ENTITY_COMPLETION_EXT = 1000781003, XR_TYPE_GRAPHICS_BINDING_VULKAN2_KHR = XR_TYPE_GRAPHICS_BINDING_VULKAN_KHR, XR_TYPE_SWAPCHAIN_IMAGE_VULKAN2_KHR = XR_TYPE_SWAPCHAIN_IMAGE_VULKAN_KHR, XR_TYPE_GRAPHICS_REQUIREMENTS_VULKAN2_KHR = XR_TYPE_GRAPHICS_REQUIREMENTS_VULKAN_KHR, XR_TYPE_DEVICE_PCM_SAMPLE_RATE_GET_INFO_FB = XR_TYPE_DEVICE_PCM_SAMPLE_RATE_STATE_FB, XR_TYPE_SPACES_LOCATE_INFO_KHR = XR_TYPE_SPACES_LOCATE_INFO, XR_TYPE_SPACE_LOCATIONS_KHR = XR_TYPE_SPACE_LOCATIONS, XR_TYPE_SPACE_VELOCITIES_KHR = XR_TYPE_SPACE_VELOCITIES, XR_STRUCTURE_TYPE_MAX_ENUM = 0x7FFFFFFF } XrStructureType; typedef enum XrFormFactor { XR_FORM_FACTOR_HEAD_MOUNTED_DISPLAY = 1, XR_FORM_FACTOR_HANDHELD_DISPLAY = 2, XR_FORM_FACTOR_MAX_ENUM = 0x7FFFFFFF } XrFormFactor; typedef enum XrViewConfigurationType { XR_VIEW_CONFIGURATION_TYPE_PRIMARY_MONO = 1, XR_VIEW_CONFIGURATION_TYPE_PRIMARY_STEREO = 2, XR_VIEW_CONFIGURATION_TYPE_PRIMARY_STEREO_WITH_FOVEATED_INSET = 1000037000, XR_VIEW_CONFIGURATION_TYPE_SECONDARY_MONO_FIRST_PERSON_OBSERVER_MSFT = 1000054000, XR_VIEW_CONFIGURATION_TYPE_PRIMARY_QUAD_VARJO = XR_VIEW_CONFIGURATION_TYPE_PRIMARY_STEREO_WITH_FOVEATED_INSET, XR_VIEW_CONFIGURATION_TYPE_MAX_ENUM = 0x7FFFFFFF } XrViewConfigurationType; typedef enum XrEnvironmentBlendMode { XR_ENVIRONMENT_BLEND_MODE_OPAQUE = 1, XR_ENVIRONMENT_BLEND_MODE_ADDITIVE = 2, XR_ENVIRONMENT_BLEND_MODE_ALPHA_BLEND = 3, XR_ENVIRONMENT_BLEND_MODE_MAX_ENUM = 0x7FFFFFFF } XrEnvironmentBlendMode; typedef enum XrReferenceSpaceType { XR_REFERENCE_SPACE_TYPE_VIEW = 1, XR_REFERENCE_SPACE_TYPE_LOCAL = 2, XR_REFERENCE_SPACE_TYPE_STAGE = 3, XR_REFERENCE_SPACE_TYPE_LOCAL_FLOOR = 1000426000, XR_REFERENCE_SPACE_TYPE_UNBOUNDED_MSFT = 1000038000, XR_REFERENCE_SPACE_TYPE_COMBINED_EYE_VARJO = 1000121000, XR_REFERENCE_SPACE_TYPE_LOCALIZATION_MAP_ML = 1000139000, XR_REFERENCE_SPACE_TYPE_LOCAL_FLOOR_EXT = XR_REFERENCE_SPACE_TYPE_LOCAL_FLOOR, XR_REFERENCE_SPACE_TYPE_MAX_ENUM = 0x7FFFFFFF } XrReferenceSpaceType; typedef enum XrActionType { XR_ACTION_TYPE_BOOLEAN_INPUT = 1, XR_ACTION_TYPE_FLOAT_INPUT = 2, XR_ACTION_TYPE_VECTOR2F_INPUT = 3, XR_ACTION_TYPE_POSE_INPUT = 4, XR_ACTION_TYPE_VIBRATION_OUTPUT = 100, XR_ACTION_TYPE_MAX_ENUM = 0x7FFFFFFF } XrActionType; typedef enum XrEyeVisibility { XR_EYE_VISIBILITY_BOTH = 0, XR_EYE_VISIBILITY_LEFT = 1, XR_EYE_VISIBILITY_RIGHT = 2, XR_EYE_VISIBILITY_MAX_ENUM = 0x7FFFFFFF } XrEyeVisibility; typedef enum XrSessionState { XR_SESSION_STATE_UNKNOWN = 0, XR_SESSION_STATE_IDLE = 1, XR_SESSION_STATE_READY = 2, XR_SESSION_STATE_SYNCHRONIZED = 3, XR_SESSION_STATE_VISIBLE = 4, XR_SESSION_STATE_FOCUSED = 5, XR_SESSION_STATE_STOPPING = 6, XR_SESSION_STATE_LOSS_PENDING = 7, XR_SESSION_STATE_EXITING = 8, XR_SESSION_STATE_MAX_ENUM = 0x7FFFFFFF } XrSessionState; typedef enum XrObjectType { XR_OBJECT_TYPE_UNKNOWN = 0, XR_OBJECT_TYPE_INSTANCE = 1, XR_OBJECT_TYPE_SESSION = 2, XR_OBJECT_TYPE_SWAPCHAIN = 3, XR_OBJECT_TYPE_SPACE = 4, XR_OBJECT_TYPE_ACTION_SET = 5, XR_OBJECT_TYPE_ACTION = 6, XR_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT = 1000019000, XR_OBJECT_TYPE_SPATIAL_ANCHOR_MSFT = 1000039000, XR_OBJECT_TYPE_SPATIAL_GRAPH_NODE_BINDING_MSFT = 1000049000, XR_OBJECT_TYPE_HAND_TRACKER_EXT = 1000051000, XR_OBJECT_TYPE_BODY_TRACKER_FB = 1000076000, XR_OBJECT_TYPE_SCENE_OBSERVER_MSFT = 1000097000, XR_OBJECT_TYPE_SCENE_MSFT = 1000097001, XR_OBJECT_TYPE_FACIAL_TRACKER_HTC = 1000104000, XR_OBJECT_TYPE_FOVEATION_PROFILE_FB = 1000114000, XR_OBJECT_TYPE_TRIANGLE_MESH_FB = 1000117000, XR_OBJECT_TYPE_PASSTHROUGH_FB = 1000118000, XR_OBJECT_TYPE_PASSTHROUGH_LAYER_FB = 1000118002, XR_OBJECT_TYPE_GEOMETRY_INSTANCE_FB = 1000118004, XR_OBJECT_TYPE_MARKER_DETECTOR_ML = 1000138000, XR_OBJECT_TYPE_EXPORTED_LOCALIZATION_MAP_ML = 1000139000, XR_OBJECT_TYPE_SPATIAL_ANCHORS_STORAGE_ML = 1000141000, XR_OBJECT_TYPE_SPATIAL_ANCHOR_STORE_CONNECTION_MSFT = 1000142000, XR_OBJECT_TYPE_FACE_TRACKER_FB = 1000201000, XR_OBJECT_TYPE_EYE_TRACKER_FB = 1000202000, XR_OBJECT_TYPE_VIRTUAL_KEYBOARD_META = 1000219000, XR_OBJECT_TYPE_SPACE_USER_FB = 1000241000, XR_OBJECT_TYPE_PASSTHROUGH_COLOR_LUT_META = 1000266000, XR_OBJECT_TYPE_FACE_TRACKER2_FB = 1000287012, XR_OBJECT_TYPE_ENVIRONMENT_DEPTH_PROVIDER_META = 1000291000, XR_OBJECT_TYPE_ENVIRONMENT_DEPTH_SWAPCHAIN_META = 1000291001, XR_OBJECT_TYPE_RENDER_MODEL_EXT = 1000300000, XR_OBJECT_TYPE_RENDER_MODEL_ASSET_EXT = 1000300001, XR_OBJECT_TYPE_PASSTHROUGH_HTC = 1000317000, XR_OBJECT_TYPE_BODY_TRACKER_HTC = 1000320000, XR_OBJECT_TYPE_BODY_TRACKER_BD = 1000385000, XR_OBJECT_TYPE_SENSE_DATA_PROVIDER_BD = 1000389000, XR_OBJECT_TYPE_SENSE_DATA_SNAPSHOT_BD = 1000389001, XR_OBJECT_TYPE_ANCHOR_BD = 1000389002, XR_OBJECT_TYPE_PLANE_DETECTOR_EXT = 1000429000, XR_OBJECT_TYPE_WORLD_MESH_DETECTOR_ML = 1000474000, XR_OBJECT_TYPE_FACIAL_EXPRESSION_CLIENT_ML = 1000482000, XR_OBJECT_TYPE_SPATIAL_ENTITY_EXT = 1000740000, XR_OBJECT_TYPE_SPATIAL_CONTEXT_EXT = 1000740001, XR_OBJECT_TYPE_SPATIAL_SNAPSHOT_EXT = 1000740002, XR_OBJECT_TYPE_SPATIAL_PERSISTENCE_CONTEXT_EXT = 1000763000, XR_OBJECT_TYPE_MAX_ENUM = 0x7FFFFFFF } XrObjectType; typedef XrFlags64 XrInstanceCreateFlags; typedef XrFlags64 XrSessionCreateFlags; typedef XrFlags64 XrSpaceVelocityFlags; static const XrSpaceVelocityFlags XR_SPACE_VELOCITY_LINEAR_VALID_BIT = 0x00000001; static const XrSpaceVelocityFlags XR_SPACE_VELOCITY_ANGULAR_VALID_BIT = 0x00000002; typedef XrFlags64 XrSpaceLocationFlags; static const XrSpaceLocationFlags XR_SPACE_LOCATION_ORIENTATION_VALID_BIT = 0x00000001; static const XrSpaceLocationFlags XR_SPACE_LOCATION_POSITION_VALID_BIT = 0x00000002; static const XrSpaceLocationFlags XR_SPACE_LOCATION_ORIENTATION_TRACKED_BIT = 0x00000004; static const XrSpaceLocationFlags XR_SPACE_LOCATION_POSITION_TRACKED_BIT = 0x00000008; typedef XrFlags64 XrSwapchainCreateFlags; static const XrSwapchainCreateFlags XR_SWAPCHAIN_CREATE_PROTECTED_CONTENT_BIT = 0x00000001; static const XrSwapchainCreateFlags XR_SWAPCHAIN_CREATE_STATIC_IMAGE_BIT = 0x00000002; typedef XrFlags64 XrSwapchainUsageFlags; static const XrSwapchainUsageFlags XR_SWAPCHAIN_USAGE_COLOR_ATTACHMENT_BIT = 0x00000001; static const XrSwapchainUsageFlags XR_SWAPCHAIN_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 0x00000002; static const XrSwapchainUsageFlags XR_SWAPCHAIN_USAGE_UNORDERED_ACCESS_BIT = 0x00000004; static const XrSwapchainUsageFlags XR_SWAPCHAIN_USAGE_TRANSFER_SRC_BIT = 0x00000008; static const XrSwapchainUsageFlags XR_SWAPCHAIN_USAGE_TRANSFER_DST_BIT = 0x00000010; static const XrSwapchainUsageFlags XR_SWAPCHAIN_USAGE_SAMPLED_BIT = 0x00000020; static const XrSwapchainUsageFlags XR_SWAPCHAIN_USAGE_MUTABLE_FORMAT_BIT = 0x00000040; static const XrSwapchainUsageFlags XR_SWAPCHAIN_USAGE_INPUT_ATTACHMENT_BIT_MND = 0x00000080; static const XrSwapchainUsageFlags XR_SWAPCHAIN_USAGE_INPUT_ATTACHMENT_BIT_KHR = 0x00000080; typedef XrFlags64 XrCompositionLayerFlags; static const XrCompositionLayerFlags XR_COMPOSITION_LAYER_CORRECT_CHROMATIC_ABERRATION_BIT = 0x00000001; static const XrCompositionLayerFlags XR_COMPOSITION_LAYER_BLEND_TEXTURE_SOURCE_ALPHA_BIT = 0x00000002; static const XrCompositionLayerFlags XR_COMPOSITION_LAYER_UNPREMULTIPLIED_ALPHA_BIT = 0x00000004; static const XrCompositionLayerFlags XR_COMPOSITION_LAYER_INVERTED_ALPHA_BIT_EXT = 0x00000008; typedef XrFlags64 XrViewStateFlags; static const XrViewStateFlags XR_VIEW_STATE_ORIENTATION_VALID_BIT = 0x00000001; static const XrViewStateFlags XR_VIEW_STATE_POSITION_VALID_BIT = 0x00000002; static const XrViewStateFlags XR_VIEW_STATE_ORIENTATION_TRACKED_BIT = 0x00000004; static const XrViewStateFlags XR_VIEW_STATE_POSITION_TRACKED_BIT = 0x00000008; typedef XrFlags64 XrInputSourceLocalizedNameFlags; static const XrInputSourceLocalizedNameFlags XR_INPUT_SOURCE_LOCALIZED_NAME_USER_PATH_BIT = 0x00000001; static const XrInputSourceLocalizedNameFlags XR_INPUT_SOURCE_LOCALIZED_NAME_INTERACTION_PROFILE_BIT = 0x00000002; static const XrInputSourceLocalizedNameFlags XR_INPUT_SOURCE_LOCALIZED_NAME_COMPONENT_BIT = 0x00000004; typedef void (*PFN_xrVoidFunction)(void);
typedef struct XrApiLayerProperties { XrStructureType type; void* next; char layerName[256]; XrVersion specVersion; uint32_t layerVersion; char description[256]; } XrApiLayerProperties; typedef struct XrExtensionProperties { XrStructureType type; void* next; char extensionName[128]; uint32_t extensionVersion; } XrExtensionProperties; typedef struct XrApplicationInfo { char applicationName[128]; uint32_t applicationVersion; char engineName[128]; uint32_t engineVersion; XrVersion apiVersion; } XrApplicationInfo; typedef struct XrInstanceCreateInfo { XrStructureType type; const void* next; XrInstanceCreateFlags createFlags; XrApplicationInfo applicationInfo; uint32_t enabledApiLayerCount; const char* const* enabledApiLayerNames; uint32_t enabledExtensionCount; const char* const* enabledExtensionNames; } XrInstanceCreateInfo; typedef struct XrInstanceProperties { XrStructureType type; void* next; XrVersion runtimeVersion; char runtimeName[128]; } XrInstanceProperties; typedef struct XrEventDataBuffer { XrStructureType type; const void* next; uint8_t varying[4000]; } XrEventDataBuffer; typedef struct XrSystemGetInfo { XrStructureType type; const void* next; XrFormFactor formFactor; } XrSystemGetInfo; typedef struct XrSystemGraphicsProperties { uint32_t maxSwapchainImageHeight; uint32_t maxSwapchainImageWidth; uint32_t maxLayerCount; } XrSystemGraphicsProperties; typedef struct XrSystemTrackingProperties { XrBool32 orientationTracking; XrBool32 positionTracking; } XrSystemTrackingProperties; typedef struct XrSystemProperties { XrStructureType type; void* next; XrSystemId systemId; uint32_t vendorId; char systemName[256]; XrSystemGraphicsProperties graphicsProperties; XrSystemTrackingProperties trackingProperties; } XrSystemProperties; typedef struct XrSessionCreateInfo { XrStructureType type; const void* next; XrSessionCreateFlags createFlags; XrSystemId systemId; } XrSessionCreateInfo; typedef struct XrVector3f { float x; float y; float z; } XrVector3f; typedef struct XrSpaceVelocity { XrStructureType type; void* next; XrSpaceVelocityFlags velocityFlags; XrVector3f linearVelocity; XrVector3f angularVelocity; } XrSpaceVelocity; typedef struct XrQuaternionf { float x; float y; float z; float w; } XrQuaternionf; typedef struct XrPosef { XrQuaternionf orientation; XrVector3f position; } XrPosef; typedef struct XrReferenceSpaceCreateInfo { XrStructureType type; const void* next; XrReferenceSpaceType referenceSpaceType; XrPosef poseInReferenceSpace; } XrReferenceSpaceCreateInfo; typedef struct XrExtent2Df { float width; float height; } XrExtent2Df; typedef struct XrActionSpaceCreateInfo { XrStructureType type; const void* next; XrAction action; XrPath subactionPath; XrPosef poseInActionSpace; } XrActionSpaceCreateInfo; typedef struct XrSpaceLocation { XrStructureType type; void* next; XrSpaceLocationFlags locationFlags; XrPosef pose; } XrSpaceLocation; typedef struct XrViewConfigurationProperties { XrStructureType type; void* next; XrViewConfigurationType viewConfigurationType; XrBool32 fovMutable; } XrViewConfigurationProperties; typedef struct XrViewConfigurationView { XrStructureType type; void* next; uint32_t recommendedImageRectWidth; uint32_t maxImageRectWidth; uint32_t recommendedImageRectHeight; uint32_t maxImageRectHeight; uint32_t recommendedSwapchainSampleCount; uint32_t maxSwapchainSampleCount; } XrViewConfigurationView; typedef struct XrSwapchainCreateInfo { XrStructureType type; const void* next; XrSwapchainCreateFlags createFlags; XrSwapchainUsageFlags usageFlags; int64_t format; uint32_t sampleCount; uint32_t width; uint32_t height; uint32_t faceCount; uint32_t arraySize; uint32_t mipCount; } XrSwapchainCreateInfo; typedef struct XrSwapchainImageBaseHeader { XrStructureType type; void* next; } XrSwapchainImageBaseHeader; typedef struct XrSwapchainImageAcquireInfo { XrStructureType type; const void* next; } XrSwapchainImageAcquireInfo; typedef struct XrSwapchainImageWaitInfo { XrStructureType type; const void* next; XrDuration timeout; } XrSwapchainImageWaitInfo; typedef struct XrSwapchainImageReleaseInfo { XrStructureType type; const void* next; } XrSwapchainImageReleaseInfo; typedef struct XrSessionBeginInfo { XrStructureType type; const void* next; XrViewConfigurationType primaryViewConfigurationType; } XrSessionBeginInfo; typedef struct XrFrameWaitInfo { XrStructureType type; const void* next; } XrFrameWaitInfo; typedef struct XrFrameState { XrStructureType type; void* next; XrTime predictedDisplayTime; XrDuration predictedDisplayPeriod; XrBool32 shouldRender; } XrFrameState; typedef struct XrFrameBeginInfo { XrStructureType type; const void* next; } XrFrameBeginInfo; typedef struct XrCompositionLayerBaseHeader { XrStructureType type; const void* next; XrCompositionLayerFlags layerFlags; XrSpace space; } XrCompositionLayerBaseHeader; typedef struct XrFrameEndInfo { XrStructureType type; const void* next; XrTime displayTime; XrEnvironmentBlendMode environmentBlendMode; uint32_t layerCount; const XrCompositionLayerBaseHeader* const* layers; } XrFrameEndInfo; typedef struct XrViewLocateInfo { XrStructureType type; const void* next; XrViewConfigurationType viewConfigurationType; XrTime displayTime; XrSpace space; } XrViewLocateInfo; typedef struct XrViewState { XrStructureType type; void* next; XrViewStateFlags viewStateFlags; } XrViewState; typedef struct XrFovf { float angleLeft; float angleRight; float angleUp; float angleDown; } XrFovf; typedef struct XrView { XrStructureType type; void* next; XrPosef pose; XrFovf fov; } XrView; typedef struct XrActionSetCreateInfo { XrStructureType type; const void* next; char actionSetName[64]; char localizedActionSetName[128]; uint32_t priority; } XrActionSetCreateInfo; typedef struct XrActionCreateInfo { XrStructureType type; const void* next; char actionName[64]; XrActionType actionType; uint32_t countSubactionPaths; const XrPath* subactionPaths; char localizedActionName[128]; } XrActionCreateInfo; typedef struct XrActionSuggestedBinding { XrAction action; XrPath binding; } XrActionSuggestedBinding; typedef struct XrInteractionProfileSuggestedBinding { XrStructureType type; const void* next; XrPath interactionProfile; uint32_t countSuggestedBindings; const XrActionSuggestedBinding* suggestedBindings; } XrInteractionProfileSuggestedBinding; typedef struct XrSessionActionSetsAttachInfo { XrStructureType type; const void* next; uint32_t countActionSets; const XrActionSet* actionSets; } XrSessionActionSetsAttachInfo; typedef struct XrInteractionProfileState { XrStructureType type; void* next; XrPath interactionProfile; } XrInteractionProfileState; typedef struct XrActionStateGetInfo { XrStructureType type; const void* next; XrAction action; XrPath subactionPath; } XrActionStateGetInfo; typedef struct XrActionStateBoolean { XrStructureType type; void* next; XrBool32 currentState; XrBool32 changedSinceLastSync; XrTime lastChangeTime; XrBool32 isActive; } XrActionStateBoolean; typedef struct XrActionStateFloat { XrStructureType type; void* next; float currentState; XrBool32 changedSinceLastSync; XrTime lastChangeTime; XrBool32 isActive; } XrActionStateFloat; typedef struct XrVector2f { float x; float y; } XrVector2f; typedef struct XrActionStateVector2f { XrStructureType type; void* next; XrVector2f currentState; XrBool32 changedSinceLastSync; XrTime lastChangeTime; XrBool32 isActive; } XrActionStateVector2f; typedef struct XrActionStatePose { XrStructureType type; void* next; XrBool32 isActive; } XrActionStatePose; typedef struct XrActiveActionSet { XrActionSet actionSet; XrPath subactionPath; } XrActiveActionSet; typedef struct XrActionsSyncInfo { XrStructureType type; const void* next; uint32_t countActiveActionSets; const XrActiveActionSet* activeActionSets; } XrActionsSyncInfo; typedef struct XrBoundSourcesForActionEnumerateInfo { XrStructureType type; const void* next; XrAction action; } XrBoundSourcesForActionEnumerateInfo; typedef struct XrInputSourceLocalizedNameGetInfo { XrStructureType type; const void* next; XrPath sourcePath; XrInputSourceLocalizedNameFlags whichComponents; } XrInputSourceLocalizedNameGetInfo; typedef struct XrHapticActionInfo { XrStructureType type; const void* next; XrAction action; XrPath subactionPath; } XrHapticActionInfo; typedef struct XrHapticBaseHeader { XrStructureType type; const void* next; } XrHapticBaseHeader; typedef struct XrBaseInStructure { XrStructureType type; const struct XrBaseInStructure* next; } XrBaseInStructure; typedef struct XrBaseOutStructure { XrStructureType type; struct XrBaseOutStructure* next; } XrBaseOutStructure; typedef struct XrOffset2Di { int32_t x; int32_t y; } XrOffset2Di; typedef struct XrExtent2Di { int32_t width; int32_t height; } XrExtent2Di; typedef struct XrRect2Di { XrOffset2Di offset; XrExtent2Di extent; } XrRect2Di; typedef struct XrSwapchainSubImage { XrSwapchain swapchain; XrRect2Di imageRect; uint32_t imageArrayIndex; } XrSwapchainSubImage; typedef struct XrCompositionLayerProjectionView { XrStructureType type; const void* next; XrPosef pose; XrFovf fov; XrSwapchainSubImage subImage; } XrCompositionLayerProjectionView; typedef struct XrCompositionLayerProjection { XrStructureType type; const void* next; XrCompositionLayerFlags layerFlags; XrSpace space; uint32_t viewCount; const XrCompositionLayerProjectionView* views; } XrCompositionLayerProjection; typedef struct XrCompositionLayerQuad { XrStructureType type; const void* next; XrCompositionLayerFlags layerFlags; XrSpace space; XrEyeVisibility eyeVisibility; XrSwapchainSubImage subImage; XrPosef pose; XrExtent2Df size; } XrCompositionLayerQuad; typedef struct XrEventDataBaseHeader { XrStructureType type; const void* next; } XrEventDataBaseHeader; typedef struct XrEventDataEventsLost { XrStructureType type; const void* next; uint32_t lostEventCount; } XrEventDataEventsLost; typedef struct XrEventDataInstanceLossPending { XrStructureType type; const void* next; XrTime lossTime; } XrEventDataInstanceLossPending; typedef struct XrEventDataSessionStateChanged { XrStructureType type; const void* next; XrSession session; XrSessionState state; XrTime time; } XrEventDataSessionStateChanged; typedef struct XrEventDataReferenceSpaceChangePending { XrStructureType type; const void* next; XrSession session; XrReferenceSpaceType referenceSpaceType; XrTime changeTime; XrBool32 poseValid; XrPosef poseInPreviousSpace; } XrEventDataReferenceSpaceChangePending; typedef struct XrEventDataInteractionProfileChanged { XrStructureType type; const void* next; XrSession session; } XrEventDataInteractionProfileChanged; typedef struct XrHapticVibration { XrStructureType type; const void* next; XrDuration duration; float frequency; float amplitude; } XrHapticVibration; typedef struct XrOffset2Df { float x; float y; } XrOffset2Df; typedef struct XrRect2Df { XrOffset2Df offset; XrExtent2Df extent; } XrRect2Df; typedef struct XrVector4f { float x; float y; float z; float w; } XrVector4f; typedef struct XrColor4f { float r; float g; float b; float a; } XrColor4f; typedef XrResult (*PFN_xrGetInstanceProcAddr)(XrInstance instance, const char* name, PFN_xrVoidFunction* function);
typedef XrResult (*PFN_xrEnumerateApiLayerProperties)(uint32_t propertyCapacityInput, uint32_t* propertyCountOutput, XrApiLayerProperties* properties);
typedef XrResult (*PFN_xrEnumerateInstanceExtensionProperties)(const char* layerName, uint32_t propertyCapacityInput, uint32_t* propertyCountOutput, XrExtensionProperties* properties);
typedef XrResult (*PFN_xrCreateInstance)(const XrInstanceCreateInfo* createInfo, XrInstance* instance);
typedef XrResult (*PFN_xrDestroyInstance)(XrInstance instance);
typedef XrResult (*PFN_xrGetInstanceProperties)(XrInstance instance, XrInstanceProperties* instanceProperties);
typedef XrResult (*PFN_xrPollEvent)(XrInstance instance, XrEventDataBuffer* eventData);
typedef XrResult (*PFN_xrResultToString)(XrInstance instance, XrResult value, char buffer[64]);
typedef XrResult (*PFN_xrStructureTypeToString)(XrInstance instance, XrStructureType value, char buffer[64]);
typedef XrResult (*PFN_xrGetSystem)(XrInstance instance, const XrSystemGetInfo* getInfo, XrSystemId* systemId);
typedef XrResult (*PFN_xrGetSystemProperties)(XrInstance instance, XrSystemId systemId, XrSystemProperties* properties);
typedef XrResult (*PFN_xrEnumerateEnvironmentBlendModes)(XrInstance instance, XrSystemId systemId, XrViewConfigurationType viewConfigurationType, uint32_t environmentBlendModeCapacityInput, uint32_t* environmentBlendModeCountOutput, XrEnvironmentBlendMode* environmentBlendModes);
typedef XrResult (*PFN_xrCreateSession)(XrInstance instance, const XrSessionCreateInfo* createInfo, XrSession* session);
typedef XrResult (*PFN_xrDestroySession)(XrSession session);
typedef XrResult (*PFN_xrEnumerateReferenceSpaces)(XrSession session, uint32_t spaceCapacityInput, uint32_t* spaceCountOutput, XrReferenceSpaceType* spaces);
typedef XrResult (*PFN_xrCreateReferenceSpace)(XrSession session, const XrReferenceSpaceCreateInfo* createInfo, XrSpace* space);
typedef XrResult (*PFN_xrGetReferenceSpaceBoundsRect)(XrSession session, XrReferenceSpaceType referenceSpaceType, XrExtent2Df* bounds);
typedef XrResult (*PFN_xrCreateActionSpace)(XrSession session, const XrActionSpaceCreateInfo* createInfo, XrSpace* space);
typedef XrResult (*PFN_xrLocateSpace)(XrSpace space, XrSpace baseSpace, XrTime time, XrSpaceLocation* location);
typedef XrResult (*PFN_xrDestroySpace)(XrSpace space);
typedef XrResult (*PFN_xrEnumerateViewConfigurations)(XrInstance instance, XrSystemId systemId, uint32_t viewConfigurationTypeCapacityInput, uint32_t* viewConfigurationTypeCountOutput, XrViewConfigurationType* viewConfigurationTypes);
typedef XrResult (*PFN_xrGetViewConfigurationProperties)(XrInstance instance, XrSystemId systemId, XrViewConfigurationType viewConfigurationType, XrViewConfigurationProperties* configurationProperties);
typedef XrResult (*PFN_xrEnumerateViewConfigurationViews)(XrInstance instance, XrSystemId systemId, XrViewConfigurationType viewConfigurationType, uint32_t viewCapacityInput, uint32_t* viewCountOutput, XrViewConfigurationView* views);
typedef XrResult (*PFN_xrEnumerateSwapchainFormats)(XrSession session, uint32_t formatCapacityInput, uint32_t* formatCountOutput, int64_t* formats);
typedef XrResult (*PFN_xrCreateSwapchain)(XrSession session, const XrSwapchainCreateInfo* createInfo, XrSwapchain* swapchain);
typedef XrResult (*PFN_xrDestroySwapchain)(XrSwapchain swapchain);
typedef XrResult (*PFN_xrEnumerateSwapchainImages)(XrSwapchain swapchain, uint32_t imageCapacityInput, uint32_t* imageCountOutput, XrSwapchainImageBaseHeader* images);
typedef XrResult (*PFN_xrAcquireSwapchainImage)(XrSwapchain swapchain, const XrSwapchainImageAcquireInfo* acquireInfo, uint32_t* index);
typedef XrResult (*PFN_xrWaitSwapchainImage)(XrSwapchain swapchain, const XrSwapchainImageWaitInfo* waitInfo);
typedef XrResult (*PFN_xrReleaseSwapchainImage)(XrSwapchain swapchain, const XrSwapchainImageReleaseInfo* releaseInfo);
typedef XrResult (*PFN_xrBeginSession)(XrSession session, const XrSessionBeginInfo* beginInfo);
typedef XrResult (*PFN_xrEndSession)(XrSession session);
typedef XrResult (*PFN_xrRequestExitSession)(XrSession session);
typedef XrResult (*PFN_xrWaitFrame)(XrSession session, const XrFrameWaitInfo* frameWaitInfo, XrFrameState* frameState);
typedef XrResult (*PFN_xrBeginFrame)(XrSession session, const XrFrameBeginInfo* frameBeginInfo);
typedef XrResult (*PFN_xrEndFrame)(XrSession session, const XrFrameEndInfo* frameEndInfo);
typedef XrResult (*PFN_xrLocateViews)(XrSession session, const XrViewLocateInfo* viewLocateInfo, XrViewState* viewState, uint32_t viewCapacityInput, uint32_t* viewCountOutput, XrView* views);
typedef XrResult (*PFN_xrStringToPath)(XrInstance instance, const char* pathString, XrPath* path);
typedef XrResult (*PFN_xrPathToString)(XrInstance instance, XrPath path, uint32_t bufferCapacityInput, uint32_t* bufferCountOutput, char* buffer);
typedef XrResult (*PFN_xrCreateActionSet)(XrInstance instance, const XrActionSetCreateInfo* createInfo, XrActionSet* actionSet);
typedef XrResult (*PFN_xrDestroyActionSet)(XrActionSet actionSet);
typedef XrResult (*PFN_xrCreateAction)(XrActionSet actionSet, const XrActionCreateInfo* createInfo, XrAction* action);
typedef XrResult (*PFN_xrDestroyAction)(XrAction action);
typedef XrResult (*PFN_xrSuggestInteractionProfileBindings)(XrInstance instance, const XrInteractionProfileSuggestedBinding* suggestedBindings);
typedef XrResult (*PFN_xrAttachSessionActionSets)(XrSession session, const XrSessionActionSetsAttachInfo* attachInfo);
typedef XrResult (*PFN_xrGetCurrentInteractionProfile)(XrSession session, XrPath topLevelUserPath, XrInteractionProfileState* interactionProfile);
typedef XrResult (*PFN_xrGetActionStateBoolean)(XrSession session, const XrActionStateGetInfo* getInfo, XrActionStateBoolean* state);
typedef XrResult (*PFN_xrGetActionStateFloat)(XrSession session, const XrActionStateGetInfo* getInfo, XrActionStateFloat* state);
typedef XrResult (*PFN_xrGetActionStateVector2f)(XrSession session, const XrActionStateGetInfo* getInfo, XrActionStateVector2f* state);
typedef XrResult (*PFN_xrGetActionStatePose)(XrSession session, const XrActionStateGetInfo* getInfo, XrActionStatePose* state);
typedef XrResult (*PFN_xrSyncActions)(XrSession session, const XrActionsSyncInfo* syncInfo);
typedef XrResult (*PFN_xrEnumerateBoundSourcesForAction)(XrSession session, const XrBoundSourcesForActionEnumerateInfo* enumerateInfo, uint32_t sourceCapacityInput, uint32_t* sourceCountOutput, XrPath* sources);
typedef XrResult (*PFN_xrGetInputSourceLocalizedName)(XrSession session, const XrInputSourceLocalizedNameGetInfo* getInfo, uint32_t bufferCapacityInput, uint32_t* bufferCountOutput, char* buffer);
typedef XrResult (*PFN_xrApplyHapticFeedback)(XrSession session, const XrHapticActionInfo* hapticActionInfo, const XrHapticBaseHeader* hapticFeedback);
typedef XrResult (*PFN_xrStopHapticFeedback)(XrSession session, const XrHapticActionInfo* hapticActionInfo);
XrResult  xrGetInstanceProcAddr(XrInstance instance, const char* name, PFN_xrVoidFunction* function);
XrResult  xrEnumerateApiLayerProperties(uint32_t propertyCapacityInput, uint32_t* propertyCountOutput, XrApiLayerProperties* properties);
XrResult  xrEnumerateInstanceExtensionProperties(const char* layerName, uint32_t propertyCapacityInput, uint32_t* propertyCountOutput, XrExtensionProperties* properties);
XrResult  xrCreateInstance(const XrInstanceCreateInfo* createInfo, XrInstance* instance);
XrResult  xrDestroyInstance(XrInstance instance);
XrResult  xrGetInstanceProperties(XrInstance instance, XrInstanceProperties* instanceProperties);
XrResult  xrPollEvent(XrInstance instance, XrEventDataBuffer* eventData);
XrResult  xrResultToString(XrInstance instance, XrResult value, char buffer[64]);
XrResult  xrStructureTypeToString(XrInstance instance, XrStructureType value, char buffer[64]);
XrResult  xrGetSystem(XrInstance instance, const XrSystemGetInfo* getInfo, XrSystemId* systemId);
XrResult  xrGetSystemProperties(XrInstance instance, XrSystemId systemId, XrSystemProperties* properties);
XrResult  xrEnumerateEnvironmentBlendModes(XrInstance instance, XrSystemId systemId, XrViewConfigurationType viewConfigurationType, uint32_t environmentBlendModeCapacityInput, uint32_t* environmentBlendModeCountOutput, XrEnvironmentBlendMode* environmentBlendModes);
XrResult  xrCreateSession(XrInstance instance, const XrSessionCreateInfo* createInfo, XrSession* session);
XrResult  xrDestroySession(XrSession session);
XrResult  xrEnumerateReferenceSpaces(XrSession session, uint32_t spaceCapacityInput, uint32_t* spaceCountOutput, XrReferenceSpaceType* spaces);
XrResult  xrCreateReferenceSpace(XrSession session, const XrReferenceSpaceCreateInfo* createInfo, XrSpace* space);
XrResult  xrGetReferenceSpaceBoundsRect(XrSession session, XrReferenceSpaceType referenceSpaceType, XrExtent2Df* bounds);
XrResult  xrCreateActionSpace(XrSession session, const XrActionSpaceCreateInfo* createInfo, XrSpace* space);
XrResult  xrLocateSpace(XrSpace space, XrSpace baseSpace, XrTime time, XrSpaceLocation* location);
XrResult  xrDestroySpace(XrSpace space);
XrResult  xrEnumerateViewConfigurations(XrInstance instance, XrSystemId systemId, uint32_t viewConfigurationTypeCapacityInput, uint32_t* viewConfigurationTypeCountOutput, XrViewConfigurationType* viewConfigurationTypes);
XrResult  xrGetViewConfigurationProperties(XrInstance instance, XrSystemId systemId, XrViewConfigurationType viewConfigurationType, XrViewConfigurationProperties* configurationProperties);
XrResult  xrEnumerateViewConfigurationViews(XrInstance instance, XrSystemId systemId, XrViewConfigurationType viewConfigurationType, uint32_t viewCapacityInput, uint32_t* viewCountOutput, XrViewConfigurationView* views);
XrResult  xrEnumerateSwapchainFormats(XrSession session, uint32_t formatCapacityInput, uint32_t* formatCountOutput, int64_t* formats);
XrResult  xrCreateSwapchain(XrSession session, const XrSwapchainCreateInfo* createInfo, XrSwapchain* swapchain);
XrResult  xrDestroySwapchain(XrSwapchain swapchain);
XrResult  xrEnumerateSwapchainImages(XrSwapchain swapchain, uint32_t imageCapacityInput, uint32_t* imageCountOutput, XrSwapchainImageBaseHeader* images);
XrResult  xrAcquireSwapchainImage(XrSwapchain swapchain, const XrSwapchainImageAcquireInfo* acquireInfo, uint32_t* index);
XrResult  xrWaitSwapchainImage(XrSwapchain swapchain, const XrSwapchainImageWaitInfo* waitInfo);
XrResult  xrReleaseSwapchainImage(XrSwapchain swapchain, const XrSwapchainImageReleaseInfo* releaseInfo);
XrResult  xrBeginSession(XrSession session, const XrSessionBeginInfo* beginInfo);
XrResult  xrEndSession(XrSession session);
XrResult  xrRequestExitSession(XrSession session);
XrResult  xrWaitFrame(XrSession session, const XrFrameWaitInfo* frameWaitInfo, XrFrameState* frameState);
XrResult  xrBeginFrame(XrSession session, const XrFrameBeginInfo* frameBeginInfo);
XrResult  xrEndFrame(XrSession session, const XrFrameEndInfo* frameEndInfo);
XrResult  xrLocateViews(XrSession session, const XrViewLocateInfo* viewLocateInfo, XrViewState* viewState, uint32_t viewCapacityInput, uint32_t* viewCountOutput, XrView* views);
XrResult  xrStringToPath(XrInstance instance, const char* pathString, XrPath* path);
XrResult  xrPathToString(XrInstance instance, XrPath path, uint32_t bufferCapacityInput, uint32_t* bufferCountOutput, char* buffer);
XrResult  xrCreateActionSet(XrInstance instance, const XrActionSetCreateInfo* createInfo, XrActionSet* actionSet);
XrResult  xrDestroyActionSet(XrActionSet actionSet);
XrResult  xrCreateAction(XrActionSet actionSet, const XrActionCreateInfo* createInfo, XrAction* action);
XrResult  xrDestroyAction(XrAction action);
XrResult  xrSuggestInteractionProfileBindings(XrInstance instance, const XrInteractionProfileSuggestedBinding* suggestedBindings);
XrResult  xrAttachSessionActionSets(XrSession session, const XrSessionActionSetsAttachInfo* attachInfo);
XrResult  xrGetCurrentInteractionProfile(XrSession session, XrPath topLevelUserPath, XrInteractionProfileState* interactionProfile);
XrResult  xrGetActionStateBoolean(XrSession session, const XrActionStateGetInfo* getInfo, XrActionStateBoolean* state);
XrResult  xrGetActionStateFloat(XrSession session, const XrActionStateGetInfo* getInfo, XrActionStateFloat* state);
XrResult  xrGetActionStateVector2f(XrSession session, const XrActionStateGetInfo* getInfo, XrActionStateVector2f* state);
XrResult  xrGetActionStatePose(XrSession session, const XrActionStateGetInfo* getInfo, XrActionStatePose* state);
XrResult  xrSyncActions(XrSession session, const XrActionsSyncInfo* syncInfo);
XrResult  xrEnumerateBoundSourcesForAction(XrSession session, const XrBoundSourcesForActionEnumerateInfo* enumerateInfo, uint32_t sourceCapacityInput, uint32_t* sourceCountOutput, XrPath* sources);
XrResult  xrGetInputSourceLocalizedName(XrSession session, const XrInputSourceLocalizedNameGetInfo* getInfo, uint32_t bufferCapacityInput, uint32_t* bufferCountOutput, char* buffer);
XrResult  xrApplyHapticFeedback(XrSession session, const XrHapticActionInfo* hapticActionInfo, const XrHapticBaseHeader* hapticFeedback);
XrResult  xrStopHapticFeedback(XrSession session, const XrHapticActionInfo* hapticActionInfo);
#line 1852 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrColor3f { float r; float g; float b; } XrColor3f; typedef struct XrExtent3Df { float width; float height; float depth; } XrExtent3Df; typedef struct XrSpheref { XrPosef center; float radius; } XrSpheref; typedef struct XrBoxf { XrPosef center; XrExtent3Df extents; } XrBoxf; typedef struct XrFrustumf { XrPosef pose; XrFovf fov; float nearZ; float farZ; } XrFrustumf; typedef struct XrUuid { uint8_t data[16]; } XrUuid; typedef struct XrSpacesLocateInfo { XrStructureType type; const void* next; XrSpace baseSpace; XrTime time; uint32_t spaceCount; const XrSpace* spaces; } XrSpacesLocateInfo; typedef struct XrSpaceLocationData { XrSpaceLocationFlags locationFlags; XrPosef pose; } XrSpaceLocationData; typedef struct XrSpaceLocations { XrStructureType type; void* next; uint32_t locationCount; XrSpaceLocationData* locations; } XrSpaceLocations; typedef struct XrSpaceVelocityData { XrSpaceVelocityFlags velocityFlags; XrVector3f linearVelocity; XrVector3f angularVelocity; } XrSpaceVelocityData; typedef struct XrSpaceVelocities { XrStructureType type; void* next; uint32_t velocityCount; XrSpaceVelocityData* velocities; } XrSpaceVelocities; typedef XrResult (*PFN_xrLocateSpaces)(XrSession session, const XrSpacesLocateInfo* locateInfo, XrSpaceLocations* spaceLocations);
XrResult  xrLocateSpaces(XrSession session, const XrSpacesLocateInfo* locateInfo, XrSpaceLocations* spaceLocations);
#line 1936 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrCompositionLayerCubeKHR { XrStructureType type; const void* next; XrCompositionLayerFlags layerFlags; XrSpace space; XrEyeVisibility eyeVisibility; XrSwapchain swapchain; uint32_t imageArrayIndex; XrQuaternionf orientation; } XrCompositionLayerCubeKHR; typedef struct XrCompositionLayerDepthInfoKHR { XrStructureType type; const void* next; XrSwapchainSubImage subImage; float minDepth; float maxDepth; float nearZ; float farZ; } XrCompositionLayerDepthInfoKHR; typedef struct XrCompositionLayerCylinderKHR { XrStructureType type; const void* next; XrCompositionLayerFlags layerFlags; XrSpace space; XrEyeVisibility eyeVisibility; XrSwapchainSubImage subImage; XrPosef pose; float radius; float centralAngle; float aspectRatio; } XrCompositionLayerCylinderKHR; typedef struct XrCompositionLayerEquirectKHR { XrStructureType type; const void* next; XrCompositionLayerFlags layerFlags; XrSpace space; XrEyeVisibility eyeVisibility; XrSwapchainSubImage subImage; XrPosef pose; float radius; XrVector2f scale; XrVector2f bias; } XrCompositionLayerEquirectKHR; typedef enum XrVisibilityMaskTypeKHR { XR_VISIBILITY_MASK_TYPE_HIDDEN_TRIANGLE_MESH_KHR = 1, XR_VISIBILITY_MASK_TYPE_VISIBLE_TRIANGLE_MESH_KHR = 2, XR_VISIBILITY_MASK_TYPE_LINE_LOOP_KHR = 3, XR_VISIBILITY_MASK_TYPE_MAX_ENUM_KHR = 0x7FFFFFFF } XrVisibilityMaskTypeKHR; typedef struct XrVisibilityMaskKHR { XrStructureType type; void* next; uint32_t vertexCapacityInput; uint32_t vertexCountOutput; XrVector2f* vertices; uint32_t indexCapacityInput; uint32_t indexCountOutput; uint32_t* indices; } XrVisibilityMaskKHR; typedef struct XrEventDataVisibilityMaskChangedKHR { XrStructureType type; const void* next; XrSession session; XrViewConfigurationType viewConfigurationType; uint32_t viewIndex; } XrEventDataVisibilityMaskChangedKHR; typedef XrResult (*PFN_xrGetVisibilityMaskKHR)(XrSession session, XrViewConfigurationType viewConfigurationType, uint32_t viewIndex, XrVisibilityMaskTypeKHR visibilityMaskType, XrVisibilityMaskKHR* visibilityMask);
XrResult  xrGetVisibilityMaskKHR(XrSession session, XrViewConfigurationType viewConfigurationType, uint32_t viewIndex, XrVisibilityMaskTypeKHR visibilityMaskType, XrVisibilityMaskKHR* visibilityMask);
#line 2051 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 2052 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrCompositionLayerColorScaleBiasKHR { XrStructureType type; const void* next; XrColor4f colorScale; XrColor4f colorBias; } XrCompositionLayerColorScaleBiasKHR; typedef struct XrLoaderInitInfoBaseHeaderKHR { XrStructureType type; const void* next; } XrLoaderInitInfoBaseHeaderKHR; typedef XrResult (*PFN_xrInitializeLoaderKHR)(const XrLoaderInitInfoBaseHeaderKHR* loaderInitInfo);
XrResult  xrInitializeLoaderKHR(const XrLoaderInitInfoBaseHeaderKHR* loaderInitInfo);
#line 2084 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 2085 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrCompositionLayerEquirect2KHR { XrStructureType type; const void* next; XrCompositionLayerFlags layerFlags; XrSpace space; XrEyeVisibility eyeVisibility; XrSwapchainSubImage subImage; XrPosef pose; float radius; float centralHorizontalAngle; float upperVerticalAngle; float lowerVerticalAngle; } XrCompositionLayerEquirect2KHR; typedef struct XrBindingModificationBaseHeaderKHR { XrStructureType type; const void* next; } XrBindingModificationBaseHeaderKHR; typedef struct XrBindingModificationsKHR { XrStructureType type; const void* next; uint32_t bindingModificationCount; const XrBindingModificationBaseHeaderKHR* const* bindingModifications; } XrBindingModificationsKHR; typedef XrResult (*PFN_xrStructureTypeToString2KHR)(XrInstance instance, XrStructureType value, char buffer[256]);
XrResult  xrStructureTypeToString2KHR(XrInstance instance, XrStructureType value, char buffer[256]);
#line 2140 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 2141 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef XrSpacesLocateInfo XrSpacesLocateInfoKHR; typedef XrSpaceLocationData XrSpaceLocationDataKHR; typedef XrSpaceLocations XrSpaceLocationsKHR; typedef XrSpaceVelocityData XrSpaceVelocityDataKHR; typedef XrSpaceVelocities XrSpaceVelocitiesKHR; typedef XrResult (*PFN_xrLocateSpacesKHR)(XrSession session, const XrSpacesLocateInfo* locateInfo, XrSpaceLocations* spaceLocations);
XrResult  xrLocateSpacesKHR(XrSession session, const XrSpacesLocateInfo* locateInfo, XrSpaceLocations* spaceLocations);
#line 2172 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 2173 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef XrColor3f XrColor3fKHR; typedef XrExtent3Df XrExtent3DfKHR; typedef XrSpheref XrSpherefKHR; typedef XrBoxf XrBoxfKHR; typedef XrFrustumf XrFrustumfKHR; typedef enum XrPerfSettingsDomainEXT { XR_PERF_SETTINGS_DOMAIN_CPU_EXT = 1, XR_PERF_SETTINGS_DOMAIN_GPU_EXT = 2, XR_PERF_SETTINGS_DOMAIN_MAX_ENUM_EXT = 0x7FFFFFFF } XrPerfSettingsDomainEXT; typedef enum XrPerfSettingsSubDomainEXT { XR_PERF_SETTINGS_SUB_DOMAIN_COMPOSITING_EXT = 1, XR_PERF_SETTINGS_SUB_DOMAIN_RENDERING_EXT = 2, XR_PERF_SETTINGS_SUB_DOMAIN_THERMAL_EXT = 3, XR_PERF_SETTINGS_SUB_DOMAIN_MAX_ENUM_EXT = 0x7FFFFFFF } XrPerfSettingsSubDomainEXT; typedef enum XrPerfSettingsLevelEXT { XR_PERF_SETTINGS_LEVEL_POWER_SAVINGS_EXT = 0, XR_PERF_SETTINGS_LEVEL_SUSTAINED_LOW_EXT = 25, XR_PERF_SETTINGS_LEVEL_SUSTAINED_HIGH_EXT = 50, XR_PERF_SETTINGS_LEVEL_BOOST_EXT = 75, XR_PERF_SETTINGS_LEVEL_MAX_ENUM_EXT = 0x7FFFFFFF } XrPerfSettingsLevelEXT; typedef enum XrPerfSettingsNotificationLevelEXT { XR_PERF_SETTINGS_NOTIF_LEVEL_NORMAL_EXT = 0, XR_PERF_SETTINGS_NOTIF_LEVEL_WARNING_EXT = 25, XR_PERF_SETTINGS_NOTIF_LEVEL_IMPAIRED_EXT = 75, XR_PERF_SETTINGS_NOTIFICATION_LEVEL_MAX_ENUM_EXT = 0x7FFFFFFF } XrPerfSettingsNotificationLevelEXT; typedef struct XrEventDataPerfSettingsEXT { XrStructureType type; const void* next; XrPerfSettingsDomainEXT domain; XrPerfSettingsSubDomainEXT subDomain; XrPerfSettingsNotificationLevelEXT fromLevel; XrPerfSettingsNotificationLevelEXT toLevel; } XrEventDataPerfSettingsEXT; typedef XrResult (*PFN_xrPerfSettingsSetPerformanceLevelEXT)(XrSession session, XrPerfSettingsDomainEXT domain, XrPerfSettingsLevelEXT level);
XrResult  xrPerfSettingsSetPerformanceLevelEXT(XrSession session, XrPerfSettingsDomainEXT domain, XrPerfSettingsLevelEXT level);
#line 2241 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 2242 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef XrResult (*PFN_xrThermalGetTemperatureTrendEXT)(XrSession session, XrPerfSettingsDomainEXT domain, XrPerfSettingsNotificationLevelEXT* notificationLevel, float* tempHeadroom, float* tempSlope);
XrResult  xrThermalGetTemperatureTrendEXT(XrSession session, XrPerfSettingsDomainEXT domain, XrPerfSettingsNotificationLevelEXT* notificationLevel, float* tempHeadroom, float* tempSlope);
#line 2259 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 2260 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrDebugUtilsMessengerEXT_T* XrDebugUtilsMessengerEXT; typedef XrFlags64 XrDebugUtilsMessageSeverityFlagsEXT; static const XrDebugUtilsMessageSeverityFlagsEXT XR_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT = 0x00000001; static const XrDebugUtilsMessageSeverityFlagsEXT XR_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT = 0x00000010; static const XrDebugUtilsMessageSeverityFlagsEXT XR_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT = 0x00000100; static const XrDebugUtilsMessageSeverityFlagsEXT XR_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT = 0x00001000; typedef XrFlags64 XrDebugUtilsMessageTypeFlagsEXT; static const XrDebugUtilsMessageTypeFlagsEXT XR_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT = 0x00000001; static const XrDebugUtilsMessageTypeFlagsEXT XR_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT = 0x00000002; static const XrDebugUtilsMessageTypeFlagsEXT XR_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT = 0x00000004; static const XrDebugUtilsMessageTypeFlagsEXT XR_DEBUG_UTILS_MESSAGE_TYPE_CONFORMANCE_BIT_EXT = 0x00000008; typedef struct XrDebugUtilsObjectNameInfoEXT { XrStructureType type; const void* next; XrObjectType objectType; uint64_t objectHandle; const char* objectName; } XrDebugUtilsObjectNameInfoEXT; typedef struct XrDebugUtilsLabelEXT { XrStructureType type; const void* next; const char* labelName; } XrDebugUtilsLabelEXT; typedef struct XrDebugUtilsMessengerCallbackDataEXT { XrStructureType type; const void* next; const char* messageId; const char* functionName; const char* message; uint32_t objectCount; XrDebugUtilsObjectNameInfoEXT* objects; uint32_t sessionLabelCount; XrDebugUtilsLabelEXT* sessionLabels; } XrDebugUtilsMessengerCallbackDataEXT; typedef XrBool32 (*PFN_xrDebugUtilsMessengerCallbackEXT)(XrDebugUtilsMessageSeverityFlagsEXT messageSeverity, XrDebugUtilsMessageTypeFlagsEXT messageTypes, const XrDebugUtilsMessengerCallbackDataEXT* callbackData, void* userData);
typedef struct XrDebugUtilsMessengerCreateInfoEXT { XrStructureType type; const void* next; XrDebugUtilsMessageSeverityFlagsEXT messageSeverities; XrDebugUtilsMessageTypeFlagsEXT messageTypes; PFN_xrDebugUtilsMessengerCallbackEXT userCallback; void* userData; } XrDebugUtilsMessengerCreateInfoEXT; typedef XrResult (*PFN_xrSetDebugUtilsObjectNameEXT)(XrInstance instance, const XrDebugUtilsObjectNameInfoEXT* nameInfo);
typedef XrResult (*PFN_xrCreateDebugUtilsMessengerEXT)(XrInstance instance, const XrDebugUtilsMessengerCreateInfoEXT* createInfo, XrDebugUtilsMessengerEXT* messenger);
typedef XrResult (*PFN_xrDestroyDebugUtilsMessengerEXT)(XrDebugUtilsMessengerEXT messenger);
typedef XrResult (*PFN_xrSubmitDebugUtilsMessageEXT)(XrInstance instance, XrDebugUtilsMessageSeverityFlagsEXT messageSeverity, XrDebugUtilsMessageTypeFlagsEXT messageTypes, const XrDebugUtilsMessengerCallbackDataEXT* callbackData);
typedef XrResult (*PFN_xrSessionBeginDebugUtilsLabelRegionEXT)(XrSession session, const XrDebugUtilsLabelEXT* labelInfo);
typedef XrResult (*PFN_xrSessionEndDebugUtilsLabelRegionEXT)(XrSession session);
typedef XrResult (*PFN_xrSessionInsertDebugUtilsLabelEXT)(XrSession session, const XrDebugUtilsLabelEXT* labelInfo);
XrResult  xrSetDebugUtilsObjectNameEXT(XrInstance instance, const XrDebugUtilsObjectNameInfoEXT* nameInfo);
XrResult  xrCreateDebugUtilsMessengerEXT(XrInstance instance, const XrDebugUtilsMessengerCreateInfoEXT* createInfo, XrDebugUtilsMessengerEXT* messenger);
XrResult  xrDestroyDebugUtilsMessengerEXT(XrDebugUtilsMessengerEXT messenger);
XrResult  xrSubmitDebugUtilsMessageEXT(XrInstance instance, XrDebugUtilsMessageSeverityFlagsEXT messageSeverity, XrDebugUtilsMessageTypeFlagsEXT messageTypes, const XrDebugUtilsMessengerCallbackDataEXT* callbackData);
XrResult  xrSessionBeginDebugUtilsLabelRegionEXT(XrSession session, const XrDebugUtilsLabelEXT* labelInfo);
XrResult  xrSessionEndDebugUtilsLabelRegionEXT(XrSession session);
XrResult  xrSessionInsertDebugUtilsLabelEXT(XrSession session, const XrDebugUtilsLabelEXT* labelInfo);
#line 2365 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 2366 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrSystemEyeGazeInteractionPropertiesEXT { XrStructureType type; void* next; XrBool32 supportsEyeGazeInteraction; } XrSystemEyeGazeInteractionPropertiesEXT; typedef struct XrEyeGazeSampleTimeEXT { XrStructureType type; void* next; XrTime time; } XrEyeGazeSampleTimeEXT; typedef XrFlags64 XrOverlaySessionCreateFlagsEXTX; typedef XrFlags64 XrOverlayMainSessionFlagsEXTX; static const XrOverlayMainSessionFlagsEXTX XR_OVERLAY_MAIN_SESSION_ENABLED_COMPOSITION_LAYER_INFO_DEPTH_BIT_EXTX = 0x00000001; typedef struct XrSessionCreateInfoOverlayEXTX { XrStructureType type; const void* next; XrOverlaySessionCreateFlagsEXTX createFlags; uint32_t sessionLayersPlacement; } XrSessionCreateInfoOverlayEXTX; typedef struct XrEventDataMainSessionVisibilityChangedEXTX { XrStructureType type; const void* next; XrBool32 visible; XrOverlayMainSessionFlagsEXTX flags; } XrEventDataMainSessionVisibilityChangedEXTX; typedef struct XrSpatialAnchorMSFT_T* XrSpatialAnchorMSFT; typedef struct XrSpatialAnchorCreateInfoMSFT { XrStructureType type; const void* next; XrSpace space; XrPosef pose; XrTime time; } XrSpatialAnchorCreateInfoMSFT; typedef struct XrSpatialAnchorSpaceCreateInfoMSFT { XrStructureType type; const void* next; XrSpatialAnchorMSFT anchor; XrPosef poseInAnchorSpace; } XrSpatialAnchorSpaceCreateInfoMSFT; typedef XrResult (*PFN_xrCreateSpatialAnchorMSFT)(XrSession session, const XrSpatialAnchorCreateInfoMSFT* createInfo, XrSpatialAnchorMSFT* anchor);
typedef XrResult (*PFN_xrCreateSpatialAnchorSpaceMSFT)(XrSession session, const XrSpatialAnchorSpaceCreateInfoMSFT* createInfo, XrSpace* space);
typedef XrResult (*PFN_xrDestroySpatialAnchorMSFT)(XrSpatialAnchorMSFT anchor);
XrResult  xrCreateSpatialAnchorMSFT(XrSession session, const XrSpatialAnchorCreateInfoMSFT* createInfo, XrSpatialAnchorMSFT* anchor);
XrResult  xrCreateSpatialAnchorSpaceMSFT(XrSession session, const XrSpatialAnchorSpaceCreateInfoMSFT* createInfo, XrSpace* space);
XrResult  xrDestroySpatialAnchorMSFT(XrSpatialAnchorMSFT anchor);
#line 2469 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 2470 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef XrFlags64 XrCompositionLayerImageLayoutFlagsFB; static const XrCompositionLayerImageLayoutFlagsFB XR_COMPOSITION_LAYER_IMAGE_LAYOUT_VERTICAL_FLIP_BIT_FB = 0x00000001; typedef struct XrCompositionLayerImageLayoutFB { XrStructureType type; void* next; XrCompositionLayerImageLayoutFlagsFB flags; } XrCompositionLayerImageLayoutFB; typedef enum XrBlendFactorFB { XR_BLEND_FACTOR_ZERO_FB = 0, XR_BLEND_FACTOR_ONE_FB = 1, XR_BLEND_FACTOR_SRC_ALPHA_FB = 2, XR_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA_FB = 3, XR_BLEND_FACTOR_DST_ALPHA_FB = 4, XR_BLEND_FACTOR_ONE_MINUS_DST_ALPHA_FB = 5, XR_BLEND_FACTOR_MAX_ENUM_FB = 0x7FFFFFFF } XrBlendFactorFB; typedef struct XrCompositionLayerAlphaBlendFB { XrStructureType type; void* next; XrBlendFactorFB srcFactorColor; XrBlendFactorFB dstFactorColor; XrBlendFactorFB srcFactorAlpha; XrBlendFactorFB dstFactorAlpha; } XrCompositionLayerAlphaBlendFB; typedef struct XrViewConfigurationDepthRangeEXT { XrStructureType type; void* next; float recommendedNearZ; float minNearZ; float recommendedFarZ; float maxFarZ; } XrViewConfigurationDepthRangeEXT; typedef XrResult (*PFN_xrSetInputDeviceActiveEXT)(XrSession session, XrPath interactionProfile, XrPath topLevelPath, XrBool32 isActive);
typedef XrResult (*PFN_xrSetInputDeviceStateBoolEXT)(XrSession session, XrPath topLevelPath, XrPath inputSourcePath, XrBool32 state);
typedef XrResult (*PFN_xrSetInputDeviceStateFloatEXT)(XrSession session, XrPath topLevelPath, XrPath inputSourcePath, float state);
typedef XrResult (*PFN_xrSetInputDeviceStateVector2fEXT)(XrSession session, XrPath topLevelPath, XrPath inputSourcePath, XrVector2f state);
typedef XrResult (*PFN_xrSetInputDeviceLocationEXT)(XrSession session, XrPath topLevelPath, XrPath inputSourcePath, XrSpace space, XrPosef pose);
XrResult  xrSetInputDeviceActiveEXT(XrSession session, XrPath interactionProfile, XrPath topLevelPath, XrBool32 isActive);
XrResult  xrSetInputDeviceStateBoolEXT(XrSession session, XrPath topLevelPath, XrPath inputSourcePath, XrBool32 state);
XrResult  xrSetInputDeviceStateFloatEXT(XrSession session, XrPath topLevelPath, XrPath inputSourcePath, float state);
XrResult  xrSetInputDeviceStateVector2fEXT(XrSession session, XrPath topLevelPath, XrPath inputSourcePath, XrVector2f state);
XrResult  xrSetInputDeviceLocationEXT(XrSession session, XrPath topLevelPath, XrPath inputSourcePath, XrSpace space, XrPosef pose);
#line 2587 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 2588 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrSpatialGraphNodeBindingMSFT_T* XrSpatialGraphNodeBindingMSFT; typedef enum XrSpatialGraphNodeTypeMSFT { XR_SPATIAL_GRAPH_NODE_TYPE_STATIC_MSFT = 1, XR_SPATIAL_GRAPH_NODE_TYPE_DYNAMIC_MSFT = 2, XR_SPATIAL_GRAPH_NODE_TYPE_MAX_ENUM_MSFT = 0x7FFFFFFF } XrSpatialGraphNodeTypeMSFT; typedef struct XrSpatialGraphNodeSpaceCreateInfoMSFT { XrStructureType type; const void* next; XrSpatialGraphNodeTypeMSFT nodeType; uint8_t nodeId[16]; XrPosef pose; } XrSpatialGraphNodeSpaceCreateInfoMSFT; typedef struct XrSpatialGraphStaticNodeBindingCreateInfoMSFT { XrStructureType type; const void* next; XrSpace space; XrPosef poseInSpace; XrTime time; } XrSpatialGraphStaticNodeBindingCreateInfoMSFT; typedef struct XrSpatialGraphNodeBindingPropertiesGetInfoMSFT { XrStructureType type; const void* next; } XrSpatialGraphNodeBindingPropertiesGetInfoMSFT; typedef struct XrSpatialGraphNodeBindingPropertiesMSFT { XrStructureType type; void* next; uint8_t nodeId[16]; XrPosef poseInNodeSpace; } XrSpatialGraphNodeBindingPropertiesMSFT; typedef XrResult (*PFN_xrCreateSpatialGraphNodeSpaceMSFT)(XrSession session, const XrSpatialGraphNodeSpaceCreateInfoMSFT* createInfo, XrSpace* space);
typedef XrResult (*PFN_xrTryCreateSpatialGraphStaticNodeBindingMSFT)(XrSession session, const XrSpatialGraphStaticNodeBindingCreateInfoMSFT* createInfo, XrSpatialGraphNodeBindingMSFT* nodeBinding);
typedef XrResult (*PFN_xrDestroySpatialGraphNodeBindingMSFT)(XrSpatialGraphNodeBindingMSFT nodeBinding);
typedef XrResult (*PFN_xrGetSpatialGraphNodeBindingPropertiesMSFT)(XrSpatialGraphNodeBindingMSFT nodeBinding, const XrSpatialGraphNodeBindingPropertiesGetInfoMSFT* getInfo, XrSpatialGraphNodeBindingPropertiesMSFT* properties);
XrResult  xrCreateSpatialGraphNodeSpaceMSFT(XrSession session, const XrSpatialGraphNodeSpaceCreateInfoMSFT* createInfo, XrSpace* space);
XrResult  xrTryCreateSpatialGraphStaticNodeBindingMSFT(XrSession session, const XrSpatialGraphStaticNodeBindingCreateInfoMSFT* createInfo, XrSpatialGraphNodeBindingMSFT* nodeBinding);
XrResult  xrDestroySpatialGraphNodeBindingMSFT(XrSpatialGraphNodeBindingMSFT nodeBinding);
XrResult  xrGetSpatialGraphNodeBindingPropertiesMSFT(XrSpatialGraphNodeBindingMSFT nodeBinding, const XrSpatialGraphNodeBindingPropertiesGetInfoMSFT* getInfo, XrSpatialGraphNodeBindingPropertiesMSFT* properties);
#line 2655 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 2656 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrHandTrackerEXT_T* XrHandTrackerEXT; typedef enum XrHandEXT { XR_HAND_LEFT_EXT = 1, XR_HAND_RIGHT_EXT = 2, XR_HAND_MAX_ENUM_EXT = 0x7FFFFFFF } XrHandEXT; typedef enum XrHandJointEXT { XR_HAND_JOINT_PALM_EXT = 0, XR_HAND_JOINT_WRIST_EXT = 1, XR_HAND_JOINT_THUMB_METACARPAL_EXT = 2, XR_HAND_JOINT_THUMB_PROXIMAL_EXT = 3, XR_HAND_JOINT_THUMB_DISTAL_EXT = 4, XR_HAND_JOINT_THUMB_TIP_EXT = 5, XR_HAND_JOINT_INDEX_METACARPAL_EXT = 6, XR_HAND_JOINT_INDEX_PROXIMAL_EXT = 7, XR_HAND_JOINT_INDEX_INTERMEDIATE_EXT = 8, XR_HAND_JOINT_INDEX_DISTAL_EXT = 9, XR_HAND_JOINT_INDEX_TIP_EXT = 10, XR_HAND_JOINT_MIDDLE_METACARPAL_EXT = 11, XR_HAND_JOINT_MIDDLE_PROXIMAL_EXT = 12, XR_HAND_JOINT_MIDDLE_INTERMEDIATE_EXT = 13, XR_HAND_JOINT_MIDDLE_DISTAL_EXT = 14, XR_HAND_JOINT_MIDDLE_TIP_EXT = 15, XR_HAND_JOINT_RING_METACARPAL_EXT = 16, XR_HAND_JOINT_RING_PROXIMAL_EXT = 17, XR_HAND_JOINT_RING_INTERMEDIATE_EXT = 18, XR_HAND_JOINT_RING_DISTAL_EXT = 19, XR_HAND_JOINT_RING_TIP_EXT = 20, XR_HAND_JOINT_LITTLE_METACARPAL_EXT = 21, XR_HAND_JOINT_LITTLE_PROXIMAL_EXT = 22, XR_HAND_JOINT_LITTLE_INTERMEDIATE_EXT = 23, XR_HAND_JOINT_LITTLE_DISTAL_EXT = 24, XR_HAND_JOINT_LITTLE_TIP_EXT = 25, XR_HAND_JOINT_MAX_ENUM_EXT = 0x7FFFFFFF } XrHandJointEXT; typedef enum XrHandJointSetEXT { XR_HAND_JOINT_SET_DEFAULT_EXT = 0, XR_HAND_JOINT_SET_HAND_WITH_FOREARM_ULTRALEAP = 1000149000, XR_HAND_JOINT_SET_MAX_ENUM_EXT = 0x7FFFFFFF } XrHandJointSetEXT; typedef struct XrSystemHandTrackingPropertiesEXT { XrStructureType type; void* next; XrBool32 supportsHandTracking; } XrSystemHandTrackingPropertiesEXT; typedef struct XrHandTrackerCreateInfoEXT { XrStructureType type; const void* next; XrHandEXT hand; XrHandJointSetEXT handJointSet; } XrHandTrackerCreateInfoEXT; typedef struct XrHandJointsLocateInfoEXT { XrStructureType type; const void* next; XrSpace baseSpace; XrTime time; } XrHandJointsLocateInfoEXT; typedef struct XrHandJointLocationEXT { XrSpaceLocationFlags locationFlags; XrPosef pose; float radius; } XrHandJointLocationEXT; typedef struct XrHandJointVelocityEXT { XrSpaceVelocityFlags velocityFlags; XrVector3f linearVelocity; XrVector3f angularVelocity; } XrHandJointVelocityEXT; typedef struct XrHandJointLocationsEXT { XrStructureType type; void* next; XrBool32 isActive; uint32_t jointCount; XrHandJointLocationEXT* jointLocations; } XrHandJointLocationsEXT; typedef struct XrHandJointVelocitiesEXT { XrStructureType type; void* next; uint32_t jointCount; XrHandJointVelocityEXT* jointVelocities; } XrHandJointVelocitiesEXT; typedef XrResult (*PFN_xrCreateHandTrackerEXT)(XrSession session, const XrHandTrackerCreateInfoEXT* createInfo, XrHandTrackerEXT* handTracker);
typedef XrResult (*PFN_xrDestroyHandTrackerEXT)(XrHandTrackerEXT handTracker);
typedef XrResult (*PFN_xrLocateHandJointsEXT)(XrHandTrackerEXT handTracker, const XrHandJointsLocateInfoEXT* locateInfo, XrHandJointLocationsEXT* locations);
XrResult  xrCreateHandTrackerEXT(XrSession session, const XrHandTrackerCreateInfoEXT* createInfo, XrHandTrackerEXT* handTracker);
XrResult  xrDestroyHandTrackerEXT(XrHandTrackerEXT handTracker);
XrResult  xrLocateHandJointsEXT(XrHandTrackerEXT handTracker, const XrHandJointsLocateInfoEXT* locateInfo, XrHandJointLocationsEXT* locations);
#line 2782 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 2783 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef enum XrHandPoseTypeMSFT { XR_HAND_POSE_TYPE_TRACKED_MSFT = 0, XR_HAND_POSE_TYPE_REFERENCE_OPEN_PALM_MSFT = 1, XR_HAND_POSE_TYPE_MAX_ENUM_MSFT = 0x7FFFFFFF } XrHandPoseTypeMSFT; typedef struct XrSystemHandTrackingMeshPropertiesMSFT { XrStructureType type; void* next; XrBool32 supportsHandTrackingMesh; uint32_t maxHandMeshIndexCount; uint32_t maxHandMeshVertexCount; } XrSystemHandTrackingMeshPropertiesMSFT; typedef struct XrHandMeshSpaceCreateInfoMSFT { XrStructureType type; const void* next; XrHandPoseTypeMSFT handPoseType; XrPosef poseInHandMeshSpace; } XrHandMeshSpaceCreateInfoMSFT; typedef struct XrHandMeshUpdateInfoMSFT { XrStructureType type; const void* next; XrTime time; XrHandPoseTypeMSFT handPoseType; } XrHandMeshUpdateInfoMSFT; typedef struct XrHandMeshIndexBufferMSFT { uint32_t indexBufferKey; uint32_t indexCapacityInput; uint32_t indexCountOutput; uint32_t* indices; } XrHandMeshIndexBufferMSFT; typedef struct XrHandMeshVertexMSFT { XrVector3f position; XrVector3f normal; } XrHandMeshVertexMSFT; typedef struct XrHandMeshVertexBufferMSFT { XrTime vertexUpdateTime; uint32_t vertexCapacityInput; uint32_t vertexCountOutput; XrHandMeshVertexMSFT* vertices; } XrHandMeshVertexBufferMSFT; typedef struct XrHandMeshMSFT { XrStructureType type; void* next; XrBool32 isActive; XrBool32 indexBufferChanged; XrBool32 vertexBufferChanged; XrHandMeshIndexBufferMSFT indexBuffer; XrHandMeshVertexBufferMSFT vertexBuffer; } XrHandMeshMSFT; typedef struct XrHandPoseTypeInfoMSFT { XrStructureType type; const void* next; XrHandPoseTypeMSFT handPoseType; } XrHandPoseTypeInfoMSFT; typedef XrResult (*PFN_xrCreateHandMeshSpaceMSFT)(XrHandTrackerEXT handTracker, const XrHandMeshSpaceCreateInfoMSFT* createInfo, XrSpace* space);
typedef XrResult (*PFN_xrUpdateHandMeshMSFT)(XrHandTrackerEXT handTracker, const XrHandMeshUpdateInfoMSFT* updateInfo, XrHandMeshMSFT* handMesh);
XrResult  xrCreateHandMeshSpaceMSFT(XrHandTrackerEXT handTracker, const XrHandMeshSpaceCreateInfoMSFT* createInfo, XrSpace* space);
XrResult  xrUpdateHandMeshMSFT(XrHandTrackerEXT handTracker, const XrHandMeshUpdateInfoMSFT* updateInfo, XrHandMeshMSFT* handMesh);
#line 2869 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 2870 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrSecondaryViewConfigurationSessionBeginInfoMSFT { XrStructureType type; const void* next; uint32_t viewConfigurationCount; const XrViewConfigurationType* enabledViewConfigurationTypes; } XrSecondaryViewConfigurationSessionBeginInfoMSFT; typedef struct XrSecondaryViewConfigurationStateMSFT { XrStructureType type; void* next; XrViewConfigurationType viewConfigurationType; XrBool32 active; } XrSecondaryViewConfigurationStateMSFT; typedef struct XrSecondaryViewConfigurationFrameStateMSFT { XrStructureType type; void* next; uint32_t viewConfigurationCount; XrSecondaryViewConfigurationStateMSFT* viewConfigurationStates; } XrSecondaryViewConfigurationFrameStateMSFT; typedef struct XrSecondaryViewConfigurationLayerInfoMSFT { XrStructureType type; const void* next; XrViewConfigurationType viewConfigurationType; XrEnvironmentBlendMode environmentBlendMode; uint32_t layerCount; const XrCompositionLayerBaseHeader* const* layers; } XrSecondaryViewConfigurationLayerInfoMSFT; typedef struct XrSecondaryViewConfigurationFrameEndInfoMSFT { XrStructureType type; const void* next; uint32_t viewConfigurationCount; const XrSecondaryViewConfigurationLayerInfoMSFT* viewConfigurationLayersInfo; } XrSecondaryViewConfigurationFrameEndInfoMSFT; typedef struct XrSecondaryViewConfigurationSwapchainCreateInfoMSFT { XrStructureType type; const void* next; XrViewConfigurationType viewConfigurationType; } XrSecondaryViewConfigurationSwapchainCreateInfoMSFT; typedef uint64_t XrControllerModelKeyMSFT; typedef struct XrControllerModelKeyStateMSFT { XrStructureType type; void* next; XrControllerModelKeyMSFT modelKey; } XrControllerModelKeyStateMSFT; typedef struct XrControllerModelNodePropertiesMSFT { XrStructureType type; void* next; char parentNodeName[64]; char nodeName[64]; } XrControllerModelNodePropertiesMSFT; typedef struct XrControllerModelPropertiesMSFT { XrStructureType type; void* next; uint32_t nodeCapacityInput; uint32_t nodeCountOutput; XrControllerModelNodePropertiesMSFT* nodeProperties; } XrControllerModelPropertiesMSFT; typedef struct XrControllerModelNodeStateMSFT { XrStructureType type; void* next; XrPosef nodePose; } XrControllerModelNodeStateMSFT; typedef struct XrControllerModelStateMSFT { XrStructureType type; void* next; uint32_t nodeCapacityInput; uint32_t nodeCountOutput; XrControllerModelNodeStateMSFT* nodeStates; } XrControllerModelStateMSFT; typedef XrResult (*PFN_xrGetControllerModelKeyMSFT)(XrSession session, XrPath topLevelUserPath, XrControllerModelKeyStateMSFT* controllerModelKeyState);
typedef XrResult (*PFN_xrLoadControllerModelMSFT)(XrSession session, XrControllerModelKeyMSFT modelKey, uint32_t bufferCapacityInput, uint32_t* bufferCountOutput, uint8_t* buffer);
typedef XrResult (*PFN_xrGetControllerModelPropertiesMSFT)(XrSession session, XrControllerModelKeyMSFT modelKey, XrControllerModelPropertiesMSFT* properties);
typedef XrResult (*PFN_xrGetControllerModelStateMSFT)(XrSession session, XrControllerModelKeyMSFT modelKey, XrControllerModelStateMSFT* state);
XrResult  xrGetControllerModelKeyMSFT(XrSession session, XrPath topLevelUserPath, XrControllerModelKeyStateMSFT* controllerModelKeyState);
XrResult  xrLoadControllerModelMSFT(XrSession session, XrControllerModelKeyMSFT modelKey, uint32_t bufferCapacityInput, uint32_t* bufferCountOutput, uint8_t* buffer);
XrResult  xrGetControllerModelPropertiesMSFT(XrSession session, XrControllerModelKeyMSFT modelKey, XrControllerModelPropertiesMSFT* properties);
XrResult  xrGetControllerModelStateMSFT(XrSession session, XrControllerModelKeyMSFT modelKey, XrControllerModelStateMSFT* state);
#line 3004 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 3005 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrViewConfigurationViewFovEPIC { XrStructureType type; const void* next; XrFovf recommendedFov; XrFovf maxMutableFov; } XrViewConfigurationViewFovEPIC; typedef enum XrReprojectionModeMSFT { XR_REPROJECTION_MODE_DEPTH_MSFT = 1, XR_REPROJECTION_MODE_PLANAR_FROM_DEPTH_MSFT = 2, XR_REPROJECTION_MODE_PLANAR_MANUAL_MSFT = 3, XR_REPROJECTION_MODE_ORIENTATION_ONLY_MSFT = 4, XR_REPROJECTION_MODE_MAX_ENUM_MSFT = 0x7FFFFFFF } XrReprojectionModeMSFT; typedef struct XrCompositionLayerReprojectionInfoMSFT { XrStructureType type; const void* next; XrReprojectionModeMSFT reprojectionMode; } XrCompositionLayerReprojectionInfoMSFT; typedef struct XrCompositionLayerReprojectionPlaneOverrideMSFT { XrStructureType type; const void* next; XrVector3f position; XrVector3f normal; XrVector3f velocity; } XrCompositionLayerReprojectionPlaneOverrideMSFT; typedef XrResult (*PFN_xrEnumerateReprojectionModesMSFT)(XrInstance instance, XrSystemId systemId, XrViewConfigurationType viewConfigurationType, uint32_t modeCapacityInput, uint32_t* modeCountOutput, XrReprojectionModeMSFT* modes);
XrResult  xrEnumerateReprojectionModesMSFT(XrInstance instance, XrSystemId systemId, XrViewConfigurationType viewConfigurationType, uint32_t modeCapacityInput, uint32_t* modeCountOutput, XrReprojectionModeMSFT* modes);
#line 3067 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 3068 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrSwapchainStateBaseHeaderFB { XrStructureType type; void* next; } XrSwapchainStateBaseHeaderFB; typedef XrResult (*PFN_xrUpdateSwapchainFB)(XrSwapchain swapchain, const XrSwapchainStateBaseHeaderFB* state);
typedef XrResult (*PFN_xrGetSwapchainStateFB)(XrSwapchain swapchain, XrSwapchainStateBaseHeaderFB* state);
XrResult  xrUpdateSwapchainFB(XrSwapchain swapchain, const XrSwapchainStateBaseHeaderFB* state);
XrResult  xrGetSwapchainStateFB(XrSwapchain swapchain, XrSwapchainStateBaseHeaderFB* state);
#line 3098 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 3099 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef XrFlags64 XrCompositionLayerSecureContentFlagsFB; static const XrCompositionLayerSecureContentFlagsFB XR_COMPOSITION_LAYER_SECURE_CONTENT_EXCLUDE_LAYER_BIT_FB = 0x00000001; static const XrCompositionLayerSecureContentFlagsFB XR_COMPOSITION_LAYER_SECURE_CONTENT_REPLACE_LAYER_BIT_FB = 0x00000002; typedef struct XrCompositionLayerSecureContentFB { XrStructureType type; const void* next; XrCompositionLayerSecureContentFlagsFB flags; } XrCompositionLayerSecureContentFB; typedef struct XrBodyTrackerFB_T* XrBodyTrackerFB; typedef enum XrBodyJointFB { XR_BODY_JOINT_ROOT_FB = 0, XR_BODY_JOINT_HIPS_FB = 1, XR_BODY_JOINT_SPINE_LOWER_FB = 2, XR_BODY_JOINT_SPINE_MIDDLE_FB = 3, XR_BODY_JOINT_SPINE_UPPER_FB = 4, XR_BODY_JOINT_CHEST_FB = 5, XR_BODY_JOINT_NECK_FB = 6, XR_BODY_JOINT_HEAD_FB = 7, XR_BODY_JOINT_LEFT_SHOULDER_FB = 8, XR_BODY_JOINT_LEFT_SCAPULA_FB = 9, XR_BODY_JOINT_LEFT_ARM_UPPER_FB = 10, XR_BODY_JOINT_LEFT_ARM_LOWER_FB = 11, XR_BODY_JOINT_LEFT_HAND_WRIST_TWIST_FB = 12, XR_BODY_JOINT_RIGHT_SHOULDER_FB = 13, XR_BODY_JOINT_RIGHT_SCAPULA_FB = 14, XR_BODY_JOINT_RIGHT_ARM_UPPER_FB = 15, XR_BODY_JOINT_RIGHT_ARM_LOWER_FB = 16, XR_BODY_JOINT_RIGHT_HAND_WRIST_TWIST_FB = 17, XR_BODY_JOINT_LEFT_HAND_PALM_FB = 18, XR_BODY_JOINT_LEFT_HAND_WRIST_FB = 19, XR_BODY_JOINT_LEFT_HAND_THUMB_METACARPAL_FB = 20, XR_BODY_JOINT_LEFT_HAND_THUMB_PROXIMAL_FB = 21, XR_BODY_JOINT_LEFT_HAND_THUMB_DISTAL_FB = 22, XR_BODY_JOINT_LEFT_HAND_THUMB_TIP_FB = 23, XR_BODY_JOINT_LEFT_HAND_INDEX_METACARPAL_FB = 24, XR_BODY_JOINT_LEFT_HAND_INDEX_PROXIMAL_FB = 25, XR_BODY_JOINT_LEFT_HAND_INDEX_INTERMEDIATE_FB = 26, XR_BODY_JOINT_LEFT_HAND_INDEX_DISTAL_FB = 27, XR_BODY_JOINT_LEFT_HAND_INDEX_TIP_FB = 28, XR_BODY_JOINT_LEFT_HAND_MIDDLE_METACARPAL_FB = 29, XR_BODY_JOINT_LEFT_HAND_MIDDLE_PROXIMAL_FB = 30, XR_BODY_JOINT_LEFT_HAND_MIDDLE_INTERMEDIATE_FB = 31, XR_BODY_JOINT_LEFT_HAND_MIDDLE_DISTAL_FB = 32, XR_BODY_JOINT_LEFT_HAND_MIDDLE_TIP_FB = 33, XR_BODY_JOINT_LEFT_HAND_RING_METACARPAL_FB = 34, XR_BODY_JOINT_LEFT_HAND_RING_PROXIMAL_FB = 35, XR_BODY_JOINT_LEFT_HAND_RING_INTERMEDIATE_FB = 36, XR_BODY_JOINT_LEFT_HAND_RING_DISTAL_FB = 37, XR_BODY_JOINT_LEFT_HAND_RING_TIP_FB = 38, XR_BODY_JOINT_LEFT_HAND_LITTLE_METACARPAL_FB = 39, XR_BODY_JOINT_LEFT_HAND_LITTLE_PROXIMAL_FB = 40, XR_BODY_JOINT_LEFT_HAND_LITTLE_INTERMEDIATE_FB = 41, XR_BODY_JOINT_LEFT_HAND_LITTLE_DISTAL_FB = 42, XR_BODY_JOINT_LEFT_HAND_LITTLE_TIP_FB = 43, XR_BODY_JOINT_RIGHT_HAND_PALM_FB = 44, XR_BODY_JOINT_RIGHT_HAND_WRIST_FB = 45, XR_BODY_JOINT_RIGHT_HAND_THUMB_METACARPAL_FB = 46, XR_BODY_JOINT_RIGHT_HAND_THUMB_PROXIMAL_FB = 47, XR_BODY_JOINT_RIGHT_HAND_THUMB_DISTAL_FB = 48, XR_BODY_JOINT_RIGHT_HAND_THUMB_TIP_FB = 49, XR_BODY_JOINT_RIGHT_HAND_INDEX_METACARPAL_FB = 50, XR_BODY_JOINT_RIGHT_HAND_INDEX_PROXIMAL_FB = 51, XR_BODY_JOINT_RIGHT_HAND_INDEX_INTERMEDIATE_FB = 52, XR_BODY_JOINT_RIGHT_HAND_INDEX_DISTAL_FB = 53, XR_BODY_JOINT_RIGHT_HAND_INDEX_TIP_FB = 54, XR_BODY_JOINT_RIGHT_HAND_MIDDLE_METACARPAL_FB = 55, XR_BODY_JOINT_RIGHT_HAND_MIDDLE_PROXIMAL_FB = 56, XR_BODY_JOINT_RIGHT_HAND_MIDDLE_INTERMEDIATE_FB = 57, XR_BODY_JOINT_RIGHT_HAND_MIDDLE_DISTAL_FB = 58, XR_BODY_JOINT_RIGHT_HAND_MIDDLE_TIP_FB = 59, XR_BODY_JOINT_RIGHT_HAND_RING_METACARPAL_FB = 60, XR_BODY_JOINT_RIGHT_HAND_RING_PROXIMAL_FB = 61, XR_BODY_JOINT_RIGHT_HAND_RING_INTERMEDIATE_FB = 62, XR_BODY_JOINT_RIGHT_HAND_RING_DISTAL_FB = 63, XR_BODY_JOINT_RIGHT_HAND_RING_TIP_FB = 64, XR_BODY_JOINT_RIGHT_HAND_LITTLE_METACARPAL_FB = 65, XR_BODY_JOINT_RIGHT_HAND_LITTLE_PROXIMAL_FB = 66, XR_BODY_JOINT_RIGHT_HAND_LITTLE_INTERMEDIATE_FB = 67, XR_BODY_JOINT_RIGHT_HAND_LITTLE_DISTAL_FB = 68, XR_BODY_JOINT_RIGHT_HAND_LITTLE_TIP_FB = 69, XR_BODY_JOINT_COUNT_FB = 70, XR_BODY_JOINT_NONE_FB = -1, XR_BODY_JOINT_MAX_ENUM_FB = 0x7FFFFFFF } XrBodyJointFB; typedef enum XrBodyJointSetFB { XR_BODY_JOINT_SET_DEFAULT_FB = 0, XR_BODY_JOINT_SET_FULL_BODY_META = 1000274000, XR_BODY_JOINT_SET_MAX_ENUM_FB = 0x7FFFFFFF } XrBodyJointSetFB; typedef struct XrBodyJointLocationFB { XrSpaceLocationFlags locationFlags; XrPosef pose; } XrBodyJointLocationFB; typedef struct XrSystemBodyTrackingPropertiesFB { XrStructureType type; void* next; XrBool32 supportsBodyTracking; } XrSystemBodyTrackingPropertiesFB; typedef struct XrBodyTrackerCreateInfoFB { XrStructureType type; const void* next; XrBodyJointSetFB bodyJointSet; } XrBodyTrackerCreateInfoFB; typedef struct XrBodySkeletonJointFB { int32_t joint; int32_t parentJoint; XrPosef pose; } XrBodySkeletonJointFB; typedef struct XrBodySkeletonFB { XrStructureType type; void* next; uint32_t jointCount; XrBodySkeletonJointFB* joints; } XrBodySkeletonFB; typedef struct XrBodyJointsLocateInfoFB { XrStructureType type; const void* next; XrSpace baseSpace; XrTime time; } XrBodyJointsLocateInfoFB; typedef struct XrBodyJointLocationsFB { XrStructureType type; void* next; XrBool32 isActive; float confidence; uint32_t jointCount; XrBodyJointLocationFB* jointLocations; uint32_t skeletonChangedCount; XrTime time; } XrBodyJointLocationsFB; typedef XrResult (*PFN_xrCreateBodyTrackerFB)(XrSession session, const XrBodyTrackerCreateInfoFB* createInfo, XrBodyTrackerFB* bodyTracker);
typedef XrResult (*PFN_xrDestroyBodyTrackerFB)(XrBodyTrackerFB bodyTracker);
typedef XrResult (*PFN_xrLocateBodyJointsFB)(XrBodyTrackerFB bodyTracker, const XrBodyJointsLocateInfoFB* locateInfo, XrBodyJointLocationsFB* locations);
typedef XrResult (*PFN_xrGetBodySkeletonFB)(XrBodyTrackerFB bodyTracker, XrBodySkeletonFB* skeleton);
XrResult  xrCreateBodyTrackerFB(XrSession session, const XrBodyTrackerCreateInfoFB* createInfo, XrBodyTrackerFB* bodyTracker);
XrResult  xrDestroyBodyTrackerFB(XrBodyTrackerFB bodyTracker);
XrResult  xrLocateBodyJointsFB(XrBodyTrackerFB bodyTracker, const XrBodyJointsLocateInfoFB* locateInfo, XrBodyJointLocationsFB* locations);
XrResult  xrGetBodySkeletonFB(XrBodyTrackerFB bodyTracker, XrBodySkeletonFB* skeleton);
#line 3280 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 3281 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrInteractionProfileDpadBindingEXT { XrStructureType type; const void* next; XrPath binding; XrActionSet actionSet; float forceThreshold; float forceThresholdReleased; float centerRegion; float wedgeAngle; XrBool32 isSticky; const XrHapticBaseHeader* onHaptic; const XrHapticBaseHeader* offHaptic; } XrInteractionProfileDpadBindingEXT; typedef struct XrInteractionProfileAnalogThresholdVALVE { XrStructureType type; const void* next; XrAction action; XrPath binding; float onThreshold; float offThreshold; const XrHapticBaseHeader* onHaptic; const XrHapticBaseHeader* offHaptic; } XrInteractionProfileAnalogThresholdVALVE; typedef enum XrHandJointsMotionRangeEXT { XR_HAND_JOINTS_MOTION_RANGE_UNOBSTRUCTED_EXT = 1, XR_HAND_JOINTS_MOTION_RANGE_CONFORMING_TO_CONTROLLER_EXT = 2, XR_HAND_JOINTS_MOTION_RANGE_MAX_ENUM_EXT = 0x7FFFFFFF } XrHandJointsMotionRangeEXT; typedef struct XrHandJointsMotionRangeInfoEXT { XrStructureType type; const void* next; XrHandJointsMotionRangeEXT handJointsMotionRange; } XrHandJointsMotionRangeInfoEXT; typedef struct XrSceneObserverMSFT_T* XrSceneObserverMSFT; typedef struct XrSceneMSFT_T* XrSceneMSFT; typedef enum XrSceneComputeFeatureMSFT { XR_SCENE_COMPUTE_FEATURE_PLANE_MSFT = 1, XR_SCENE_COMPUTE_FEATURE_PLANE_MESH_MSFT = 2, XR_SCENE_COMPUTE_FEATURE_VISUAL_MESH_MSFT = 3, XR_SCENE_COMPUTE_FEATURE_COLLIDER_MESH_MSFT = 4, XR_SCENE_COMPUTE_FEATURE_SERIALIZE_SCENE_MSFT = 1000098000, XR_SCENE_COMPUTE_FEATURE_MARKER_MSFT = 1000147000, XR_SCENE_COMPUTE_FEATURE_MAX_ENUM_MSFT = 0x7FFFFFFF } XrSceneComputeFeatureMSFT; typedef enum XrSceneComputeConsistencyMSFT { XR_SCENE_COMPUTE_CONSISTENCY_SNAPSHOT_COMPLETE_MSFT = 1, XR_SCENE_COMPUTE_CONSISTENCY_SNAPSHOT_INCOMPLETE_FAST_MSFT = 2, XR_SCENE_COMPUTE_CONSISTENCY_OCCLUSION_OPTIMIZED_MSFT = 3, XR_SCENE_COMPUTE_CONSISTENCY_MAX_ENUM_MSFT = 0x7FFFFFFF } XrSceneComputeConsistencyMSFT; typedef enum XrMeshComputeLodMSFT { XR_MESH_COMPUTE_LOD_COARSE_MSFT = 1, XR_MESH_COMPUTE_LOD_MEDIUM_MSFT = 2, XR_MESH_COMPUTE_LOD_FINE_MSFT = 3, XR_MESH_COMPUTE_LOD_UNLIMITED_MSFT = 4, XR_MESH_COMPUTE_LOD_MAX_ENUM_MSFT = 0x7FFFFFFF } XrMeshComputeLodMSFT; typedef enum XrSceneComponentTypeMSFT { XR_SCENE_COMPONENT_TYPE_INVALID_MSFT = -1, XR_SCENE_COMPONENT_TYPE_OBJECT_MSFT = 1, XR_SCENE_COMPONENT_TYPE_PLANE_MSFT = 2, XR_SCENE_COMPONENT_TYPE_VISUAL_MESH_MSFT = 3, XR_SCENE_COMPONENT_TYPE_COLLIDER_MESH_MSFT = 4, XR_SCENE_COMPONENT_TYPE_SERIALIZED_SCENE_FRAGMENT_MSFT = 1000098000, XR_SCENE_COMPONENT_TYPE_MARKER_MSFT = 1000147000, XR_SCENE_COMPONENT_TYPE_MAX_ENUM_MSFT = 0x7FFFFFFF } XrSceneComponentTypeMSFT; typedef enum XrSceneObjectTypeMSFT { XR_SCENE_OBJECT_TYPE_UNCATEGORIZED_MSFT = -1, XR_SCENE_OBJECT_TYPE_BACKGROUND_MSFT = 1, XR_SCENE_OBJECT_TYPE_WALL_MSFT = 2, XR_SCENE_OBJECT_TYPE_FLOOR_MSFT = 3, XR_SCENE_OBJECT_TYPE_CEILING_MSFT = 4, XR_SCENE_OBJECT_TYPE_PLATFORM_MSFT = 5, XR_SCENE_OBJECT_TYPE_INFERRED_MSFT = 6, XR_SCENE_OBJECT_TYPE_MAX_ENUM_MSFT = 0x7FFFFFFF } XrSceneObjectTypeMSFT; typedef enum XrScenePlaneAlignmentTypeMSFT { XR_SCENE_PLANE_ALIGNMENT_TYPE_NON_ORTHOGONAL_MSFT = 0, XR_SCENE_PLANE_ALIGNMENT_TYPE_HORIZONTAL_MSFT = 1, XR_SCENE_PLANE_ALIGNMENT_TYPE_VERTICAL_MSFT = 2, XR_SCENE_PLANE_ALIGNMENT_TYPE_MAX_ENUM_MSFT = 0x7FFFFFFF } XrScenePlaneAlignmentTypeMSFT; typedef enum XrSceneComputeStateMSFT { XR_SCENE_COMPUTE_STATE_NONE_MSFT = 0, XR_SCENE_COMPUTE_STATE_UPDATING_MSFT = 1, XR_SCENE_COMPUTE_STATE_COMPLETED_MSFT = 2, XR_SCENE_COMPUTE_STATE_COMPLETED_WITH_ERROR_MSFT = 3, XR_SCENE_COMPUTE_STATE_MAX_ENUM_MSFT = 0x7FFFFFFF } XrSceneComputeStateMSFT; typedef struct XrUuidMSFT { uint8_t bytes[16]; } XrUuidMSFT; typedef struct XrSceneObserverCreateInfoMSFT { XrStructureType type; const void* next; } XrSceneObserverCreateInfoMSFT; typedef struct XrSceneCreateInfoMSFT { XrStructureType type; const void* next; } XrSceneCreateInfoMSFT; typedef struct XrSceneSphereBoundMSFT { XrVector3f center; float radius; } XrSceneSphereBoundMSFT; typedef struct XrSceneOrientedBoxBoundMSFT { XrPosef pose; XrVector3f extents; } XrSceneOrientedBoxBoundMSFT; typedef struct XrSceneFrustumBoundMSFT { XrPosef pose; XrFovf fov; float farDistance; } XrSceneFrustumBoundMSFT; typedef struct XrSceneBoundsMSFT { XrSpace space; XrTime time; uint32_t sphereCount; const XrSceneSphereBoundMSFT* spheres; uint32_t boxCount; const XrSceneOrientedBoxBoundMSFT* boxes; uint32_t frustumCount; const XrSceneFrustumBoundMSFT* frustums; } XrSceneBoundsMSFT; typedef struct XrNewSceneComputeInfoMSFT { XrStructureType type; const void* next; uint32_t requestedFeatureCount; const XrSceneComputeFeatureMSFT* requestedFeatures; XrSceneComputeConsistencyMSFT consistency; XrSceneBoundsMSFT bounds; } XrNewSceneComputeInfoMSFT; typedef struct XrVisualMeshComputeLodInfoMSFT { XrStructureType type; const void* next; XrMeshComputeLodMSFT lod; } XrVisualMeshComputeLodInfoMSFT; typedef struct XrSceneComponentMSFT { XrSceneComponentTypeMSFT componentType; XrUuidMSFT id; XrUuidMSFT parentId; XrTime updateTime; } XrSceneComponentMSFT; typedef struct XrSceneComponentsMSFT { XrStructureType type; void* next; uint32_t componentCapacityInput; uint32_t componentCountOutput; XrSceneComponentMSFT* components; } XrSceneComponentsMSFT; typedef struct XrSceneComponentsGetInfoMSFT { XrStructureType type; const void* next; XrSceneComponentTypeMSFT componentType; } XrSceneComponentsGetInfoMSFT; typedef struct XrSceneComponentLocationMSFT { XrSpaceLocationFlags flags; XrPosef pose; } XrSceneComponentLocationMSFT; typedef struct XrSceneComponentLocationsMSFT { XrStructureType type; void* next; uint32_t locationCount; XrSceneComponentLocationMSFT* locations; } XrSceneComponentLocationsMSFT; typedef struct XrSceneComponentsLocateInfoMSFT { XrStructureType type; const void* next; XrSpace baseSpace; XrTime time; uint32_t componentIdCount; const XrUuidMSFT* componentIds; } XrSceneComponentsLocateInfoMSFT; typedef struct XrSceneObjectMSFT { XrSceneObjectTypeMSFT objectType; } XrSceneObjectMSFT; typedef struct XrSceneObjectsMSFT { XrStructureType type; void* next; uint32_t sceneObjectCount; XrSceneObjectMSFT* sceneObjects; } XrSceneObjectsMSFT; typedef struct XrSceneComponentParentFilterInfoMSFT { XrStructureType type; const void* next; XrUuidMSFT parentId; } XrSceneComponentParentFilterInfoMSFT; typedef struct XrSceneObjectTypesFilterInfoMSFT { XrStructureType type; const void* next; uint32_t objectTypeCount; const XrSceneObjectTypeMSFT* objectTypes; } XrSceneObjectTypesFilterInfoMSFT; typedef struct XrScenePlaneMSFT { XrScenePlaneAlignmentTypeMSFT alignment; XrExtent2Df size; uint64_t meshBufferId; XrBool32 supportsIndicesUint16; } XrScenePlaneMSFT; typedef struct XrScenePlanesMSFT { XrStructureType type; void* next; uint32_t scenePlaneCount; XrScenePlaneMSFT* scenePlanes; } XrScenePlanesMSFT; typedef struct XrScenePlaneAlignmentFilterInfoMSFT { XrStructureType type; const void* next; uint32_t alignmentCount; const XrScenePlaneAlignmentTypeMSFT* alignments; } XrScenePlaneAlignmentFilterInfoMSFT; typedef struct XrSceneMeshMSFT { uint64_t meshBufferId; XrBool32 supportsIndicesUint16; } XrSceneMeshMSFT; typedef struct XrSceneMeshesMSFT { XrStructureType type; void* next; uint32_t sceneMeshCount; XrSceneMeshMSFT* sceneMeshes; } XrSceneMeshesMSFT; typedef struct XrSceneMeshBuffersGetInfoMSFT { XrStructureType type; const void* next; uint64_t meshBufferId; } XrSceneMeshBuffersGetInfoMSFT; typedef struct XrSceneMeshBuffersMSFT { XrStructureType type; void* next; } XrSceneMeshBuffersMSFT; typedef struct XrSceneMeshVertexBufferMSFT { XrStructureType type; void* next; uint32_t vertexCapacityInput; uint32_t vertexCountOutput; XrVector3f* vertices; } XrSceneMeshVertexBufferMSFT; typedef struct XrSceneMeshIndicesUint32MSFT { XrStructureType type; void* next; uint32_t indexCapacityInput; uint32_t indexCountOutput; uint32_t* indices; } XrSceneMeshIndicesUint32MSFT; typedef struct XrSceneMeshIndicesUint16MSFT { XrStructureType type; void* next; uint32_t indexCapacityInput; uint32_t indexCountOutput; uint16_t* indices; } XrSceneMeshIndicesUint16MSFT; typedef XrResult (*PFN_xrEnumerateSceneComputeFeaturesMSFT)(XrInstance instance, XrSystemId systemId, uint32_t featureCapacityInput, uint32_t* featureCountOutput, XrSceneComputeFeatureMSFT* features);
typedef XrResult (*PFN_xrCreateSceneObserverMSFT)(XrSession session, const XrSceneObserverCreateInfoMSFT* createInfo, XrSceneObserverMSFT* sceneObserver);
typedef XrResult (*PFN_xrDestroySceneObserverMSFT)(XrSceneObserverMSFT sceneObserver);
typedef XrResult (*PFN_xrCreateSceneMSFT)(XrSceneObserverMSFT sceneObserver, const XrSceneCreateInfoMSFT* createInfo, XrSceneMSFT* scene);
typedef XrResult (*PFN_xrDestroySceneMSFT)(XrSceneMSFT scene);
typedef XrResult (*PFN_xrComputeNewSceneMSFT)(XrSceneObserverMSFT sceneObserver, const XrNewSceneComputeInfoMSFT* computeInfo);
typedef XrResult (*PFN_xrGetSceneComputeStateMSFT)(XrSceneObserverMSFT sceneObserver, XrSceneComputeStateMSFT* state);
typedef XrResult (*PFN_xrGetSceneComponentsMSFT)(XrSceneMSFT scene, const XrSceneComponentsGetInfoMSFT* getInfo, XrSceneComponentsMSFT* components);
typedef XrResult (*PFN_xrLocateSceneComponentsMSFT)(XrSceneMSFT scene, const XrSceneComponentsLocateInfoMSFT* locateInfo, XrSceneComponentLocationsMSFT* locations);
typedef XrResult (*PFN_xrGetSceneMeshBuffersMSFT)(XrSceneMSFT scene, const XrSceneMeshBuffersGetInfoMSFT* getInfo, XrSceneMeshBuffersMSFT* buffers);
XrResult  xrEnumerateSceneComputeFeaturesMSFT(XrInstance instance, XrSystemId systemId, uint32_t featureCapacityInput, uint32_t* featureCountOutput, XrSceneComputeFeatureMSFT* features);
XrResult  xrCreateSceneObserverMSFT(XrSession session, const XrSceneObserverCreateInfoMSFT* createInfo, XrSceneObserverMSFT* sceneObserver);
XrResult  xrDestroySceneObserverMSFT(XrSceneObserverMSFT sceneObserver);
XrResult  xrCreateSceneMSFT(XrSceneObserverMSFT sceneObserver, const XrSceneCreateInfoMSFT* createInfo, XrSceneMSFT* scene);
XrResult  xrDestroySceneMSFT(XrSceneMSFT scene);
XrResult  xrComputeNewSceneMSFT(XrSceneObserverMSFT sceneObserver, const XrNewSceneComputeInfoMSFT* computeInfo);
XrResult  xrGetSceneComputeStateMSFT(XrSceneObserverMSFT sceneObserver, XrSceneComputeStateMSFT* state);
XrResult  xrGetSceneComponentsMSFT(XrSceneMSFT scene, const XrSceneComponentsGetInfoMSFT* getInfo, XrSceneComponentsMSFT* components);
XrResult  xrLocateSceneComponentsMSFT(XrSceneMSFT scene, const XrSceneComponentsLocateInfoMSFT* locateInfo, XrSceneComponentLocationsMSFT* locations);
XrResult  xrGetSceneMeshBuffersMSFT(XrSceneMSFT scene, const XrSceneMeshBuffersGetInfoMSFT* getInfo, XrSceneMeshBuffersMSFT* buffers);
#line 3685 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 3686 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrSerializedSceneFragmentDataGetInfoMSFT { XrStructureType type; const void* next; XrUuidMSFT sceneFragmentId; } XrSerializedSceneFragmentDataGetInfoMSFT; typedef struct XrDeserializeSceneFragmentMSFT { uint32_t bufferSize; const uint8_t* buffer; } XrDeserializeSceneFragmentMSFT; typedef struct XrSceneDeserializeInfoMSFT { XrStructureType type; const void* next; uint32_t fragmentCount; const XrDeserializeSceneFragmentMSFT* fragments; } XrSceneDeserializeInfoMSFT; typedef XrResult (*PFN_xrDeserializeSceneMSFT)(XrSceneObserverMSFT sceneObserver, const XrSceneDeserializeInfoMSFT* deserializeInfo);
typedef XrResult (*PFN_xrGetSerializedSceneFragmentDataMSFT)(XrSceneMSFT scene, const XrSerializedSceneFragmentDataGetInfoMSFT* getInfo, uint32_t countInput, uint32_t* readOutput, uint8_t* buffer);
XrResult  xrDeserializeSceneMSFT(XrSceneObserverMSFT sceneObserver, const XrSceneDeserializeInfoMSFT* deserializeInfo);
XrResult  xrGetSerializedSceneFragmentDataMSFT(XrSceneMSFT scene, const XrSerializedSceneFragmentDataGetInfoMSFT* getInfo, uint32_t countInput, uint32_t* readOutput, uint8_t* buffer);
#line 3726 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 3727 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrEventDataDisplayRefreshRateChangedFB { XrStructureType type; const void* next; float fromDisplayRefreshRate; float toDisplayRefreshRate; } XrEventDataDisplayRefreshRateChangedFB; typedef XrResult (*PFN_xrEnumerateDisplayRefreshRatesFB)(XrSession session, uint32_t displayRefreshRateCapacityInput, uint32_t* displayRefreshRateCountOutput, float* displayRefreshRates);
typedef XrResult (*PFN_xrGetDisplayRefreshRateFB)(XrSession session, float* displayRefreshRate);
typedef XrResult (*PFN_xrRequestDisplayRefreshRateFB)(XrSession session, float displayRefreshRate);
XrResult  xrEnumerateDisplayRefreshRatesFB(XrSession session, uint32_t displayRefreshRateCapacityInput, uint32_t* displayRefreshRateCountOutput, float* displayRefreshRates);
XrResult  xrGetDisplayRefreshRateFB(XrSession session, float* displayRefreshRate);
XrResult  xrRequestDisplayRefreshRateFB(XrSession session, float displayRefreshRate);
#line 3760 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 3761 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrViveTrackerPathsHTCX { XrStructureType type; void* next; XrPath persistentPath; XrPath rolePath; } XrViveTrackerPathsHTCX; typedef struct XrEventDataViveTrackerConnectedHTCX { XrStructureType type; const void* next; XrViveTrackerPathsHTCX* paths; } XrEventDataViveTrackerConnectedHTCX; typedef XrResult (*PFN_xrEnumerateViveTrackerPathsHTCX)(XrInstance instance, uint32_t pathCapacityInput, uint32_t* pathCountOutput, XrViveTrackerPathsHTCX* paths);
XrResult  xrEnumerateViveTrackerPathsHTCX(XrInstance instance, uint32_t pathCapacityInput, uint32_t* pathCountOutput, XrViveTrackerPathsHTCX* paths);
#line 3796 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 3797 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrFacialTrackerHTC_T* XrFacialTrackerHTC; typedef enum XrEyeExpressionHTC { XR_EYE_EXPRESSION_LEFT_BLINK_HTC = 0, XR_EYE_EXPRESSION_LEFT_WIDE_HTC = 1, XR_EYE_EXPRESSION_RIGHT_BLINK_HTC = 2, XR_EYE_EXPRESSION_RIGHT_WIDE_HTC = 3, XR_EYE_EXPRESSION_LEFT_SQUEEZE_HTC = 4, XR_EYE_EXPRESSION_RIGHT_SQUEEZE_HTC = 5, XR_EYE_EXPRESSION_LEFT_DOWN_HTC = 6, XR_EYE_EXPRESSION_RIGHT_DOWN_HTC = 7, XR_EYE_EXPRESSION_LEFT_OUT_HTC = 8, XR_EYE_EXPRESSION_RIGHT_IN_HTC = 9, XR_EYE_EXPRESSION_LEFT_IN_HTC = 10, XR_EYE_EXPRESSION_RIGHT_OUT_HTC = 11, XR_EYE_EXPRESSION_LEFT_UP_HTC = 12, XR_EYE_EXPRESSION_RIGHT_UP_HTC = 13, XR_EYE_EXPRESSION_MAX_ENUM_HTC = 0x7FFFFFFF } XrEyeExpressionHTC; typedef enum XrLipExpressionHTC { XR_LIP_EXPRESSION_JAW_RIGHT_HTC = 0, XR_LIP_EXPRESSION_JAW_LEFT_HTC = 1, XR_LIP_EXPRESSION_JAW_FORWARD_HTC = 2, XR_LIP_EXPRESSION_JAW_OPEN_HTC = 3, XR_LIP_EXPRESSION_MOUTH_APE_SHAPE_HTC = 4, XR_LIP_EXPRESSION_MOUTH_UPPER_RIGHT_HTC = 5, XR_LIP_EXPRESSION_MOUTH_UPPER_LEFT_HTC = 6, XR_LIP_EXPRESSION_MOUTH_LOWER_RIGHT_HTC = 7, XR_LIP_EXPRESSION_MOUTH_LOWER_LEFT_HTC = 8, XR_LIP_EXPRESSION_MOUTH_UPPER_OVERTURN_HTC = 9, XR_LIP_EXPRESSION_MOUTH_LOWER_OVERTURN_HTC = 10, XR_LIP_EXPRESSION_MOUTH_POUT_HTC = 11, XR_LIP_EXPRESSION_MOUTH_RAISER_RIGHT_HTC = 12, XR_LIP_EXPRESSION_MOUTH_RAISER_LEFT_HTC = 13, XR_LIP_EXPRESSION_MOUTH_STRETCHER_RIGHT_HTC = 14, XR_LIP_EXPRESSION_MOUTH_STRETCHER_LEFT_HTC = 15, XR_LIP_EXPRESSION_CHEEK_PUFF_RIGHT_HTC = 16, XR_LIP_EXPRESSION_CHEEK_PUFF_LEFT_HTC = 17, XR_LIP_EXPRESSION_CHEEK_SUCK_HTC = 18, XR_LIP_EXPRESSION_MOUTH_UPPER_UPRIGHT_HTC = 19, XR_LIP_EXPRESSION_MOUTH_UPPER_UPLEFT_HTC = 20, XR_LIP_EXPRESSION_MOUTH_LOWER_DOWNRIGHT_HTC = 21, XR_LIP_EXPRESSION_MOUTH_LOWER_DOWNLEFT_HTC = 22, XR_LIP_EXPRESSION_MOUTH_UPPER_INSIDE_HTC = 23, XR_LIP_EXPRESSION_MOUTH_LOWER_INSIDE_HTC = 24, XR_LIP_EXPRESSION_MOUTH_LOWER_OVERLAY_HTC = 25, XR_LIP_EXPRESSION_TONGUE_LONGSTEP1_HTC = 26, XR_LIP_EXPRESSION_TONGUE_LEFT_HTC = 27, XR_LIP_EXPRESSION_TONGUE_RIGHT_HTC = 28, XR_LIP_EXPRESSION_TONGUE_UP_HTC = 29, XR_LIP_EXPRESSION_TONGUE_DOWN_HTC = 30, XR_LIP_EXPRESSION_TONGUE_ROLL_HTC = 31, XR_LIP_EXPRESSION_TONGUE_LONGSTEP2_HTC = 32, XR_LIP_EXPRESSION_TONGUE_UPRIGHT_MORPH_HTC = 33, XR_LIP_EXPRESSION_TONGUE_UPLEFT_MORPH_HTC = 34, XR_LIP_EXPRESSION_TONGUE_DOWNRIGHT_MORPH_HTC = 35, XR_LIP_EXPRESSION_TONGUE_DOWNLEFT_MORPH_HTC = 36, XR_LIP_EXPRESSION_MOUTH_SMILE_RIGHT_HTC = XR_LIP_EXPRESSION_MOUTH_RAISER_RIGHT_HTC, XR_LIP_EXPRESSION_MOUTH_SMILE_LEFT_HTC = XR_LIP_EXPRESSION_MOUTH_RAISER_LEFT_HTC, XR_LIP_EXPRESSION_MOUTH_SAD_RIGHT_HTC = XR_LIP_EXPRESSION_MOUTH_STRETCHER_RIGHT_HTC, XR_LIP_EXPRESSION_MOUTH_SAD_LEFT_HTC = XR_LIP_EXPRESSION_MOUTH_STRETCHER_LEFT_HTC, XR_LIP_EXPRESSION_MAX_ENUM_HTC = 0x7FFFFFFF } XrLipExpressionHTC; typedef enum XrFacialTrackingTypeHTC { XR_FACIAL_TRACKING_TYPE_EYE_DEFAULT_HTC = 1, XR_FACIAL_TRACKING_TYPE_LIP_DEFAULT_HTC = 2, XR_FACIAL_TRACKING_TYPE_MAX_ENUM_HTC = 0x7FFFFFFF } XrFacialTrackingTypeHTC; typedef struct XrSystemFacialTrackingPropertiesHTC { XrStructureType type; void* next; XrBool32 supportEyeFacialTracking; XrBool32 supportLipFacialTracking; } XrSystemFacialTrackingPropertiesHTC; typedef struct XrFacialExpressionsHTC { XrStructureType type; const void* next; XrBool32 isActive; XrTime sampleTime; uint32_t expressionCount; float* expressionWeightings; } XrFacialExpressionsHTC; typedef struct XrFacialTrackerCreateInfoHTC { XrStructureType type; const void* next; XrFacialTrackingTypeHTC facialTrackingType; } XrFacialTrackerCreateInfoHTC; typedef XrResult (*PFN_xrCreateFacialTrackerHTC)(XrSession session, const XrFacialTrackerCreateInfoHTC* createInfo, XrFacialTrackerHTC* facialTracker);
typedef XrResult (*PFN_xrDestroyFacialTrackerHTC)(XrFacialTrackerHTC facialTracker);
typedef XrResult (*PFN_xrGetFacialExpressionsHTC)(XrFacialTrackerHTC facialTracker, XrFacialExpressionsHTC* facialExpressions);
XrResult  xrCreateFacialTrackerHTC(XrSession session, const XrFacialTrackerCreateInfoHTC* createInfo, XrFacialTrackerHTC* facialTracker);
XrResult  xrDestroyFacialTrackerHTC(XrFacialTrackerHTC facialTracker);
XrResult  xrGetFacialExpressionsHTC(XrFacialTrackerHTC facialTracker, XrFacialExpressionsHTC* facialExpressions);
#line 3920 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 3921 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef enum XrColorSpaceFB { XR_COLOR_SPACE_UNMANAGED_FB = 0, XR_COLOR_SPACE_REC2020_FB = 1, XR_COLOR_SPACE_REC709_FB = 2, XR_COLOR_SPACE_RIFT_CV1_FB = 3, XR_COLOR_SPACE_RIFT_S_FB = 4, XR_COLOR_SPACE_QUEST_FB = 5, XR_COLOR_SPACE_P3_FB = 6, XR_COLOR_SPACE_ADOBE_RGB_FB = 7, XR_COLOR_SPACE_MAX_ENUM_FB = 0x7FFFFFFF } XrColorSpaceFB; typedef struct XrSystemColorSpacePropertiesFB { XrStructureType type; void* next; XrColorSpaceFB colorSpace; } XrSystemColorSpacePropertiesFB; typedef XrResult (*PFN_xrEnumerateColorSpacesFB)(XrSession session, uint32_t colorSpaceCapacityInput, uint32_t* colorSpaceCountOutput, XrColorSpaceFB* colorSpaces);
typedef XrResult (*PFN_xrSetColorSpaceFB)(XrSession session, const XrColorSpaceFB colorSpace);
XrResult  xrEnumerateColorSpacesFB(XrSession session, uint32_t colorSpaceCapacityInput, uint32_t* colorSpaceCountOutput, XrColorSpaceFB* colorSpaces);
XrResult  xrSetColorSpaceFB(XrSession session, const XrColorSpaceFB colorSpace);
#line 3979 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 3980 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrVector4sFB { int16_t x; int16_t y; int16_t z; int16_t w; } XrVector4sFB; typedef struct XrHandTrackingMeshFB { XrStructureType type; void* next; uint32_t jointCapacityInput; uint32_t jointCountOutput; XrPosef* jointBindPoses; float* jointRadii; XrHandJointEXT* jointParents; uint32_t vertexCapacityInput; uint32_t vertexCountOutput; XrVector3f* vertexPositions; XrVector3f* vertexNormals; XrVector2f* vertexUVs; XrVector4sFB* vertexBlendIndices; XrVector4f* vertexBlendWeights; uint32_t indexCapacityInput; uint32_t indexCountOutput; int16_t* indices; } XrHandTrackingMeshFB; typedef struct XrHandTrackingScaleFB { XrStructureType type; void* next; float sensorOutput; float currentOutput; XrBool32 overrideHandScale; float overrideValueInput; } XrHandTrackingScaleFB; typedef XrResult (*PFN_xrGetHandMeshFB)(XrHandTrackerEXT handTracker, XrHandTrackingMeshFB* mesh);
XrResult  xrGetHandMeshFB(XrHandTrackerEXT handTracker, XrHandTrackingMeshFB* mesh);
#line 4031 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 4032 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef XrFlags64 XrHandTrackingAimFlagsFB; static const XrHandTrackingAimFlagsFB XR_HAND_TRACKING_AIM_COMPUTED_BIT_FB = 0x00000001; static const XrHandTrackingAimFlagsFB XR_HAND_TRACKING_AIM_VALID_BIT_FB = 0x00000002; static const XrHandTrackingAimFlagsFB XR_HAND_TRACKING_AIM_INDEX_PINCHING_BIT_FB = 0x00000004; static const XrHandTrackingAimFlagsFB XR_HAND_TRACKING_AIM_MIDDLE_PINCHING_BIT_FB = 0x00000008; static const XrHandTrackingAimFlagsFB XR_HAND_TRACKING_AIM_RING_PINCHING_BIT_FB = 0x00000010; static const XrHandTrackingAimFlagsFB XR_HAND_TRACKING_AIM_LITTLE_PINCHING_BIT_FB = 0x00000020; static const XrHandTrackingAimFlagsFB XR_HAND_TRACKING_AIM_SYSTEM_GESTURE_BIT_FB = 0x00000040; static const XrHandTrackingAimFlagsFB XR_HAND_TRACKING_AIM_DOMINANT_HAND_BIT_FB = 0x00000080; static const XrHandTrackingAimFlagsFB XR_HAND_TRACKING_AIM_MENU_PRESSED_BIT_FB = 0x00000100; typedef struct XrHandTrackingAimStateFB { XrStructureType type; void* next; XrHandTrackingAimFlagsFB status; XrPosef aimPose; float pinchStrengthIndex; float pinchStrengthMiddle; float pinchStrengthRing; float pinchStrengthLittle; } XrHandTrackingAimStateFB; typedef struct XrHandCapsuleFB { XrVector3f points[2]; float radius; XrHandJointEXT joint; } XrHandCapsuleFB; typedef struct XrHandTrackingCapsulesStateFB { XrStructureType type; void* next; XrHandCapsuleFB capsules[19]; } XrHandTrackingCapsulesStateFB; typedef uint64_t XrAsyncRequestIdFB; typedef enum XrSpaceComponentTypeFB { XR_SPACE_COMPONENT_TYPE_LOCATABLE_FB = 0, XR_SPACE_COMPONENT_TYPE_STORABLE_FB = 1, XR_SPACE_COMPONENT_TYPE_SHARABLE_FB = 2, XR_SPACE_COMPONENT_TYPE_BOUNDED_2D_FB = 3, XR_SPACE_COMPONENT_TYPE_BOUNDED_3D_FB = 4, XR_SPACE_COMPONENT_TYPE_SEMANTIC_LABELS_FB = 5, XR_SPACE_COMPONENT_TYPE_ROOM_LAYOUT_FB = 6, XR_SPACE_COMPONENT_TYPE_SPACE_CONTAINER_FB = 7, XR_SPACE_COMPONENT_TYPE_TRIANGLE_MESH_META = 1000269000, XR_SPACE_COMPONENT_TYPE_MAX_ENUM_FB = 0x7FFFFFFF } XrSpaceComponentTypeFB; typedef struct XrSystemSpatialEntityPropertiesFB { XrStructureType type; const void* next; XrBool32 supportsSpatialEntity; } XrSystemSpatialEntityPropertiesFB; typedef struct XrSpatialAnchorCreateInfoFB { XrStructureType type; const void* next; XrSpace space; XrPosef poseInSpace; XrTime time; } XrSpatialAnchorCreateInfoFB; typedef struct XrSpaceComponentStatusSetInfoFB { XrStructureType type; const void* next; XrSpaceComponentTypeFB componentType; XrBool32 enabled; XrDuration timeout; } XrSpaceComponentStatusSetInfoFB; typedef struct XrSpaceComponentStatusFB { XrStructureType type; void* next; XrBool32 enabled; XrBool32 changePending; } XrSpaceComponentStatusFB; typedef XrUuid XrUuidEXT; typedef struct XrEventDataSpatialAnchorCreateCompleteFB { XrStructureType type; const void* next; XrAsyncRequestIdFB requestId; XrResult result; XrSpace space; XrUuidEXT uuid; } XrEventDataSpatialAnchorCreateCompleteFB; typedef struct XrEventDataSpaceSetStatusCompleteFB { XrStructureType type; const void* next; XrAsyncRequestIdFB requestId; XrResult result; XrSpace space; XrUuidEXT uuid; XrSpaceComponentTypeFB componentType; XrBool32 enabled; } XrEventDataSpaceSetStatusCompleteFB; typedef XrResult (*PFN_xrCreateSpatialAnchorFB)(XrSession session, const XrSpatialAnchorCreateInfoFB* info, XrAsyncRequestIdFB* requestId);
typedef XrResult (*PFN_xrGetSpaceUuidFB)(XrSpace space, XrUuidEXT* uuid);
typedef XrResult (*PFN_xrEnumerateSpaceSupportedComponentsFB)(XrSpace space, uint32_t componentTypeCapacityInput, uint32_t* componentTypeCountOutput, XrSpaceComponentTypeFB* componentTypes);
typedef XrResult (*PFN_xrSetSpaceComponentStatusFB)(XrSpace space, const XrSpaceComponentStatusSetInfoFB* info, XrAsyncRequestIdFB* requestId);
typedef XrResult (*PFN_xrGetSpaceComponentStatusFB)(XrSpace space, XrSpaceComponentTypeFB componentType, XrSpaceComponentStatusFB* status);
XrResult  xrCreateSpatialAnchorFB(XrSession session, const XrSpatialAnchorCreateInfoFB* info, XrAsyncRequestIdFB* requestId);
XrResult  xrGetSpaceUuidFB(XrSpace space, XrUuidEXT* uuid);
XrResult  xrEnumerateSpaceSupportedComponentsFB(XrSpace space, uint32_t componentTypeCapacityInput, uint32_t* componentTypeCountOutput, XrSpaceComponentTypeFB* componentTypes);
XrResult  xrSetSpaceComponentStatusFB(XrSpace space, const XrSpaceComponentStatusSetInfoFB* info, XrAsyncRequestIdFB* requestId);
XrResult  xrGetSpaceComponentStatusFB(XrSpace space, XrSpaceComponentTypeFB componentType, XrSpaceComponentStatusFB* status);
#line 4191 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 4192 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrFoveationProfileFB_T* XrFoveationProfileFB; typedef XrFlags64 XrSwapchainCreateFoveationFlagsFB; static const XrSwapchainCreateFoveationFlagsFB XR_SWAPCHAIN_CREATE_FOVEATION_SCALED_BIN_BIT_FB = 0x00000001; static const XrSwapchainCreateFoveationFlagsFB XR_SWAPCHAIN_CREATE_FOVEATION_FRAGMENT_DENSITY_MAP_BIT_FB = 0x00000002; typedef XrFlags64 XrSwapchainStateFoveationFlagsFB; typedef struct XrFoveationProfileCreateInfoFB { XrStructureType type; void* next; } XrFoveationProfileCreateInfoFB; typedef struct XrSwapchainCreateInfoFoveationFB { XrStructureType type; void* next; XrSwapchainCreateFoveationFlagsFB flags; } XrSwapchainCreateInfoFoveationFB; typedef struct XrSwapchainStateFoveationFB { XrStructureType type; void* next; XrSwapchainStateFoveationFlagsFB flags; XrFoveationProfileFB profile; } XrSwapchainStateFoveationFB; typedef XrResult (*PFN_xrCreateFoveationProfileFB)(XrSession session, const XrFoveationProfileCreateInfoFB* createInfo, XrFoveationProfileFB* profile);
typedef XrResult (*PFN_xrDestroyFoveationProfileFB)(XrFoveationProfileFB profile);
XrResult  xrCreateFoveationProfileFB(XrSession session, const XrFoveationProfileCreateInfoFB* createInfo, XrFoveationProfileFB* profile);
XrResult  xrDestroyFoveationProfileFB(XrFoveationProfileFB profile);
#line 4241 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 4242 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef enum XrFoveationLevelFB { XR_FOVEATION_LEVEL_NONE_FB = 0, XR_FOVEATION_LEVEL_LOW_FB = 1, XR_FOVEATION_LEVEL_MEDIUM_FB = 2, XR_FOVEATION_LEVEL_HIGH_FB = 3, XR_FOVEATION_LEVEL_MAX_ENUM_FB = 0x7FFFFFFF } XrFoveationLevelFB; typedef enum XrFoveationDynamicFB { XR_FOVEATION_DYNAMIC_DISABLED_FB = 0, XR_FOVEATION_DYNAMIC_LEVEL_ENABLED_FB = 1, XR_FOVEATION_DYNAMIC_MAX_ENUM_FB = 0x7FFFFFFF } XrFoveationDynamicFB; typedef struct XrFoveationLevelProfileCreateInfoFB { XrStructureType type; void* next; XrFoveationLevelFB level; float verticalOffset; XrFoveationDynamicFB dynamic; } XrFoveationLevelProfileCreateInfoFB; typedef XrFlags64 XrKeyboardTrackingFlagsFB; static const XrKeyboardTrackingFlagsFB XR_KEYBOARD_TRACKING_EXISTS_BIT_FB = 0x00000001; static const XrKeyboardTrackingFlagsFB XR_KEYBOARD_TRACKING_LOCAL_BIT_FB = 0x00000002; static const XrKeyboardTrackingFlagsFB XR_KEYBOARD_TRACKING_REMOTE_BIT_FB = 0x00000004; static const XrKeyboardTrackingFlagsFB XR_KEYBOARD_TRACKING_CONNECTED_BIT_FB = 0x00000008; typedef XrFlags64 XrKeyboardTrackingQueryFlagsFB; static const XrKeyboardTrackingQueryFlagsFB XR_KEYBOARD_TRACKING_QUERY_LOCAL_BIT_FB = 0x00000002; static const XrKeyboardTrackingQueryFlagsFB XR_KEYBOARD_TRACKING_QUERY_REMOTE_BIT_FB = 0x00000004; typedef struct XrSystemKeyboardTrackingPropertiesFB { XrStructureType type; void* next; XrBool32 supportsKeyboardTracking; } XrSystemKeyboardTrackingPropertiesFB; typedef struct XrKeyboardTrackingDescriptionFB { uint64_t trackedKeyboardId; XrVector3f size; XrKeyboardTrackingFlagsFB flags; char name[128]; } XrKeyboardTrackingDescriptionFB; typedef struct XrKeyboardSpaceCreateInfoFB { XrStructureType type; void* next; uint64_t trackedKeyboardId; } XrKeyboardSpaceCreateInfoFB; typedef struct XrKeyboardTrackingQueryFB { XrStructureType type; void* next; XrKeyboardTrackingQueryFlagsFB flags; } XrKeyboardTrackingQueryFB; typedef XrResult (*PFN_xrQuerySystemTrackedKeyboardFB)(XrSession session, const XrKeyboardTrackingQueryFB* queryInfo, XrKeyboardTrackingDescriptionFB* keyboard);
typedef XrResult (*PFN_xrCreateKeyboardSpaceFB)(XrSession session, const XrKeyboardSpaceCreateInfoFB* createInfo, XrSpace* keyboardSpace);
XrResult  xrQuerySystemTrackedKeyboardFB(XrSession session, const XrKeyboardTrackingQueryFB* queryInfo, XrKeyboardTrackingDescriptionFB* keyboard);
XrResult  xrCreateKeyboardSpaceFB(XrSession session, const XrKeyboardSpaceCreateInfoFB* createInfo, XrSpace* keyboardSpace);
#line 4333 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 4334 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrTriangleMeshFB_T* XrTriangleMeshFB; typedef enum XrWindingOrderFB { XR_WINDING_ORDER_UNKNOWN_FB = 0, XR_WINDING_ORDER_CW_FB = 1, XR_WINDING_ORDER_CCW_FB = 2, XR_WINDING_ORDER_MAX_ENUM_FB = 0x7FFFFFFF } XrWindingOrderFB; typedef XrFlags64 XrTriangleMeshFlagsFB; static const XrTriangleMeshFlagsFB XR_TRIANGLE_MESH_MUTABLE_BIT_FB = 0x00000001; typedef struct XrTriangleMeshCreateInfoFB { XrStructureType type; const void* next; XrTriangleMeshFlagsFB flags; XrWindingOrderFB windingOrder; uint32_t vertexCount; const XrVector3f* vertexBuffer; uint32_t triangleCount; const uint32_t* indexBuffer; } XrTriangleMeshCreateInfoFB; typedef XrResult (*PFN_xrCreateTriangleMeshFB)(XrSession session, const XrTriangleMeshCreateInfoFB* createInfo, XrTriangleMeshFB* outTriangleMesh);
typedef XrResult (*PFN_xrDestroyTriangleMeshFB)(XrTriangleMeshFB mesh);
typedef XrResult (*PFN_xrTriangleMeshGetVertexBufferFB)(XrTriangleMeshFB mesh, XrVector3f** outVertexBuffer);
typedef XrResult (*PFN_xrTriangleMeshGetIndexBufferFB)(XrTriangleMeshFB mesh, uint32_t** outIndexBuffer);
typedef XrResult (*PFN_xrTriangleMeshBeginUpdateFB)(XrTriangleMeshFB mesh);
typedef XrResult (*PFN_xrTriangleMeshEndUpdateFB)(XrTriangleMeshFB mesh, uint32_t vertexCount, uint32_t triangleCount);
typedef XrResult (*PFN_xrTriangleMeshBeginVertexBufferUpdateFB)(XrTriangleMeshFB mesh, uint32_t* outVertexCount);
typedef XrResult (*PFN_xrTriangleMeshEndVertexBufferUpdateFB)(XrTriangleMeshFB mesh);
XrResult  xrCreateTriangleMeshFB(XrSession session, const XrTriangleMeshCreateInfoFB* createInfo, XrTriangleMeshFB* outTriangleMesh);
XrResult  xrDestroyTriangleMeshFB(XrTriangleMeshFB mesh);
XrResult  xrTriangleMeshGetVertexBufferFB(XrTriangleMeshFB mesh, XrVector3f** outVertexBuffer);
XrResult  xrTriangleMeshGetIndexBufferFB(XrTriangleMeshFB mesh, uint32_t** outIndexBuffer);
XrResult  xrTriangleMeshBeginUpdateFB(XrTriangleMeshFB mesh);
XrResult  xrTriangleMeshEndUpdateFB(XrTriangleMeshFB mesh, uint32_t vertexCount, uint32_t triangleCount);
XrResult  xrTriangleMeshBeginVertexBufferUpdateFB(XrTriangleMeshFB mesh, uint32_t* outVertexCount);
XrResult  xrTriangleMeshEndVertexBufferUpdateFB(XrTriangleMeshFB mesh);
#line 4406 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 4407 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrPassthroughFB_T* XrPassthroughFB; typedef struct XrPassthroughLayerFB_T* XrPassthroughLayerFB; typedef struct XrGeometryInstanceFB_T* XrGeometryInstanceFB; typedef enum XrPassthroughLayerPurposeFB { XR_PASSTHROUGH_LAYER_PURPOSE_RECONSTRUCTION_FB = 0, XR_PASSTHROUGH_LAYER_PURPOSE_PROJECTED_FB = 1, XR_PASSTHROUGH_LAYER_PURPOSE_TRACKED_KEYBOARD_HANDS_FB = 1000203001, XR_PASSTHROUGH_LAYER_PURPOSE_TRACKED_KEYBOARD_MASKED_HANDS_FB = 1000203002, XR_PASSTHROUGH_LAYER_PURPOSE_MAX_ENUM_FB = 0x7FFFFFFF } XrPassthroughLayerPurposeFB; typedef XrFlags64 XrPassthroughCapabilityFlagsFB; static const XrPassthroughCapabilityFlagsFB XR_PASSTHROUGH_CAPABILITY_BIT_FB = 0x00000001; static const XrPassthroughCapabilityFlagsFB XR_PASSTHROUGH_CAPABILITY_COLOR_BIT_FB = 0x00000002; static const XrPassthroughCapabilityFlagsFB XR_PASSTHROUGH_CAPABILITY_LAYER_DEPTH_BIT_FB = 0x00000004; typedef XrFlags64 XrPassthroughFlagsFB; static const XrPassthroughFlagsFB XR_PASSTHROUGH_IS_RUNNING_AT_CREATION_BIT_FB = 0x00000001; static const XrPassthroughFlagsFB XR_PASSTHROUGH_LAYER_DEPTH_BIT_FB = 0x00000002; typedef XrFlags64 XrPassthroughStateChangedFlagsFB; static const XrPassthroughStateChangedFlagsFB XR_PASSTHROUGH_STATE_CHANGED_REINIT_REQUIRED_BIT_FB = 0x00000001; static const XrPassthroughStateChangedFlagsFB XR_PASSTHROUGH_STATE_CHANGED_NON_RECOVERABLE_ERROR_BIT_FB = 0x00000002; static const XrPassthroughStateChangedFlagsFB XR_PASSTHROUGH_STATE_CHANGED_RECOVERABLE_ERROR_BIT_FB = 0x00000004; static const XrPassthroughStateChangedFlagsFB XR_PASSTHROUGH_STATE_CHANGED_RESTORED_ERROR_BIT_FB = 0x00000008; typedef struct XrSystemPassthroughPropertiesFB { XrStructureType type; const void* next; XrBool32 supportsPassthrough; } XrSystemPassthroughPropertiesFB; typedef struct XrSystemPassthroughProperties2FB { XrStructureType type; const void* next; XrPassthroughCapabilityFlagsFB capabilities; } XrSystemPassthroughProperties2FB; typedef struct XrPassthroughCreateInfoFB { XrStructureType type; const void* next; XrPassthroughFlagsFB flags; } XrPassthroughCreateInfoFB; typedef struct XrPassthroughLayerCreateInfoFB { XrStructureType type; const void* next; XrPassthroughFB passthrough; XrPassthroughFlagsFB flags; XrPassthroughLayerPurposeFB purpose; } XrPassthroughLayerCreateInfoFB; typedef struct XrCompositionLayerPassthroughFB { XrStructureType type; const void* next; XrCompositionLayerFlags flags; XrSpace space; XrPassthroughLayerFB layerHandle; } XrCompositionLayerPassthroughFB; typedef struct XrGeometryInstanceCreateInfoFB { XrStructureType type; const void* next; XrPassthroughLayerFB layer; XrTriangleMeshFB mesh; XrSpace baseSpace; XrPosef pose; XrVector3f scale; } XrGeometryInstanceCreateInfoFB; typedef struct XrGeometryInstanceTransformFB { XrStructureType type; const void* next; XrSpace baseSpace; XrTime time; XrPosef pose; XrVector3f scale; } XrGeometryInstanceTransformFB; typedef struct XrPassthroughStyleFB { XrStructureType type; const void* next; float textureOpacityFactor; XrColor4f edgeColor; } XrPassthroughStyleFB; typedef struct XrPassthroughColorMapMonoToRgbaFB { XrStructureType type; const void* next; XrColor4f textureColorMap[256]; } XrPassthroughColorMapMonoToRgbaFB; typedef struct XrPassthroughColorMapMonoToMonoFB { XrStructureType type; const void* next; uint8_t textureColorMap[256]; } XrPassthroughColorMapMonoToMonoFB; typedef struct XrPassthroughBrightnessContrastSaturationFB { XrStructureType type; const void* next; float brightness; float contrast; float saturation; } XrPassthroughBrightnessContrastSaturationFB; typedef struct XrEventDataPassthroughStateChangedFB { XrStructureType type; const void* next; XrPassthroughStateChangedFlagsFB flags; } XrEventDataPassthroughStateChangedFB; typedef XrResult (*PFN_xrCreatePassthroughFB)(XrSession session, const XrPassthroughCreateInfoFB* createInfo, XrPassthroughFB* outPassthrough);
typedef XrResult (*PFN_xrDestroyPassthroughFB)(XrPassthroughFB passthrough);
typedef XrResult (*PFN_xrPassthroughStartFB)(XrPassthroughFB passthrough);
typedef XrResult (*PFN_xrPassthroughPauseFB)(XrPassthroughFB passthrough);
typedef XrResult (*PFN_xrCreatePassthroughLayerFB)(XrSession session, const XrPassthroughLayerCreateInfoFB* createInfo, XrPassthroughLayerFB* outLayer);
typedef XrResult (*PFN_xrDestroyPassthroughLayerFB)(XrPassthroughLayerFB layer);
typedef XrResult (*PFN_xrPassthroughLayerPauseFB)(XrPassthroughLayerFB layer);
typedef XrResult (*PFN_xrPassthroughLayerResumeFB)(XrPassthroughLayerFB layer);
typedef XrResult (*PFN_xrPassthroughLayerSetStyleFB)(XrPassthroughLayerFB layer, const XrPassthroughStyleFB* style);
typedef XrResult (*PFN_xrCreateGeometryInstanceFB)(XrSession session, const XrGeometryInstanceCreateInfoFB* createInfo, XrGeometryInstanceFB* outGeometryInstance);
typedef XrResult (*PFN_xrDestroyGeometryInstanceFB)(XrGeometryInstanceFB instance);
typedef XrResult (*PFN_xrGeometryInstanceSetTransformFB)(XrGeometryInstanceFB instance, const XrGeometryInstanceTransformFB* transformation);
XrResult  xrCreatePassthroughFB(XrSession session, const XrPassthroughCreateInfoFB* createInfo, XrPassthroughFB* outPassthrough);
XrResult  xrDestroyPassthroughFB(XrPassthroughFB passthrough);
XrResult  xrPassthroughStartFB(XrPassthroughFB passthrough);
XrResult  xrPassthroughPauseFB(XrPassthroughFB passthrough);
XrResult  xrCreatePassthroughLayerFB(XrSession session, const XrPassthroughLayerCreateInfoFB* createInfo, XrPassthroughLayerFB* outLayer);
XrResult  xrDestroyPassthroughLayerFB(XrPassthroughLayerFB layer);
XrResult  xrPassthroughLayerPauseFB(XrPassthroughLayerFB layer);
XrResult  xrPassthroughLayerResumeFB(XrPassthroughLayerFB layer);
XrResult  xrPassthroughLayerSetStyleFB(XrPassthroughLayerFB layer, const XrPassthroughStyleFB* style);
XrResult  xrCreateGeometryInstanceFB(XrSession session, const XrGeometryInstanceCreateInfoFB* createInfo, XrGeometryInstanceFB* outGeometryInstance);
XrResult  xrDestroyGeometryInstanceFB(XrGeometryInstanceFB instance);
XrResult  xrGeometryInstanceSetTransformFB(XrGeometryInstanceFB instance, const XrGeometryInstanceTransformFB* transformation);
#line 4596 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 4597 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef uint64_t XrRenderModelKeyFB; typedef XrFlags64 XrRenderModelFlagsFB; static const XrRenderModelFlagsFB XR_RENDER_MODEL_SUPPORTS_GLTF_2_0_SUBSET_1_BIT_FB = 0x00000001; static const XrRenderModelFlagsFB XR_RENDER_MODEL_SUPPORTS_GLTF_2_0_SUBSET_2_BIT_FB = 0x00000002; typedef struct XrRenderModelPathInfoFB { XrStructureType type; void* next; XrPath path; } XrRenderModelPathInfoFB; typedef struct XrRenderModelPropertiesFB { XrStructureType type; void* next; uint32_t vendorId; char modelName[64]; XrRenderModelKeyFB modelKey; uint32_t modelVersion; XrRenderModelFlagsFB flags; } XrRenderModelPropertiesFB; typedef struct XrRenderModelBufferFB { XrStructureType type; void* next; uint32_t bufferCapacityInput; uint32_t bufferCountOutput; uint8_t* buffer; } XrRenderModelBufferFB; typedef struct XrRenderModelLoadInfoFB { XrStructureType type; void* next; XrRenderModelKeyFB modelKey; } XrRenderModelLoadInfoFB; typedef struct XrSystemRenderModelPropertiesFB { XrStructureType type; void* next; XrBool32 supportsRenderModelLoading; } XrSystemRenderModelPropertiesFB; typedef struct XrRenderModelCapabilitiesRequestFB { XrStructureType type; void* next; XrRenderModelFlagsFB flags; } XrRenderModelCapabilitiesRequestFB; typedef XrResult (*PFN_xrEnumerateRenderModelPathsFB)(XrSession session, uint32_t pathCapacityInput, uint32_t* pathCountOutput, XrRenderModelPathInfoFB* paths);
typedef XrResult (*PFN_xrGetRenderModelPropertiesFB)(XrSession session, XrPath path, XrRenderModelPropertiesFB* properties);
typedef XrResult (*PFN_xrLoadRenderModelFB)(XrSession session, const XrRenderModelLoadInfoFB* info, XrRenderModelBufferFB* buffer);
XrResult  xrEnumerateRenderModelPathsFB(XrSession session, uint32_t pathCapacityInput, uint32_t* pathCountOutput, XrRenderModelPathInfoFB* paths);
XrResult  xrGetRenderModelPropertiesFB(XrSession session, XrPath path, XrRenderModelPropertiesFB* properties);
XrResult  xrLoadRenderModelFB(XrSession session, const XrRenderModelLoadInfoFB* info, XrRenderModelBufferFB* buffer);
#line 4680 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 4681 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrViewLocateFoveatedRenderingVARJO { XrStructureType type; const void* next; XrBool32 foveatedRenderingActive; } XrViewLocateFoveatedRenderingVARJO; typedef struct XrFoveatedViewConfigurationViewVARJO { XrStructureType type; void* next; XrBool32 foveatedRenderingActive; } XrFoveatedViewConfigurationViewVARJO; typedef struct XrSystemFoveatedRenderingPropertiesVARJO { XrStructureType type; void* next; XrBool32 supportsFoveatedRendering; } XrSystemFoveatedRenderingPropertiesVARJO; typedef struct XrCompositionLayerDepthTestVARJO { XrStructureType type; const void* next; float depthTestRangeNearZ; float depthTestRangeFarZ; } XrCompositionLayerDepthTestVARJO; typedef XrResult (*PFN_xrSetEnvironmentDepthEstimationVARJO)(XrSession session, XrBool32 enabled);
XrResult  xrSetEnvironmentDepthEstimationVARJO(XrSession session, XrBool32 enabled);
#line 4736 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 4737 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrSystemMarkerTrackingPropertiesVARJO { XrStructureType type; void* next; XrBool32 supportsMarkerTracking; } XrSystemMarkerTrackingPropertiesVARJO; typedef struct XrEventDataMarkerTrackingUpdateVARJO { XrStructureType type; const void* next; uint64_t markerId; XrBool32 isActive; XrBool32 isPredicted; XrTime time; } XrEventDataMarkerTrackingUpdateVARJO; typedef struct XrMarkerSpaceCreateInfoVARJO { XrStructureType type; const void* next; uint64_t markerId; XrPosef poseInMarkerSpace; } XrMarkerSpaceCreateInfoVARJO; typedef XrResult (*PFN_xrSetMarkerTrackingVARJO)(XrSession session, XrBool32 enabled);
typedef XrResult (*PFN_xrSetMarkerTrackingTimeoutVARJO)(XrSession session, uint64_t markerId, XrDuration timeout);
typedef XrResult (*PFN_xrSetMarkerTrackingPredictionVARJO)(XrSession session, uint64_t markerId, XrBool32 enable);
typedef XrResult (*PFN_xrGetMarkerSizeVARJO)(XrSession session, uint64_t markerId, XrExtent2Df* size);
typedef XrResult (*PFN_xrCreateMarkerSpaceVARJO)(XrSession session, const XrMarkerSpaceCreateInfoVARJO* createInfo, XrSpace* space);
XrResult  xrSetMarkerTrackingVARJO(XrSession session, XrBool32 enabled);
XrResult  xrSetMarkerTrackingTimeoutVARJO(XrSession session, uint64_t markerId, XrDuration timeout);
XrResult  xrSetMarkerTrackingPredictionVARJO(XrSession session, uint64_t markerId, XrBool32 enable);
XrResult  xrGetMarkerSizeVARJO(XrSession session, uint64_t markerId, XrExtent2Df* size);
XrResult  xrCreateMarkerSpaceVARJO(XrSession session, const XrMarkerSpaceCreateInfoVARJO* createInfo, XrSpace* space);
#line 4798 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 4799 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef XrResult (*PFN_xrSetViewOffsetVARJO)(XrSession session, float offset);
XrResult  xrSetViewOffsetVARJO(XrSession session, float offset);
#line 4813 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 4814 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef XrFlags64 XrFrameEndInfoFlagsML; static const XrFrameEndInfoFlagsML XR_FRAME_END_INFO_PROTECTED_BIT_ML = 0x00000001; static const XrFrameEndInfoFlagsML XR_FRAME_END_INFO_VIGNETTE_BIT_ML = 0x00000002; typedef struct XrFrameEndInfoML { XrStructureType type; const void* next; float focusDistance; XrFrameEndInfoFlagsML flags; } XrFrameEndInfoML; typedef XrFlags64 XrGlobalDimmerFrameEndInfoFlagsML; static const XrGlobalDimmerFrameEndInfoFlagsML XR_GLOBAL_DIMMER_FRAME_END_INFO_ENABLED_BIT_ML = 0x00000001; typedef struct XrGlobalDimmerFrameEndInfoML { XrStructureType type; const void* next; float dimmerValue; XrGlobalDimmerFrameEndInfoFlagsML flags; } XrGlobalDimmerFrameEndInfoML; typedef uint64_t XrMarkerML; typedef struct XrMarkerDetectorML_T* XrMarkerDetectorML; typedef enum XrMarkerDetectorProfileML { XR_MARKER_DETECTOR_PROFILE_DEFAULT_ML = 0, XR_MARKER_DETECTOR_PROFILE_SPEED_ML = 1, XR_MARKER_DETECTOR_PROFILE_ACCURACY_ML = 2, XR_MARKER_DETECTOR_PROFILE_SMALL_TARGETS_ML = 3, XR_MARKER_DETECTOR_PROFILE_LARGE_FOV_ML = 4, XR_MARKER_DETECTOR_PROFILE_CUSTOM_ML = 5, XR_MARKER_DETECTOR_PROFILE_MAX_ENUM_ML = 0x7FFFFFFF } XrMarkerDetectorProfileML; typedef enum XrMarkerTypeML { XR_MARKER_TYPE_ARUCO_ML = 0, XR_MARKER_TYPE_APRIL_TAG_ML = 1, XR_MARKER_TYPE_QR_ML = 2, XR_MARKER_TYPE_EAN_13_ML = 3, XR_MARKER_TYPE_UPC_A_ML = 4, XR_MARKER_TYPE_CODE_128_ML = 5, XR_MARKER_TYPE_MAX_ENUM_ML = 0x7FFFFFFF } XrMarkerTypeML; typedef enum XrMarkerArucoDictML { XR_MARKER_ARUCO_DICT_4X4_50_ML = 0, XR_MARKER_ARUCO_DICT_4X4_100_ML = 1, XR_MARKER_ARUCO_DICT_4X4_250_ML = 2, XR_MARKER_ARUCO_DICT_4X4_1000_ML = 3, XR_MARKER_ARUCO_DICT_5X5_50_ML = 4, XR_MARKER_ARUCO_DICT_5X5_100_ML = 5, XR_MARKER_ARUCO_DICT_5X5_250_ML = 6, XR_MARKER_ARUCO_DICT_5X5_1000_ML = 7, XR_MARKER_ARUCO_DICT_6X6_50_ML = 8, XR_MARKER_ARUCO_DICT_6X6_100_ML = 9, XR_MARKER_ARUCO_DICT_6X6_250_ML = 10, XR_MARKER_ARUCO_DICT_6X6_1000_ML = 11, XR_MARKER_ARUCO_DICT_7X7_50_ML = 12, XR_MARKER_ARUCO_DICT_7X7_100_ML = 13, XR_MARKER_ARUCO_DICT_7X7_250_ML = 14, XR_MARKER_ARUCO_DICT_7X7_1000_ML = 15, XR_MARKER_ARUCO_DICT_MAX_ENUM_ML = 0x7FFFFFFF } XrMarkerArucoDictML; typedef enum XrMarkerAprilTagDictML { XR_MARKER_APRIL_TAG_DICT_16H5_ML = 0, XR_MARKER_APRIL_TAG_DICT_25H9_ML = 1, XR_MARKER_APRIL_TAG_DICT_36H10_ML = 2, XR_MARKER_APRIL_TAG_DICT_36H11_ML = 3, XR_MARKER_APRIL_TAG_DICT_MAX_ENUM_ML = 0x7FFFFFFF } XrMarkerAprilTagDictML; typedef enum XrMarkerDetectorFpsML { XR_MARKER_DETECTOR_FPS_LOW_ML = 0, XR_MARKER_DETECTOR_FPS_MEDIUM_ML = 1, XR_MARKER_DETECTOR_FPS_HIGH_ML = 2, XR_MARKER_DETECTOR_FPS_MAX_ML = 3, XR_MARKER_DETECTOR_FPS_MAX_ENUM_ML = 0x7FFFFFFF } XrMarkerDetectorFpsML; typedef enum XrMarkerDetectorResolutionML { XR_MARKER_DETECTOR_RESOLUTION_LOW_ML = 0, XR_MARKER_DETECTOR_RESOLUTION_MEDIUM_ML = 1, XR_MARKER_DETECTOR_RESOLUTION_HIGH_ML = 2, XR_MARKER_DETECTOR_RESOLUTION_MAX_ENUM_ML = 0x7FFFFFFF } XrMarkerDetectorResolutionML; typedef enum XrMarkerDetectorCameraML { XR_MARKER_DETECTOR_CAMERA_RGB_CAMERA_ML = 0, XR_MARKER_DETECTOR_CAMERA_WORLD_CAMERAS_ML = 1, XR_MARKER_DETECTOR_CAMERA_MAX_ENUM_ML = 0x7FFFFFFF } XrMarkerDetectorCameraML; typedef enum XrMarkerDetectorCornerRefineMethodML { XR_MARKER_DETECTOR_CORNER_REFINE_METHOD_NONE_ML = 0, XR_MARKER_DETECTOR_CORNER_REFINE_METHOD_SUBPIX_ML = 1, XR_MARKER_DETECTOR_CORNER_REFINE_METHOD_CONTOUR_ML = 2, XR_MARKER_DETECTOR_CORNER_REFINE_METHOD_APRIL_TAG_ML = 3, XR_MARKER_DETECTOR_CORNER_REFINE_METHOD_MAX_ENUM_ML = 0x7FFFFFFF } XrMarkerDetectorCornerRefineMethodML; typedef enum XrMarkerDetectorFullAnalysisIntervalML { XR_MARKER_DETECTOR_FULL_ANALYSIS_INTERVAL_MAX_ML = 0, XR_MARKER_DETECTOR_FULL_ANALYSIS_INTERVAL_FAST_ML = 1, XR_MARKER_DETECTOR_FULL_ANALYSIS_INTERVAL_MEDIUM_ML = 2, XR_MARKER_DETECTOR_FULL_ANALYSIS_INTERVAL_SLOW_ML = 3, XR_MARKER_DETECTOR_FULL_ANALYSIS_INTERVAL_MAX_ENUM_ML = 0x7FFFFFFF } XrMarkerDetectorFullAnalysisIntervalML; typedef enum XrMarkerDetectorStatusML { XR_MARKER_DETECTOR_STATUS_PENDING_ML = 0, XR_MARKER_DETECTOR_STATUS_READY_ML = 1, XR_MARKER_DETECTOR_STATUS_ERROR_ML = 2, XR_MARKER_DETECTOR_STATUS_MAX_ENUM_ML = 0x7FFFFFFF } XrMarkerDetectorStatusML; typedef struct XrSystemMarkerUnderstandingPropertiesML { XrStructureType type; void* next; XrBool32 supportsMarkerUnderstanding; } XrSystemMarkerUnderstandingPropertiesML; typedef struct XrMarkerDetectorCreateInfoML { XrStructureType type; const void* next; XrMarkerDetectorProfileML profile; XrMarkerTypeML markerType; } XrMarkerDetectorCreateInfoML; typedef struct XrMarkerDetectorArucoInfoML { XrStructureType type; const void* next; XrMarkerArucoDictML arucoDict; } XrMarkerDetectorArucoInfoML; typedef struct XrMarkerDetectorSizeInfoML { XrStructureType type; const void* next; float markerLength; } XrMarkerDetectorSizeInfoML; typedef struct XrMarkerDetectorAprilTagInfoML { XrStructureType type; const void* next; XrMarkerAprilTagDictML aprilTagDict; } XrMarkerDetectorAprilTagInfoML; typedef struct XrMarkerDetectorCustomProfileInfoML { XrStructureType type; const void* next; XrMarkerDetectorFpsML fpsHint; XrMarkerDetectorResolutionML resolutionHint; XrMarkerDetectorCameraML cameraHint; XrMarkerDetectorCornerRefineMethodML cornerRefineMethod; XrBool32 useEdgeRefinement; XrMarkerDetectorFullAnalysisIntervalML fullAnalysisIntervalHint; } XrMarkerDetectorCustomProfileInfoML; typedef struct XrMarkerDetectorSnapshotInfoML { XrStructureType type; const void* next; } XrMarkerDetectorSnapshotInfoML; typedef struct XrMarkerDetectorStateML { XrStructureType type; void* next; XrMarkerDetectorStatusML state; } XrMarkerDetectorStateML; typedef struct XrMarkerSpaceCreateInfoML { XrStructureType type; const void* next; XrMarkerDetectorML markerDetector; XrMarkerML marker; XrPosef poseInMarkerSpace; } XrMarkerSpaceCreateInfoML; typedef XrResult (*PFN_xrCreateMarkerDetectorML)(XrSession session, const XrMarkerDetectorCreateInfoML* createInfo, XrMarkerDetectorML* markerDetector);
typedef XrResult (*PFN_xrDestroyMarkerDetectorML)(XrMarkerDetectorML markerDetector);
typedef XrResult (*PFN_xrSnapshotMarkerDetectorML)(XrMarkerDetectorML markerDetector, XrMarkerDetectorSnapshotInfoML* snapshotInfo);
typedef XrResult (*PFN_xrGetMarkerDetectorStateML)(XrMarkerDetectorML markerDetector, XrMarkerDetectorStateML* state);
typedef XrResult (*PFN_xrGetMarkersML)(XrMarkerDetectorML markerDetector, uint32_t markerCapacityInput, uint32_t* markerCountOutput, XrMarkerML* markers);
typedef XrResult (*PFN_xrGetMarkerReprojectionErrorML)(XrMarkerDetectorML markerDetector, XrMarkerML marker, float* reprojectionErrorMeters);
typedef XrResult (*PFN_xrGetMarkerLengthML)(XrMarkerDetectorML markerDetector, XrMarkerML marker, float* meters);
typedef XrResult (*PFN_xrGetMarkerNumberML)(XrMarkerDetectorML markerDetector, XrMarkerML marker, uint64_t* number);
typedef XrResult (*PFN_xrGetMarkerStringML)(XrMarkerDetectorML markerDetector, XrMarkerML marker, uint32_t bufferCapacityInput, uint32_t* bufferCountOutput, char* buffer);
typedef XrResult (*PFN_xrCreateMarkerSpaceML)(XrSession session, const XrMarkerSpaceCreateInfoML* createInfo, XrSpace* space);
XrResult  xrCreateMarkerDetectorML(XrSession session, const XrMarkerDetectorCreateInfoML* createInfo, XrMarkerDetectorML* markerDetector);
XrResult  xrDestroyMarkerDetectorML(XrMarkerDetectorML markerDetector);
XrResult  xrSnapshotMarkerDetectorML(XrMarkerDetectorML markerDetector, XrMarkerDetectorSnapshotInfoML* snapshotInfo);
XrResult  xrGetMarkerDetectorStateML(XrMarkerDetectorML markerDetector, XrMarkerDetectorStateML* state);
XrResult  xrGetMarkersML(XrMarkerDetectorML markerDetector, uint32_t markerCapacityInput, uint32_t* markerCountOutput, XrMarkerML* markers);
XrResult  xrGetMarkerReprojectionErrorML(XrMarkerDetectorML markerDetector, XrMarkerML marker, float* reprojectionErrorMeters);
XrResult  xrGetMarkerLengthML(XrMarkerDetectorML markerDetector, XrMarkerML marker, float* meters);
XrResult  xrGetMarkerNumberML(XrMarkerDetectorML markerDetector, XrMarkerML marker, uint64_t* number);
XrResult  xrGetMarkerStringML(XrMarkerDetectorML markerDetector, XrMarkerML marker, uint32_t bufferCapacityInput, uint32_t* bufferCountOutput, char* buffer);
XrResult  xrCreateMarkerSpaceML(XrSession session, const XrMarkerSpaceCreateInfoML* createInfo, XrSpace* space);
#line 5093 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 5094 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrExportedLocalizationMapML_T* XrExportedLocalizationMapML; typedef enum XrLocalizationMapStateML { XR_LOCALIZATION_MAP_STATE_NOT_LOCALIZED_ML = 0, XR_LOCALIZATION_MAP_STATE_LOCALIZED_ML = 1, XR_LOCALIZATION_MAP_STATE_LOCALIZATION_PENDING_ML = 2, XR_LOCALIZATION_MAP_STATE_LOCALIZATION_SLEEPING_BEFORE_RETRY_ML = 3, XR_LOCALIZATION_MAP_STATE_MAX_ENUM_ML = 0x7FFFFFFF } XrLocalizationMapStateML; typedef enum XrLocalizationMapTypeML { XR_LOCALIZATION_MAP_TYPE_ON_DEVICE_ML = 0, XR_LOCALIZATION_MAP_TYPE_CLOUD_ML = 1, XR_LOCALIZATION_MAP_TYPE_MAX_ENUM_ML = 0x7FFFFFFF } XrLocalizationMapTypeML; typedef enum XrLocalizationMapConfidenceML { XR_LOCALIZATION_MAP_CONFIDENCE_POOR_ML = 0, XR_LOCALIZATION_MAP_CONFIDENCE_FAIR_ML = 1, XR_LOCALIZATION_MAP_CONFIDENCE_GOOD_ML = 2, XR_LOCALIZATION_MAP_CONFIDENCE_EXCELLENT_ML = 3, XR_LOCALIZATION_MAP_CONFIDENCE_MAX_ENUM_ML = 0x7FFFFFFF } XrLocalizationMapConfidenceML; typedef XrFlags64 XrLocalizationMapErrorFlagsML; static const XrLocalizationMapErrorFlagsML XR_LOCALIZATION_MAP_ERROR_UNKNOWN_BIT_ML = 0x00000001; static const XrLocalizationMapErrorFlagsML XR_LOCALIZATION_MAP_ERROR_OUT_OF_MAPPED_AREA_BIT_ML = 0x00000002; static const XrLocalizationMapErrorFlagsML XR_LOCALIZATION_MAP_ERROR_LOW_FEATURE_COUNT_BIT_ML = 0x00000004; static const XrLocalizationMapErrorFlagsML XR_LOCALIZATION_MAP_ERROR_EXCESSIVE_MOTION_BIT_ML = 0x00000008; static const XrLocalizationMapErrorFlagsML XR_LOCALIZATION_MAP_ERROR_LOW_LIGHT_BIT_ML = 0x00000010; static const XrLocalizationMapErrorFlagsML XR_LOCALIZATION_MAP_ERROR_HEADPOSE_BIT_ML = 0x00000020; typedef struct XrLocalizationMapML { XrStructureType type; void* next; char name[64]; XrUuidEXT mapUuid; XrLocalizationMapTypeML mapType; } XrLocalizationMapML; typedef struct XrEventDataLocalizationChangedML { XrStructureType type; const void* next; XrSession session; XrLocalizationMapStateML state; XrLocalizationMapML map; XrLocalizationMapConfidenceML confidence; XrLocalizationMapErrorFlagsML errorFlags; } XrEventDataLocalizationChangedML; typedef struct XrLocalizationMapQueryInfoBaseHeaderML { XrStructureType type; const void* next; } XrLocalizationMapQueryInfoBaseHeaderML; typedef struct XrMapLocalizationRequestInfoML { XrStructureType type; const void* next; XrUuidEXT mapUuid; } XrMapLocalizationRequestInfoML; typedef struct XrLocalizationMapImportInfoML { XrStructureType type; const void* next; uint32_t size; char* data; } XrLocalizationMapImportInfoML; typedef struct XrLocalizationEnableEventsInfoML { XrStructureType type; const void* next; XrBool32 enabled; } XrLocalizationEnableEventsInfoML; typedef XrResult (*PFN_xrEnableLocalizationEventsML)(XrSession session, const XrLocalizationEnableEventsInfoML * info);
typedef XrResult (*PFN_xrQueryLocalizationMapsML)(XrSession session, const XrLocalizationMapQueryInfoBaseHeaderML* queryInfo, uint32_t mapCapacityInput, uint32_t * mapCountOutput, XrLocalizationMapML* maps);
typedef XrResult (*PFN_xrRequestMapLocalizationML)(XrSession session, const XrMapLocalizationRequestInfoML* requestInfo);
typedef XrResult (*PFN_xrImportLocalizationMapML)(XrSession session, const XrLocalizationMapImportInfoML* importInfo, XrUuidEXT* mapUuid);
typedef XrResult (*PFN_xrCreateExportedLocalizationMapML)(XrSession session, const XrUuidEXT* mapUuid, XrExportedLocalizationMapML* map);
typedef XrResult (*PFN_xrDestroyExportedLocalizationMapML)(XrExportedLocalizationMapML map);
typedef XrResult (*PFN_xrGetExportedLocalizationMapDataML)(XrExportedLocalizationMapML map, uint32_t bufferCapacityInput, uint32_t* bufferCountOutput, char* buffer);
XrResult  xrEnableLocalizationEventsML(XrSession session, const XrLocalizationEnableEventsInfoML * info);
XrResult  xrQueryLocalizationMapsML(XrSession session, const XrLocalizationMapQueryInfoBaseHeaderML* queryInfo, uint32_t mapCapacityInput, uint32_t * mapCountOutput, XrLocalizationMapML* maps);
XrResult  xrRequestMapLocalizationML(XrSession session, const XrMapLocalizationRequestInfoML* requestInfo);
XrResult  xrImportLocalizationMapML(XrSession session, const XrLocalizationMapImportInfoML* importInfo, XrUuidEXT* mapUuid);
XrResult  xrCreateExportedLocalizationMapML(XrSession session, const XrUuidEXT* mapUuid, XrExportedLocalizationMapML* map);
XrResult  xrDestroyExportedLocalizationMapML(XrExportedLocalizationMapML map);
XrResult  xrGetExportedLocalizationMapDataML(XrExportedLocalizationMapML map, uint32_t bufferCapacityInput, uint32_t* bufferCountOutput, char* buffer);
#line 5220 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 5221 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrFutureEXT_T* XrFutureEXT; typedef enum XrSpatialAnchorConfidenceML { XR_SPATIAL_ANCHOR_CONFIDENCE_LOW_ML = 0, XR_SPATIAL_ANCHOR_CONFIDENCE_MEDIUM_ML = 1, XR_SPATIAL_ANCHOR_CONFIDENCE_HIGH_ML = 2, XR_SPATIAL_ANCHOR_CONFIDENCE_MAX_ENUM_ML = 0x7FFFFFFF } XrSpatialAnchorConfidenceML; typedef struct XrSpatialAnchorsCreateInfoBaseHeaderML { XrStructureType type; const void* next; } XrSpatialAnchorsCreateInfoBaseHeaderML; typedef struct XrSpatialAnchorsCreateInfoFromPoseML { XrStructureType type; const void* next; XrSpace baseSpace; XrPosef poseInBaseSpace; XrTime time; } XrSpatialAnchorsCreateInfoFromPoseML; typedef struct XrCreateSpatialAnchorsCompletionML { XrStructureType type; void* next; XrResult futureResult; uint32_t spaceCount; XrSpace* spaces; } XrCreateSpatialAnchorsCompletionML; typedef struct XrSpatialAnchorStateML { XrStructureType type; void* next; XrSpatialAnchorConfidenceML confidence; } XrSpatialAnchorStateML; typedef XrResult (*PFN_xrCreateSpatialAnchorsAsyncML)(XrSession session, const XrSpatialAnchorsCreateInfoBaseHeaderML* createInfo, XrFutureEXT* future);
typedef XrResult (*PFN_xrCreateSpatialAnchorsCompleteML)(XrSession session, XrFutureEXT future, XrCreateSpatialAnchorsCompletionML* completion);
typedef XrResult (*PFN_xrGetSpatialAnchorStateML)(XrSpace anchor, XrSpatialAnchorStateML* state);
XrResult  xrCreateSpatialAnchorsAsyncML(XrSession session, const XrSpatialAnchorsCreateInfoBaseHeaderML* createInfo, XrFutureEXT* future);
XrResult  xrCreateSpatialAnchorsCompleteML(XrSession session, XrFutureEXT future, XrCreateSpatialAnchorsCompletionML* completion);
XrResult  xrGetSpatialAnchorStateML(XrSpace anchor, XrSpatialAnchorStateML* state);
#line 5282 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 5283 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrSpatialAnchorsStorageML_T* XrSpatialAnchorsStorageML; typedef struct XrSpatialAnchorsCreateStorageInfoML { XrStructureType type; const void* next; } XrSpatialAnchorsCreateStorageInfoML; typedef struct XrSpatialAnchorsQueryInfoBaseHeaderML { XrStructureType type; const void* next; } XrSpatialAnchorsQueryInfoBaseHeaderML; typedef struct XrSpatialAnchorsQueryInfoRadiusML { XrStructureType type; const void* next; XrSpace baseSpace; XrVector3f center; XrTime time; float radius; } XrSpatialAnchorsQueryInfoRadiusML; typedef struct XrSpatialAnchorsQueryCompletionML { XrStructureType type; void* next; XrResult futureResult; uint32_t uuidCapacityInput; uint32_t uuidCountOutput; XrUuidEXT* uuids; } XrSpatialAnchorsQueryCompletionML; typedef struct XrSpatialAnchorsCreateInfoFromUuidsML { XrStructureType type; const void* next; XrSpatialAnchorsStorageML storage; uint32_t uuidCount; const XrUuidEXT* uuids; } XrSpatialAnchorsCreateInfoFromUuidsML; typedef struct XrSpatialAnchorsPublishInfoML { XrStructureType type; const void* next; uint32_t anchorCount; const XrSpace* anchors; uint64_t expiration; } XrSpatialAnchorsPublishInfoML; typedef struct XrSpatialAnchorsPublishCompletionML { XrStructureType type; void* next; XrResult futureResult; uint32_t uuidCount; XrUuidEXT* uuids; } XrSpatialAnchorsPublishCompletionML; typedef struct XrSpatialAnchorsDeleteInfoML { XrStructureType type; const void* next; uint32_t uuidCount; const XrUuidEXT* uuids; } XrSpatialAnchorsDeleteInfoML; typedef struct XrSpatialAnchorsDeleteCompletionML { XrStructureType type; void* next; XrResult futureResult; } XrSpatialAnchorsDeleteCompletionML; typedef struct XrSpatialAnchorsUpdateExpirationInfoML { XrStructureType type; const void* next; uint32_t uuidCount; const XrUuidEXT* uuids; uint64_t expiration; } XrSpatialAnchorsUpdateExpirationInfoML; typedef struct XrSpatialAnchorsUpdateExpirationCompletionML { XrStructureType type; void* next; XrResult futureResult; } XrSpatialAnchorsUpdateExpirationCompletionML; typedef struct XrSpatialAnchorCompletionResultML { XrUuidEXT uuid; XrResult result; } XrSpatialAnchorCompletionResultML; typedef struct XrSpatialAnchorsPublishCompletionDetailsML { XrStructureType type; void* next; uint32_t resultCount; XrSpatialAnchorCompletionResultML* results; } XrSpatialAnchorsPublishCompletionDetailsML; typedef struct XrSpatialAnchorsDeleteCompletionDetailsML { XrStructureType type; void* next; uint32_t resultCount; XrSpatialAnchorCompletionResultML* results; } XrSpatialAnchorsDeleteCompletionDetailsML; typedef struct XrSpatialAnchorsUpdateExpirationCompletionDetailsML { XrStructureType type; void* next; uint32_t resultCount; XrSpatialAnchorCompletionResultML* results; } XrSpatialAnchorsUpdateExpirationCompletionDetailsML; typedef XrResult (*PFN_xrCreateSpatialAnchorsStorageML)(XrSession session, const XrSpatialAnchorsCreateStorageInfoML* createInfo, XrSpatialAnchorsStorageML* storage);
typedef XrResult (*PFN_xrDestroySpatialAnchorsStorageML)(XrSpatialAnchorsStorageML storage);
typedef XrResult (*PFN_xrQuerySpatialAnchorsAsyncML)(XrSpatialAnchorsStorageML storage, const XrSpatialAnchorsQueryInfoBaseHeaderML* queryInfo, XrFutureEXT* future);
typedef XrResult (*PFN_xrQuerySpatialAnchorsCompleteML)(XrSpatialAnchorsStorageML storage, XrFutureEXT future, XrSpatialAnchorsQueryCompletionML* completion);
typedef XrResult (*PFN_xrPublishSpatialAnchorsAsyncML)(XrSpatialAnchorsStorageML storage, const XrSpatialAnchorsPublishInfoML* publishInfo, XrFutureEXT* future);
typedef XrResult (*PFN_xrPublishSpatialAnchorsCompleteML)(XrSpatialAnchorsStorageML storage, XrFutureEXT future, XrSpatialAnchorsPublishCompletionML* completion);
typedef XrResult (*PFN_xrDeleteSpatialAnchorsAsyncML)(XrSpatialAnchorsStorageML storage, const XrSpatialAnchorsDeleteInfoML* deleteInfo, XrFutureEXT* future);
typedef XrResult (*PFN_xrDeleteSpatialAnchorsCompleteML)(XrSpatialAnchorsStorageML storage, XrFutureEXT future, XrSpatialAnchorsDeleteCompletionML* completion);
typedef XrResult (*PFN_xrUpdateSpatialAnchorsExpirationAsyncML)(XrSpatialAnchorsStorageML storage, const XrSpatialAnchorsUpdateExpirationInfoML* updateInfo, XrFutureEXT* future);
typedef XrResult (*PFN_xrUpdateSpatialAnchorsExpirationCompleteML)(XrSpatialAnchorsStorageML storage, XrFutureEXT future, XrSpatialAnchorsUpdateExpirationCompletionML* completion);
XrResult  xrCreateSpatialAnchorsStorageML(XrSession session, const XrSpatialAnchorsCreateStorageInfoML* createInfo, XrSpatialAnchorsStorageML* storage);
XrResult  xrDestroySpatialAnchorsStorageML(XrSpatialAnchorsStorageML storage);
XrResult  xrQuerySpatialAnchorsAsyncML(XrSpatialAnchorsStorageML storage, const XrSpatialAnchorsQueryInfoBaseHeaderML* queryInfo, XrFutureEXT* future);
XrResult  xrQuerySpatialAnchorsCompleteML(XrSpatialAnchorsStorageML storage, XrFutureEXT future, XrSpatialAnchorsQueryCompletionML* completion);
XrResult  xrPublishSpatialAnchorsAsyncML(XrSpatialAnchorsStorageML storage, const XrSpatialAnchorsPublishInfoML* publishInfo, XrFutureEXT* future);
XrResult  xrPublishSpatialAnchorsCompleteML(XrSpatialAnchorsStorageML storage, XrFutureEXT future, XrSpatialAnchorsPublishCompletionML* completion);
XrResult  xrDeleteSpatialAnchorsAsyncML(XrSpatialAnchorsStorageML storage, const XrSpatialAnchorsDeleteInfoML* deleteInfo, XrFutureEXT* future);
XrResult  xrDeleteSpatialAnchorsCompleteML(XrSpatialAnchorsStorageML storage, XrFutureEXT future, XrSpatialAnchorsDeleteCompletionML* completion);
XrResult  xrUpdateSpatialAnchorsExpirationAsyncML(XrSpatialAnchorsStorageML storage, const XrSpatialAnchorsUpdateExpirationInfoML* updateInfo, XrFutureEXT* future);
XrResult  xrUpdateSpatialAnchorsExpirationCompleteML(XrSpatialAnchorsStorageML storage, XrFutureEXT future, XrSpatialAnchorsUpdateExpirationCompletionML* completion);
#line 5459 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 5460 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrSpatialAnchorStoreConnectionMSFT_T* XrSpatialAnchorStoreConnectionMSFT; typedef struct XrSpatialAnchorPersistenceNameMSFT { char name[256]; } XrSpatialAnchorPersistenceNameMSFT; typedef struct XrSpatialAnchorPersistenceInfoMSFT { XrStructureType type; const void* next; XrSpatialAnchorPersistenceNameMSFT spatialAnchorPersistenceName; XrSpatialAnchorMSFT spatialAnchor; } XrSpatialAnchorPersistenceInfoMSFT; typedef struct XrSpatialAnchorFromPersistedAnchorCreateInfoMSFT { XrStructureType type; const void* next; XrSpatialAnchorStoreConnectionMSFT spatialAnchorStore; XrSpatialAnchorPersistenceNameMSFT spatialAnchorPersistenceName; } XrSpatialAnchorFromPersistedAnchorCreateInfoMSFT; typedef XrResult (*PFN_xrCreateSpatialAnchorStoreConnectionMSFT)(XrSession session, XrSpatialAnchorStoreConnectionMSFT* spatialAnchorStore);
typedef XrResult (*PFN_xrDestroySpatialAnchorStoreConnectionMSFT)(XrSpatialAnchorStoreConnectionMSFT spatialAnchorStore);
typedef XrResult (*PFN_xrPersistSpatialAnchorMSFT)(XrSpatialAnchorStoreConnectionMSFT spatialAnchorStore, const XrSpatialAnchorPersistenceInfoMSFT* spatialAnchorPersistenceInfo);
typedef XrResult (*PFN_xrEnumeratePersistedSpatialAnchorNamesMSFT)(XrSpatialAnchorStoreConnectionMSFT spatialAnchorStore, uint32_t spatialAnchorNameCapacityInput, uint32_t* spatialAnchorNameCountOutput, XrSpatialAnchorPersistenceNameMSFT* spatialAnchorNames);
typedef XrResult (*PFN_xrCreateSpatialAnchorFromPersistedNameMSFT)(XrSession session, const XrSpatialAnchorFromPersistedAnchorCreateInfoMSFT* spatialAnchorCreateInfo, XrSpatialAnchorMSFT* spatialAnchor);
typedef XrResult (*PFN_xrUnpersistSpatialAnchorMSFT)(XrSpatialAnchorStoreConnectionMSFT spatialAnchorStore, const XrSpatialAnchorPersistenceNameMSFT* spatialAnchorPersistenceName);
typedef XrResult (*PFN_xrClearSpatialAnchorStoreMSFT)(XrSpatialAnchorStoreConnectionMSFT spatialAnchorStore);
XrResult  xrCreateSpatialAnchorStoreConnectionMSFT(XrSession session, XrSpatialAnchorStoreConnectionMSFT* spatialAnchorStore);
XrResult  xrDestroySpatialAnchorStoreConnectionMSFT(XrSpatialAnchorStoreConnectionMSFT spatialAnchorStore);
XrResult  xrPersistSpatialAnchorMSFT(XrSpatialAnchorStoreConnectionMSFT spatialAnchorStore, const XrSpatialAnchorPersistenceInfoMSFT* spatialAnchorPersistenceInfo);
XrResult  xrEnumeratePersistedSpatialAnchorNamesMSFT(XrSpatialAnchorStoreConnectionMSFT spatialAnchorStore, uint32_t spatialAnchorNameCapacityInput, uint32_t* spatialAnchorNameCountOutput, XrSpatialAnchorPersistenceNameMSFT* spatialAnchorNames);
XrResult  xrCreateSpatialAnchorFromPersistedNameMSFT(XrSession session, const XrSpatialAnchorFromPersistedAnchorCreateInfoMSFT* spatialAnchorCreateInfo, XrSpatialAnchorMSFT* spatialAnchor);
XrResult  xrUnpersistSpatialAnchorMSFT(XrSpatialAnchorStoreConnectionMSFT spatialAnchorStore, const XrSpatialAnchorPersistenceNameMSFT* spatialAnchorPersistenceName);
XrResult  xrClearSpatialAnchorStoreMSFT(XrSpatialAnchorStoreConnectionMSFT spatialAnchorStore);
#line 5525 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 5526 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef enum XrSceneMarkerTypeMSFT { XR_SCENE_MARKER_TYPE_QR_CODE_MSFT = 1, XR_SCENE_MARKER_TYPE_MAX_ENUM_MSFT = 0x7FFFFFFF } XrSceneMarkerTypeMSFT; typedef enum XrSceneMarkerQRCodeSymbolTypeMSFT { XR_SCENE_MARKER_QR_CODE_SYMBOL_TYPE_QR_CODE_MSFT = 1, XR_SCENE_MARKER_QR_CODE_SYMBOL_TYPE_MICRO_QR_CODE_MSFT = 2, XR_SCENE_MARKER_QRCODE_SYMBOL_TYPE_MAX_ENUM_MSFT = 0x7FFFFFFF } XrSceneMarkerQRCodeSymbolTypeMSFT; typedef struct XrSceneMarkerMSFT { XrSceneMarkerTypeMSFT markerType; XrTime lastSeenTime; XrOffset2Df center; XrExtent2Df size; } XrSceneMarkerMSFT; typedef struct XrSceneMarkersMSFT { XrStructureType type; const void* next; uint32_t sceneMarkerCapacityInput; XrSceneMarkerMSFT* sceneMarkers; } XrSceneMarkersMSFT; typedef struct XrSceneMarkerTypeFilterMSFT { XrStructureType type; const void* next; uint32_t markerTypeCount; XrSceneMarkerTypeMSFT* markerTypes; } XrSceneMarkerTypeFilterMSFT; typedef struct XrSceneMarkerQRCodeMSFT { XrSceneMarkerQRCodeSymbolTypeMSFT symbolType; uint8_t version; } XrSceneMarkerQRCodeMSFT; typedef struct XrSceneMarkerQRCodesMSFT { XrStructureType type; const void* next; uint32_t qrCodeCapacityInput; XrSceneMarkerQRCodeMSFT* qrCodes; } XrSceneMarkerQRCodesMSFT; typedef XrResult (*PFN_xrGetSceneMarkerRawDataMSFT)(XrSceneMSFT scene, const XrUuidMSFT* markerId, uint32_t bufferCapacityInput, uint32_t* bufferCountOutput, uint8_t* buffer);
typedef XrResult (*PFN_xrGetSceneMarkerDecodedStringMSFT)(XrSceneMSFT scene, const XrUuidMSFT* markerId, uint32_t bufferCapacityInput, uint32_t* bufferCountOutput, char* buffer);
XrResult  xrGetSceneMarkerRawDataMSFT(XrSceneMSFT scene, const XrUuidMSFT* markerId, uint32_t bufferCapacityInput, uint32_t* bufferCountOutput, uint8_t* buffer);
XrResult  xrGetSceneMarkerDecodedStringMSFT(XrSceneMSFT scene, const XrUuidMSFT* markerId, uint32_t bufferCapacityInput, uint32_t* bufferCountOutput, char* buffer);
#line 5598 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 5599 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef enum XrHandForearmJointULTRALEAP { XR_HAND_FOREARM_JOINT_PALM_ULTRALEAP = 0, XR_HAND_FOREARM_JOINT_WRIST_ULTRALEAP = 1, XR_HAND_FOREARM_JOINT_THUMB_METACARPAL_ULTRALEAP = 2, XR_HAND_FOREARM_JOINT_THUMB_PROXIMAL_ULTRALEAP = 3, XR_HAND_FOREARM_JOINT_THUMB_DISTAL_ULTRALEAP = 4, XR_HAND_FOREARM_JOINT_THUMB_TIP_ULTRALEAP = 5, XR_HAND_FOREARM_JOINT_INDEX_METACARPAL_ULTRALEAP = 6, XR_HAND_FOREARM_JOINT_INDEX_PROXIMAL_ULTRALEAP = 7, XR_HAND_FOREARM_JOINT_INDEX_INTERMEDIATE_ULTRALEAP = 8, XR_HAND_FOREARM_JOINT_INDEX_DISTAL_ULTRALEAP = 9, XR_HAND_FOREARM_JOINT_INDEX_TIP_ULTRALEAP = 10, XR_HAND_FOREARM_JOINT_MIDDLE_METACARPAL_ULTRALEAP = 11, XR_HAND_FOREARM_JOINT_MIDDLE_PROXIMAL_ULTRALEAP = 12, XR_HAND_FOREARM_JOINT_MIDDLE_INTERMEDIATE_ULTRALEAP = 13, XR_HAND_FOREARM_JOINT_MIDDLE_DISTAL_ULTRALEAP = 14, XR_HAND_FOREARM_JOINT_MIDDLE_TIP_ULTRALEAP = 15, XR_HAND_FOREARM_JOINT_RING_METACARPAL_ULTRALEAP = 16, XR_HAND_FOREARM_JOINT_RING_PROXIMAL_ULTRALEAP = 17, XR_HAND_FOREARM_JOINT_RING_INTERMEDIATE_ULTRALEAP = 18, XR_HAND_FOREARM_JOINT_RING_DISTAL_ULTRALEAP = 19, XR_HAND_FOREARM_JOINT_RING_TIP_ULTRALEAP = 20, XR_HAND_FOREARM_JOINT_LITTLE_METACARPAL_ULTRALEAP = 21, XR_HAND_FOREARM_JOINT_LITTLE_PROXIMAL_ULTRALEAP = 22, XR_HAND_FOREARM_JOINT_LITTLE_INTERMEDIATE_ULTRALEAP = 23, XR_HAND_FOREARM_JOINT_LITTLE_DISTAL_ULTRALEAP = 24, XR_HAND_FOREARM_JOINT_LITTLE_TIP_ULTRALEAP = 25, XR_HAND_FOREARM_JOINT_ELBOW_ULTRALEAP = 26, XR_HAND_FOREARM_JOINT_MAX_ENUM_ULTRALEAP = 0x7FFFFFFF } XrHandForearmJointULTRALEAP; typedef enum XrSpaceQueryActionFB { XR_SPACE_QUERY_ACTION_LOAD_FB = 0, XR_SPACE_QUERY_ACTION_MAX_ENUM_FB = 0x7FFFFFFF } XrSpaceQueryActionFB; typedef enum XrSpaceStorageLocationFB { XR_SPACE_STORAGE_LOCATION_INVALID_FB = 0, XR_SPACE_STORAGE_LOCATION_LOCAL_FB = 1, XR_SPACE_STORAGE_LOCATION_CLOUD_FB = 2, XR_SPACE_STORAGE_LOCATION_MAX_ENUM_FB = 0x7FFFFFFF } XrSpaceStorageLocationFB; typedef struct XrSpaceQueryInfoBaseHeaderFB { XrStructureType type; const void* next; } XrSpaceQueryInfoBaseHeaderFB; typedef struct XrSpaceFilterInfoBaseHeaderFB { XrStructureType type; const void* next; } XrSpaceFilterInfoBaseHeaderFB; typedef struct XrSpaceQueryInfoFB { XrStructureType type; const void* next; XrSpaceQueryActionFB queryAction; uint32_t maxResultCount; XrDuration timeout; const XrSpaceFilterInfoBaseHeaderFB* filter; const XrSpaceFilterInfoBaseHeaderFB* excludeFilter; } XrSpaceQueryInfoFB; typedef struct XrSpaceStorageLocationFilterInfoFB { XrStructureType type; const void* next; XrSpaceStorageLocationFB location; } XrSpaceStorageLocationFilterInfoFB; typedef struct XrSpaceUuidFilterInfoFB { XrStructureType type; const void* next; uint32_t uuidCount; XrUuidEXT* uuids; } XrSpaceUuidFilterInfoFB; typedef struct XrSpaceComponentFilterInfoFB { XrStructureType type; const void* next; XrSpaceComponentTypeFB componentType; } XrSpaceComponentFilterInfoFB; typedef struct XrSpaceQueryResultFB { XrSpace space; XrUuidEXT uuid; } XrSpaceQueryResultFB; typedef struct XrSpaceQueryResultsFB { XrStructureType type; void* next; uint32_t resultCapacityInput; uint32_t resultCountOutput; XrSpaceQueryResultFB* results; } XrSpaceQueryResultsFB; typedef struct XrEventDataSpaceQueryResultsAvailableFB { XrStructureType type; const void* next; XrAsyncRequestIdFB requestId; } XrEventDataSpaceQueryResultsAvailableFB; typedef struct XrEventDataSpaceQueryCompleteFB { XrStructureType type; const void* next; XrAsyncRequestIdFB requestId; XrResult result; } XrEventDataSpaceQueryCompleteFB; typedef XrResult (*PFN_xrQuerySpacesFB)(XrSession session, const XrSpaceQueryInfoBaseHeaderFB* info, XrAsyncRequestIdFB* requestId);
typedef XrResult (*PFN_xrRetrieveSpaceQueryResultsFB)(XrSession session, XrAsyncRequestIdFB requestId, XrSpaceQueryResultsFB* results);
XrResult  xrQuerySpacesFB(XrSession session, const XrSpaceQueryInfoBaseHeaderFB* info, XrAsyncRequestIdFB* requestId);
XrResult  xrRetrieveSpaceQueryResultsFB(XrSession session, XrAsyncRequestIdFB requestId, XrSpaceQueryResultsFB* results);
#line 5738 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 5739 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef enum XrSpacePersistenceModeFB { XR_SPACE_PERSISTENCE_MODE_INVALID_FB = 0, XR_SPACE_PERSISTENCE_MODE_INDEFINITE_FB = 1, XR_SPACE_PERSISTENCE_MODE_MAX_ENUM_FB = 0x7FFFFFFF } XrSpacePersistenceModeFB; typedef struct XrSpaceSaveInfoFB { XrStructureType type; const void* next; XrSpace space; XrSpaceStorageLocationFB location; XrSpacePersistenceModeFB persistenceMode; } XrSpaceSaveInfoFB; typedef struct XrSpaceEraseInfoFB { XrStructureType type; const void* next; XrSpace space; XrSpaceStorageLocationFB location; } XrSpaceEraseInfoFB; typedef struct XrEventDataSpaceSaveCompleteFB { XrStructureType type; const void* next; XrAsyncRequestIdFB requestId; XrResult result; XrSpace space; XrUuidEXT uuid; XrSpaceStorageLocationFB location; } XrEventDataSpaceSaveCompleteFB; typedef struct XrEventDataSpaceEraseCompleteFB { XrStructureType type; const void* next; XrAsyncRequestIdFB requestId; XrResult result; XrSpace space; XrUuidEXT uuid; XrSpaceStorageLocationFB location; } XrEventDataSpaceEraseCompleteFB; typedef XrResult (*PFN_xrSaveSpaceFB)(XrSession session, const XrSpaceSaveInfoFB* info, XrAsyncRequestIdFB* requestId);
typedef XrResult (*PFN_xrEraseSpaceFB)(XrSession session, const XrSpaceEraseInfoFB* info, XrAsyncRequestIdFB* requestId);
XrResult  xrSaveSpaceFB(XrSession session, const XrSpaceSaveInfoFB* info, XrAsyncRequestIdFB* requestId);
XrResult  xrEraseSpaceFB(XrSession session, const XrSpaceEraseInfoFB* info, XrAsyncRequestIdFB* requestId);
#line 5801 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 5802 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrSpaceUserFB_T* XrSpaceUserFB; typedef struct XrSpaceShareInfoFB { XrStructureType type; const void* next; uint32_t spaceCount; XrSpace* spaces; uint32_t userCount; XrSpaceUserFB* users; } XrSpaceShareInfoFB; typedef struct XrEventDataSpaceShareCompleteFB { XrStructureType type; const void* next; XrAsyncRequestIdFB requestId; XrResult result; } XrEventDataSpaceShareCompleteFB; typedef XrResult (*PFN_xrShareSpacesFB)(XrSession session, const XrSpaceShareInfoFB* info, XrAsyncRequestIdFB* requestId);
XrResult  xrShareSpacesFB(XrSession session, const XrSpaceShareInfoFB* info, XrAsyncRequestIdFB* requestId);
#line 5840 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 5841 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef XrFlags64 XrCompositionLayerSpaceWarpInfoFlagsFB; static const XrCompositionLayerSpaceWarpInfoFlagsFB XR_COMPOSITION_LAYER_SPACE_WARP_INFO_FRAME_SKIP_BIT_FB = 0x00000001; typedef struct XrCompositionLayerSpaceWarpInfoFB { XrStructureType type; const void* next; XrCompositionLayerSpaceWarpInfoFlagsFB layerFlags; XrSwapchainSubImage motionVectorSubImage; XrPosef appSpaceDeltaPose; XrSwapchainSubImage depthSubImage; float minDepth; float maxDepth; float nearZ; float farZ; } XrCompositionLayerSpaceWarpInfoFB; typedef struct XrSystemSpaceWarpPropertiesFB { XrStructureType type; void* next; uint32_t recommendedMotionVectorImageRectWidth; uint32_t recommendedMotionVectorImageRectHeight; } XrSystemSpaceWarpPropertiesFB; typedef struct XrHapticAmplitudeEnvelopeVibrationFB { XrStructureType type; const void* next; XrDuration duration; uint32_t amplitudeCount; const float* amplitudes; } XrHapticAmplitudeEnvelopeVibrationFB; typedef XrFlags64 XrSemanticLabelsSupportFlagsFB; static const XrSemanticLabelsSupportFlagsFB XR_SEMANTIC_LABELS_SUPPORT_MULTIPLE_SEMANTIC_LABELS_BIT_FB = 0x00000001; static const XrSemanticLabelsSupportFlagsFB XR_SEMANTIC_LABELS_SUPPORT_ACCEPT_DESK_TO_TABLE_MIGRATION_BIT_FB = 0x00000002; static const XrSemanticLabelsSupportFlagsFB XR_SEMANTIC_LABELS_SUPPORT_ACCEPT_INVISIBLE_WALL_FACE_BIT_FB = 0x00000004; typedef XrExtent3Df XrExtent3DfFB; typedef struct XrOffset3DfFB { float x; float y; float z; } XrOffset3DfFB; typedef struct XrRect3DfFB { XrOffset3DfFB offset; XrExtent3DfFB extent; } XrRect3DfFB; typedef struct XrSemanticLabelsFB { XrStructureType type; const void* next; uint32_t bufferCapacityInput; uint32_t bufferCountOutput; char* buffer; } XrSemanticLabelsFB; typedef struct XrRoomLayoutFB { XrStructureType type; const void* next; XrUuidEXT floorUuid; XrUuidEXT ceilingUuid; uint32_t wallUuidCapacityInput; uint32_t wallUuidCountOutput; XrUuidEXT* wallUuids; } XrRoomLayoutFB; typedef struct XrBoundary2DFB { XrStructureType type; const void* next; uint32_t vertexCapacityInput; uint32_t vertexCountOutput; XrVector2f* vertices; } XrBoundary2DFB; typedef struct XrSemanticLabelsSupportInfoFB { XrStructureType type; const void* next; XrSemanticLabelsSupportFlagsFB flags; const char* recognizedLabels; } XrSemanticLabelsSupportInfoFB; typedef XrResult (*PFN_xrGetSpaceBoundingBox2DFB)(XrSession session, XrSpace space, XrRect2Df* boundingBox2DOutput);
typedef XrResult (*PFN_xrGetSpaceBoundingBox3DFB)(XrSession session, XrSpace space, XrRect3DfFB* boundingBox3DOutput);
typedef XrResult (*PFN_xrGetSpaceSemanticLabelsFB)(XrSession session, XrSpace space, XrSemanticLabelsFB* semanticLabelsOutput);
typedef XrResult (*PFN_xrGetSpaceBoundary2DFB)(XrSession session, XrSpace space, XrBoundary2DFB* boundary2DOutput);
typedef XrResult (*PFN_xrGetSpaceRoomLayoutFB)(XrSession session, XrSpace space, XrRoomLayoutFB* roomLayoutOutput);
XrResult  xrGetSpaceBoundingBox2DFB(XrSession session, XrSpace space, XrRect2Df* boundingBox2DOutput);
XrResult  xrGetSpaceBoundingBox3DFB(XrSession session, XrSpace space, XrRect3DfFB* boundingBox3DOutput);
XrResult  xrGetSpaceSemanticLabelsFB(XrSession session, XrSpace space, XrSemanticLabelsFB* semanticLabelsOutput);
XrResult  xrGetSpaceBoundary2DFB(XrSession session, XrSpace space, XrBoundary2DFB* boundary2DOutput);
XrResult  xrGetSpaceRoomLayoutFB(XrSession session, XrSpace space, XrRoomLayoutFB* roomLayoutOutput);
#line 5983 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 5984 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef XrFlags64 XrDigitalLensControlFlagsALMALENCE; static const XrDigitalLensControlFlagsALMALENCE XR_DIGITAL_LENS_CONTROL_PROCESSING_DISABLE_BIT_ALMALENCE = 0x00000001; typedef struct XrDigitalLensControlALMALENCE { XrStructureType type; const void* next; XrDigitalLensControlFlagsALMALENCE flags; } XrDigitalLensControlALMALENCE; typedef XrResult (*PFN_xrSetDigitalLensControlALMALENCE)(XrSession session, const XrDigitalLensControlALMALENCE* digitalLensControl);
XrResult  xrSetDigitalLensControlALMALENCE(XrSession session, const XrDigitalLensControlALMALENCE* digitalLensControl);
#line 6015 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 6016 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrEventDataSceneCaptureCompleteFB { XrStructureType type; const void* next; XrAsyncRequestIdFB requestId; XrResult result; } XrEventDataSceneCaptureCompleteFB; typedef struct XrSceneCaptureRequestInfoFB { XrStructureType type; const void* next; uint32_t requestByteCount; const char* request; } XrSceneCaptureRequestInfoFB; typedef XrResult (*PFN_xrRequestSceneCaptureFB)(XrSession session, const XrSceneCaptureRequestInfoFB* info, XrAsyncRequestIdFB* requestId);
XrResult  xrRequestSceneCaptureFB(XrSession session, const XrSceneCaptureRequestInfoFB* info, XrAsyncRequestIdFB* requestId);
#line 6045 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 6046 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrSpaceContainerFB { XrStructureType type; const void* next; uint32_t uuidCapacityInput; uint32_t uuidCountOutput; XrUuidEXT* uuids; } XrSpaceContainerFB; typedef XrResult (*PFN_xrGetSpaceContainerFB)(XrSession session, XrSpace space, XrSpaceContainerFB* spaceContainerOutput);
XrResult  xrGetSpaceContainerFB(XrSession session, XrSpace space, XrSpaceContainerFB* spaceContainerOutput);
#line 6069 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 6070 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef XrFlags64 XrFoveationEyeTrackedProfileCreateFlagsMETA; typedef XrFlags64 XrFoveationEyeTrackedStateFlagsMETA; static const XrFoveationEyeTrackedStateFlagsMETA XR_FOVEATION_EYE_TRACKED_STATE_VALID_BIT_META = 0x00000001; typedef struct XrFoveationEyeTrackedProfileCreateInfoMETA { XrStructureType type; const void* next; XrFoveationEyeTrackedProfileCreateFlagsMETA flags; } XrFoveationEyeTrackedProfileCreateInfoMETA; typedef struct XrFoveationEyeTrackedStateMETA { XrStructureType type; void* next; XrVector2f foveationCenter[2]; XrFoveationEyeTrackedStateFlagsMETA flags; } XrFoveationEyeTrackedStateMETA; typedef struct XrSystemFoveationEyeTrackedPropertiesMETA { XrStructureType type; void* next; XrBool32 supportsFoveationEyeTracked; } XrSystemFoveationEyeTrackedPropertiesMETA; typedef XrResult (*PFN_xrGetFoveationEyeTrackedStateMETA)(XrSession session, XrFoveationEyeTrackedStateMETA* foveationState);
XrResult  xrGetFoveationEyeTrackedStateMETA(XrSession session, XrFoveationEyeTrackedStateMETA* foveationState);
#line 6115 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 6116 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrFaceTrackerFB_T* XrFaceTrackerFB; typedef enum XrFaceExpressionFB { XR_FACE_EXPRESSION_BROW_LOWERER_L_FB = 0, XR_FACE_EXPRESSION_BROW_LOWERER_R_FB = 1, XR_FACE_EXPRESSION_CHEEK_PUFF_L_FB = 2, XR_FACE_EXPRESSION_CHEEK_PUFF_R_FB = 3, XR_FACE_EXPRESSION_CHEEK_RAISER_L_FB = 4, XR_FACE_EXPRESSION_CHEEK_RAISER_R_FB = 5, XR_FACE_EXPRESSION_CHEEK_SUCK_L_FB = 6, XR_FACE_EXPRESSION_CHEEK_SUCK_R_FB = 7, XR_FACE_EXPRESSION_CHIN_RAISER_B_FB = 8, XR_FACE_EXPRESSION_CHIN_RAISER_T_FB = 9, XR_FACE_EXPRESSION_DIMPLER_L_FB = 10, XR_FACE_EXPRESSION_DIMPLER_R_FB = 11, XR_FACE_EXPRESSION_EYES_CLOSED_L_FB = 12, XR_FACE_EXPRESSION_EYES_CLOSED_R_FB = 13, XR_FACE_EXPRESSION_EYES_LOOK_DOWN_L_FB = 14, XR_FACE_EXPRESSION_EYES_LOOK_DOWN_R_FB = 15, XR_FACE_EXPRESSION_EYES_LOOK_LEFT_L_FB = 16, XR_FACE_EXPRESSION_EYES_LOOK_LEFT_R_FB = 17, XR_FACE_EXPRESSION_EYES_LOOK_RIGHT_L_FB = 18, XR_FACE_EXPRESSION_EYES_LOOK_RIGHT_R_FB = 19, XR_FACE_EXPRESSION_EYES_LOOK_UP_L_FB = 20, XR_FACE_EXPRESSION_EYES_LOOK_UP_R_FB = 21, XR_FACE_EXPRESSION_INNER_BROW_RAISER_L_FB = 22, XR_FACE_EXPRESSION_INNER_BROW_RAISER_R_FB = 23, XR_FACE_EXPRESSION_JAW_DROP_FB = 24, XR_FACE_EXPRESSION_JAW_SIDEWAYS_LEFT_FB = 25, XR_FACE_EXPRESSION_JAW_SIDEWAYS_RIGHT_FB = 26, XR_FACE_EXPRESSION_JAW_THRUST_FB = 27, XR_FACE_EXPRESSION_LID_TIGHTENER_L_FB = 28, XR_FACE_EXPRESSION_LID_TIGHTENER_R_FB = 29, XR_FACE_EXPRESSION_LIP_CORNER_DEPRESSOR_L_FB = 30, XR_FACE_EXPRESSION_LIP_CORNER_DEPRESSOR_R_FB = 31, XR_FACE_EXPRESSION_LIP_CORNER_PULLER_L_FB = 32, XR_FACE_EXPRESSION_LIP_CORNER_PULLER_R_FB = 33, XR_FACE_EXPRESSION_LIP_FUNNELER_LB_FB = 34, XR_FACE_EXPRESSION_LIP_FUNNELER_LT_FB = 35, XR_FACE_EXPRESSION_LIP_FUNNELER_RB_FB = 36, XR_FACE_EXPRESSION_LIP_FUNNELER_RT_FB = 37, XR_FACE_EXPRESSION_LIP_PRESSOR_L_FB = 38, XR_FACE_EXPRESSION_LIP_PRESSOR_R_FB = 39, XR_FACE_EXPRESSION_LIP_PUCKER_L_FB = 40, XR_FACE_EXPRESSION_LIP_PUCKER_R_FB = 41, XR_FACE_EXPRESSION_LIP_STRETCHER_L_FB = 42, XR_FACE_EXPRESSION_LIP_STRETCHER_R_FB = 43, XR_FACE_EXPRESSION_LIP_SUCK_LB_FB = 44, XR_FACE_EXPRESSION_LIP_SUCK_LT_FB = 45, XR_FACE_EXPRESSION_LIP_SUCK_RB_FB = 46, XR_FACE_EXPRESSION_LIP_SUCK_RT_FB = 47, XR_FACE_EXPRESSION_LIP_TIGHTENER_L_FB = 48, XR_FACE_EXPRESSION_LIP_TIGHTENER_R_FB = 49, XR_FACE_EXPRESSION_LIPS_TOWARD_FB = 50, XR_FACE_EXPRESSION_LOWER_LIP_DEPRESSOR_L_FB = 51, XR_FACE_EXPRESSION_LOWER_LIP_DEPRESSOR_R_FB = 52, XR_FACE_EXPRESSION_MOUTH_LEFT_FB = 53, XR_FACE_EXPRESSION_MOUTH_RIGHT_FB = 54, XR_FACE_EXPRESSION_NOSE_WRINKLER_L_FB = 55, XR_FACE_EXPRESSION_NOSE_WRINKLER_R_FB = 56, XR_FACE_EXPRESSION_OUTER_BROW_RAISER_L_FB = 57, XR_FACE_EXPRESSION_OUTER_BROW_RAISER_R_FB = 58, XR_FACE_EXPRESSION_UPPER_LID_RAISER_L_FB = 59, XR_FACE_EXPRESSION_UPPER_LID_RAISER_R_FB = 60, XR_FACE_EXPRESSION_UPPER_LIP_RAISER_L_FB = 61, XR_FACE_EXPRESSION_UPPER_LIP_RAISER_R_FB = 62, XR_FACE_EXPRESSION_COUNT_FB = 63, XR_FACE_EXPRESSION_MAX_ENUM_FB = 0x7FFFFFFF } XrFaceExpressionFB; typedef enum XrFaceExpressionSetFB { XR_FACE_EXPRESSION_SET_DEFAULT_FB = 0, XR_FACE_EXPRESSION_SET_MAX_ENUM_FB = 0x7FFFFFFF } XrFaceExpressionSetFB; typedef enum XrFaceConfidenceFB { XR_FACE_CONFIDENCE_LOWER_FACE_FB = 0, XR_FACE_CONFIDENCE_UPPER_FACE_FB = 1, XR_FACE_CONFIDENCE_COUNT_FB = 2, XR_FACE_CONFIDENCE_MAX_ENUM_FB = 0x7FFFFFFF } XrFaceConfidenceFB; typedef struct XrSystemFaceTrackingPropertiesFB { XrStructureType type; void* next; XrBool32 supportsFaceTracking; } XrSystemFaceTrackingPropertiesFB; typedef struct XrFaceTrackerCreateInfoFB { XrStructureType type; const void* next; XrFaceExpressionSetFB faceExpressionSet; } XrFaceTrackerCreateInfoFB; typedef struct XrFaceExpressionInfoFB { XrStructureType type; const void* next; XrTime time; } XrFaceExpressionInfoFB; typedef struct XrFaceExpressionStatusFB { XrBool32 isValid; XrBool32 isEyeFollowingBlendshapesValid; } XrFaceExpressionStatusFB; typedef struct XrFaceExpressionWeightsFB { XrStructureType type; void* next; uint32_t weightCount; float* weights; uint32_t confidenceCount; float* confidences; XrFaceExpressionStatusFB status; XrTime time; } XrFaceExpressionWeightsFB; typedef XrResult (*PFN_xrCreateFaceTrackerFB)(XrSession session, const XrFaceTrackerCreateInfoFB* createInfo, XrFaceTrackerFB* faceTracker);
typedef XrResult (*PFN_xrDestroyFaceTrackerFB)(XrFaceTrackerFB faceTracker);
typedef XrResult (*PFN_xrGetFaceExpressionWeightsFB)(XrFaceTrackerFB faceTracker, const XrFaceExpressionInfoFB* expressionInfo, XrFaceExpressionWeightsFB* expressionWeights);
XrResult  xrCreateFaceTrackerFB(XrSession session, const XrFaceTrackerCreateInfoFB* createInfo, XrFaceTrackerFB* faceTracker);
XrResult  xrDestroyFaceTrackerFB(XrFaceTrackerFB faceTracker);
XrResult  xrGetFaceExpressionWeightsFB(XrFaceTrackerFB faceTracker, const XrFaceExpressionInfoFB* expressionInfo, XrFaceExpressionWeightsFB* expressionWeights);
#line 6260 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 6261 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrEyeTrackerFB_T* XrEyeTrackerFB; typedef enum XrEyePositionFB { XR_EYE_POSITION_LEFT_FB = 0, XR_EYE_POSITION_RIGHT_FB = 1, XR_EYE_POSITION_COUNT_FB = 2, XR_EYE_POSITION_MAX_ENUM_FB = 0x7FFFFFFF } XrEyePositionFB; typedef struct XrEyeGazeFB { XrBool32 isValid; XrPosef gazePose; float gazeConfidence; } XrEyeGazeFB; typedef struct XrEyeTrackerCreateInfoFB { XrStructureType type; const void* next; } XrEyeTrackerCreateInfoFB; typedef struct XrEyeGazesInfoFB { XrStructureType type; const void* next; XrSpace baseSpace; XrTime time; } XrEyeGazesInfoFB; typedef struct XrSystemEyeTrackingPropertiesFB { XrStructureType type; void* next; XrBool32 supportsEyeTracking; } XrSystemEyeTrackingPropertiesFB; typedef struct XrEyeGazesFB { XrStructureType type; void* next; XrEyeGazeFB gaze[XR_EYE_POSITION_COUNT_FB]; XrTime time; } XrEyeGazesFB; typedef XrResult (*PFN_xrCreateEyeTrackerFB)(XrSession session, const XrEyeTrackerCreateInfoFB* createInfo, XrEyeTrackerFB* eyeTracker);
typedef XrResult (*PFN_xrDestroyEyeTrackerFB)(XrEyeTrackerFB eyeTracker);
typedef XrResult (*PFN_xrGetEyeGazesFB)(XrEyeTrackerFB eyeTracker, const XrEyeGazesInfoFB* gazeInfo, XrEyeGazesFB* eyeGazes);
XrResult  xrCreateEyeTrackerFB(XrSession session, const XrEyeTrackerCreateInfoFB* createInfo, XrEyeTrackerFB* eyeTracker);
XrResult  xrDestroyEyeTrackerFB(XrEyeTrackerFB eyeTracker);
XrResult  xrGetEyeGazesFB(XrEyeTrackerFB eyeTracker, const XrEyeGazesInfoFB* gazeInfo, XrEyeGazesFB* eyeGazes);
#line 6326 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 6327 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrPassthroughKeyboardHandsIntensityFB { XrStructureType type; const void* next; float leftHandIntensity; float rightHandIntensity; } XrPassthroughKeyboardHandsIntensityFB; typedef XrResult (*PFN_xrPassthroughLayerSetKeyboardHandsIntensityFB)(XrPassthroughLayerFB layer, const XrPassthroughKeyboardHandsIntensityFB* intensity);
XrResult  xrPassthroughLayerSetKeyboardHandsIntensityFB(XrPassthroughLayerFB layer, const XrPassthroughKeyboardHandsIntensityFB* intensity);
#line 6348 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 6349 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef XrFlags64 XrCompositionLayerSettingsFlagsFB; static const XrCompositionLayerSettingsFlagsFB XR_COMPOSITION_LAYER_SETTINGS_NORMAL_SUPER_SAMPLING_BIT_FB = 0x00000001; static const XrCompositionLayerSettingsFlagsFB XR_COMPOSITION_LAYER_SETTINGS_QUALITY_SUPER_SAMPLING_BIT_FB = 0x00000002; static const XrCompositionLayerSettingsFlagsFB XR_COMPOSITION_LAYER_SETTINGS_NORMAL_SHARPENING_BIT_FB = 0x00000004; static const XrCompositionLayerSettingsFlagsFB XR_COMPOSITION_LAYER_SETTINGS_QUALITY_SHARPENING_BIT_FB = 0x00000008; static const XrCompositionLayerSettingsFlagsFB XR_COMPOSITION_LAYER_SETTINGS_AUTO_LAYER_FILTER_BIT_META = 0x00000020; typedef struct XrCompositionLayerSettingsFB { XrStructureType type; const void* next; XrCompositionLayerSettingsFlagsFB layerFlags; } XrCompositionLayerSettingsFB; typedef struct XrHapticPcmVibrationFB { XrStructureType type; const void* next; uint32_t bufferSize; const float* buffer; float sampleRate; XrBool32 append; uint32_t* samplesConsumed; } XrHapticPcmVibrationFB; typedef struct XrDevicePcmSampleRateStateFB { XrStructureType type; void* next; float sampleRate; } XrDevicePcmSampleRateStateFB; typedef XrDevicePcmSampleRateStateFB XrDevicePcmSampleRateGetInfoFB; typedef XrResult (*PFN_xrGetDeviceSampleRateFB)(XrSession session, const XrHapticActionInfo* hapticActionInfo, XrDevicePcmSampleRateGetInfoFB* deviceSampleRate);
XrResult  xrGetDeviceSampleRateFB(XrSession session, const XrHapticActionInfo* hapticActionInfo, XrDevicePcmSampleRateGetInfoFB* deviceSampleRate);
#line 6413 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 6414 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef XrFlags64 XrFrameSynthesisInfoFlagsEXT; static const XrFrameSynthesisInfoFlagsEXT XR_FRAME_SYNTHESIS_INFO_USE_2D_MOTION_VECTOR_BIT_EXT = 0x00000001; static const XrFrameSynthesisInfoFlagsEXT XR_FRAME_SYNTHESIS_INFO_REQUEST_RELAXED_FRAME_INTERVAL_BIT_EXT = 0x00000002; typedef struct XrFrameSynthesisInfoEXT { XrStructureType type; const void* next; XrFrameSynthesisInfoFlagsEXT layerFlags; XrSwapchainSubImage motionVectorSubImage; XrVector4f motionVectorScale; XrVector4f motionVectorOffset; XrPosef appSpaceDeltaPose; XrSwapchainSubImage depthSubImage; float minDepth; float maxDepth; float nearZ; float farZ; } XrFrameSynthesisInfoEXT; typedef struct XrFrameSynthesisConfigViewEXT { XrStructureType type; void* next; uint32_t recommendedMotionVectorImageRectWidth; uint32_t recommendedMotionVectorImageRectHeight; } XrFrameSynthesisConfigViewEXT; typedef enum XrCompareOpFB { XR_COMPARE_OP_NEVER_FB = 0, XR_COMPARE_OP_LESS_FB = 1, XR_COMPARE_OP_EQUAL_FB = 2, XR_COMPARE_OP_LESS_OR_EQUAL_FB = 3, XR_COMPARE_OP_GREATER_FB = 4, XR_COMPARE_OP_NOT_EQUAL_FB = 5, XR_COMPARE_OP_GREATER_OR_EQUAL_FB = 6, XR_COMPARE_OP_ALWAYS_FB = 7, XR_COMPARE_OP_MAX_ENUM_FB = 0x7FFFFFFF } XrCompareOpFB; typedef struct XrCompositionLayerDepthTestFB { XrStructureType type; const void* next; XrBool32 depthMask; XrCompareOpFB compareOp; } XrCompositionLayerDepthTestFB; typedef enum XrLocalDimmingModeMETA { XR_LOCAL_DIMMING_MODE_OFF_META = 0, XR_LOCAL_DIMMING_MODE_ON_META = 1, XR_LOCAL_DIMMING_MODE_MAX_ENUM_META = 0x7FFFFFFF } XrLocalDimmingModeMETA; typedef struct XrLocalDimmingFrameEndInfoMETA { XrStructureType type; const void* next; XrLocalDimmingModeMETA localDimmingMode; } XrLocalDimmingFrameEndInfoMETA; typedef XrFlags64 XrPassthroughPreferenceFlagsMETA; static const XrPassthroughPreferenceFlagsMETA XR_PASSTHROUGH_PREFERENCE_DEFAULT_TO_ACTIVE_BIT_META = 0x00000001; typedef struct XrPassthroughPreferencesMETA { XrStructureType type; const void* next; XrPassthroughPreferenceFlagsMETA flags; } XrPassthroughPreferencesMETA; typedef XrResult (*PFN_xrGetPassthroughPreferencesMETA)(XrSession session, XrPassthroughPreferencesMETA* preferences);
XrResult  xrGetPassthroughPreferencesMETA(XrSession session, XrPassthroughPreferencesMETA* preferences);
#line 6520 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 6521 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrVirtualKeyboardMETA_T* XrVirtualKeyboardMETA; typedef enum XrVirtualKeyboardLocationTypeMETA { XR_VIRTUAL_KEYBOARD_LOCATION_TYPE_CUSTOM_META = 0, XR_VIRTUAL_KEYBOARD_LOCATION_TYPE_FAR_META = 1, XR_VIRTUAL_KEYBOARD_LOCATION_TYPE_DIRECT_META = 2, XR_VIRTUAL_KEYBOARD_LOCATION_TYPE_MAX_ENUM_META = 0x7FFFFFFF } XrVirtualKeyboardLocationTypeMETA; typedef enum XrVirtualKeyboardInputSourceMETA { XR_VIRTUAL_KEYBOARD_INPUT_SOURCE_CONTROLLER_RAY_LEFT_META = 1, XR_VIRTUAL_KEYBOARD_INPUT_SOURCE_CONTROLLER_RAY_RIGHT_META = 2, XR_VIRTUAL_KEYBOARD_INPUT_SOURCE_HAND_RAY_LEFT_META = 3, XR_VIRTUAL_KEYBOARD_INPUT_SOURCE_HAND_RAY_RIGHT_META = 4, XR_VIRTUAL_KEYBOARD_INPUT_SOURCE_CONTROLLER_DIRECT_LEFT_META = 5, XR_VIRTUAL_KEYBOARD_INPUT_SOURCE_CONTROLLER_DIRECT_RIGHT_META = 6, XR_VIRTUAL_KEYBOARD_INPUT_SOURCE_HAND_DIRECT_INDEX_TIP_LEFT_META = 7, XR_VIRTUAL_KEYBOARD_INPUT_SOURCE_HAND_DIRECT_INDEX_TIP_RIGHT_META = 8, XR_VIRTUAL_KEYBOARD_INPUT_SOURCE_MAX_ENUM_META = 0x7FFFFFFF } XrVirtualKeyboardInputSourceMETA; typedef XrFlags64 XrVirtualKeyboardInputStateFlagsMETA; static const XrVirtualKeyboardInputStateFlagsMETA XR_VIRTUAL_KEYBOARD_INPUT_STATE_PRESSED_BIT_META = 0x00000001; typedef struct XrSystemVirtualKeyboardPropertiesMETA { XrStructureType type; void* next; XrBool32 supportsVirtualKeyboard; } XrSystemVirtualKeyboardPropertiesMETA; typedef struct XrVirtualKeyboardCreateInfoMETA { XrStructureType type; const void* next; } XrVirtualKeyboardCreateInfoMETA; typedef struct XrVirtualKeyboardSpaceCreateInfoMETA { XrStructureType type; const void* next; XrVirtualKeyboardLocationTypeMETA locationType; XrSpace space; XrPosef poseInSpace; } XrVirtualKeyboardSpaceCreateInfoMETA; typedef struct XrVirtualKeyboardLocationInfoMETA { XrStructureType type; const void* next; XrVirtualKeyboardLocationTypeMETA locationType; XrSpace space; XrPosef poseInSpace; float scale; } XrVirtualKeyboardLocationInfoMETA; typedef struct XrVirtualKeyboardModelVisibilitySetInfoMETA { XrStructureType type; const void* next; XrBool32 visible; } XrVirtualKeyboardModelVisibilitySetInfoMETA; typedef struct XrVirtualKeyboardAnimationStateMETA { XrStructureType type; void* next; int32_t animationIndex; float fraction; } XrVirtualKeyboardAnimationStateMETA; typedef struct XrVirtualKeyboardModelAnimationStatesMETA { XrStructureType type; void* next; uint32_t stateCapacityInput; uint32_t stateCountOutput; XrVirtualKeyboardAnimationStateMETA* states; } XrVirtualKeyboardModelAnimationStatesMETA; typedef struct XrVirtualKeyboardTextureDataMETA { XrStructureType type; void* next; uint32_t textureWidth; uint32_t textureHeight; uint32_t bufferCapacityInput; uint32_t bufferCountOutput; uint8_t* buffer; } XrVirtualKeyboardTextureDataMETA; typedef struct XrVirtualKeyboardInputInfoMETA { XrStructureType type; const void* next; XrVirtualKeyboardInputSourceMETA inputSource; XrSpace inputSpace; XrPosef inputPoseInSpace; XrVirtualKeyboardInputStateFlagsMETA inputState; } XrVirtualKeyboardInputInfoMETA; typedef struct XrVirtualKeyboardTextContextChangeInfoMETA { XrStructureType type; const void* next; const char* textContext; } XrVirtualKeyboardTextContextChangeInfoMETA; typedef struct XrEventDataVirtualKeyboardCommitTextMETA { XrStructureType type; const void* next; XrVirtualKeyboardMETA keyboard; char text[3992]; } XrEventDataVirtualKeyboardCommitTextMETA; typedef struct XrEventDataVirtualKeyboardBackspaceMETA { XrStructureType type; const void* next; XrVirtualKeyboardMETA keyboard; } XrEventDataVirtualKeyboardBackspaceMETA; typedef struct XrEventDataVirtualKeyboardEnterMETA { XrStructureType type; const void* next; XrVirtualKeyboardMETA keyboard; } XrEventDataVirtualKeyboardEnterMETA; typedef struct XrEventDataVirtualKeyboardShownMETA { XrStructureType type; const void* next; XrVirtualKeyboardMETA keyboard; } XrEventDataVirtualKeyboardShownMETA; typedef struct XrEventDataVirtualKeyboardHiddenMETA { XrStructureType type; const void* next; XrVirtualKeyboardMETA keyboard; } XrEventDataVirtualKeyboardHiddenMETA; typedef XrResult (*PFN_xrCreateVirtualKeyboardMETA)(XrSession session, const XrVirtualKeyboardCreateInfoMETA* createInfo, XrVirtualKeyboardMETA* keyboard);
typedef XrResult (*PFN_xrDestroyVirtualKeyboardMETA)(XrVirtualKeyboardMETA keyboard);
typedef XrResult (*PFN_xrCreateVirtualKeyboardSpaceMETA)(XrSession session, XrVirtualKeyboardMETA keyboard, const XrVirtualKeyboardSpaceCreateInfoMETA* createInfo, XrSpace* keyboardSpace);
typedef XrResult (*PFN_xrSuggestVirtualKeyboardLocationMETA)(XrVirtualKeyboardMETA keyboard, const XrVirtualKeyboardLocationInfoMETA* locationInfo);
typedef XrResult (*PFN_xrGetVirtualKeyboardScaleMETA)(XrVirtualKeyboardMETA keyboard, float* scale);
typedef XrResult (*PFN_xrSetVirtualKeyboardModelVisibilityMETA)(XrVirtualKeyboardMETA keyboard, const XrVirtualKeyboardModelVisibilitySetInfoMETA* modelVisibility);
typedef XrResult (*PFN_xrGetVirtualKeyboardModelAnimationStatesMETA)(XrVirtualKeyboardMETA keyboard, XrVirtualKeyboardModelAnimationStatesMETA* animationStates);
typedef XrResult (*PFN_xrGetVirtualKeyboardDirtyTexturesMETA)(XrVirtualKeyboardMETA keyboard, uint32_t textureIdCapacityInput, uint32_t* textureIdCountOutput, uint64_t* textureIds);
typedef XrResult (*PFN_xrGetVirtualKeyboardTextureDataMETA)(XrVirtualKeyboardMETA keyboard, uint64_t textureId, XrVirtualKeyboardTextureDataMETA* textureData);
typedef XrResult (*PFN_xrSendVirtualKeyboardInputMETA)(XrVirtualKeyboardMETA keyboard, const XrVirtualKeyboardInputInfoMETA* info, XrPosef* interactorRootPose);
typedef XrResult (*PFN_xrChangeVirtualKeyboardTextContextMETA)(XrVirtualKeyboardMETA keyboard, const XrVirtualKeyboardTextContextChangeInfoMETA* changeInfo);
XrResult  xrCreateVirtualKeyboardMETA(XrSession session, const XrVirtualKeyboardCreateInfoMETA* createInfo, XrVirtualKeyboardMETA* keyboard);
XrResult  xrDestroyVirtualKeyboardMETA(XrVirtualKeyboardMETA keyboard);
XrResult  xrCreateVirtualKeyboardSpaceMETA(XrSession session, XrVirtualKeyboardMETA keyboard, const XrVirtualKeyboardSpaceCreateInfoMETA* createInfo, XrSpace* keyboardSpace);
XrResult  xrSuggestVirtualKeyboardLocationMETA(XrVirtualKeyboardMETA keyboard, const XrVirtualKeyboardLocationInfoMETA* locationInfo);
XrResult  xrGetVirtualKeyboardScaleMETA(XrVirtualKeyboardMETA keyboard, float* scale);
XrResult  xrSetVirtualKeyboardModelVisibilityMETA(XrVirtualKeyboardMETA keyboard, const XrVirtualKeyboardModelVisibilitySetInfoMETA* modelVisibility);
XrResult  xrGetVirtualKeyboardModelAnimationStatesMETA(XrVirtualKeyboardMETA keyboard, XrVirtualKeyboardModelAnimationStatesMETA* animationStates);
XrResult  xrGetVirtualKeyboardDirtyTexturesMETA(XrVirtualKeyboardMETA keyboard, uint32_t textureIdCapacityInput, uint32_t* textureIdCountOutput, uint64_t* textureIds);
XrResult  xrGetVirtualKeyboardTextureDataMETA(XrVirtualKeyboardMETA keyboard, uint64_t textureId, XrVirtualKeyboardTextureDataMETA* textureData);
XrResult  xrSendVirtualKeyboardInputMETA(XrVirtualKeyboardMETA keyboard, const XrVirtualKeyboardInputInfoMETA* info, XrPosef* interactorRootPose);
XrResult  xrChangeVirtualKeyboardTextContextMETA(XrVirtualKeyboardMETA keyboard, const XrVirtualKeyboardTextContextChangeInfoMETA* changeInfo);
#line 6723 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 6724 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef enum XrExternalCameraAttachedToDeviceOCULUS { XR_EXTERNAL_CAMERA_ATTACHED_TO_DEVICE_NONE_OCULUS = 0, XR_EXTERNAL_CAMERA_ATTACHED_TO_DEVICE_HMD_OCULUS = 1, XR_EXTERNAL_CAMERA_ATTACHED_TO_DEVICE_LTOUCH_OCULUS = 2, XR_EXTERNAL_CAMERA_ATTACHED_TO_DEVICE_RTOUCH_OCULUS = 3, XR_EXTERNAL_CAMERA_ATTACHED_TO_DEVICE_MAX_ENUM_OCULUS = 0x7FFFFFFF } XrExternalCameraAttachedToDeviceOCULUS; typedef XrFlags64 XrExternalCameraStatusFlagsOCULUS; static const XrExternalCameraStatusFlagsOCULUS XR_EXTERNAL_CAMERA_STATUS_CONNECTED_BIT_OCULUS = 0x00000001; static const XrExternalCameraStatusFlagsOCULUS XR_EXTERNAL_CAMERA_STATUS_CALIBRATING_BIT_OCULUS = 0x00000002; static const XrExternalCameraStatusFlagsOCULUS XR_EXTERNAL_CAMERA_STATUS_CALIBRATION_FAILED_BIT_OCULUS = 0x00000004; static const XrExternalCameraStatusFlagsOCULUS XR_EXTERNAL_CAMERA_STATUS_CALIBRATED_BIT_OCULUS = 0x00000008; static const XrExternalCameraStatusFlagsOCULUS XR_EXTERNAL_CAMERA_STATUS_CAPTURING_BIT_OCULUS = 0x00000010; typedef struct XrExternalCameraIntrinsicsOCULUS { XrTime lastChangeTime; XrFovf fov; float virtualNearPlaneDistance; float virtualFarPlaneDistance; XrExtent2Di imageSensorPixelResolution; } XrExternalCameraIntrinsicsOCULUS; typedef struct XrExternalCameraExtrinsicsOCULUS { XrTime lastChangeTime; XrExternalCameraStatusFlagsOCULUS cameraStatusFlags; XrExternalCameraAttachedToDeviceOCULUS attachedToDevice; XrPosef relativePose; } XrExternalCameraExtrinsicsOCULUS; typedef struct XrExternalCameraOCULUS { XrStructureType type; const void* next; char name[32]; XrExternalCameraIntrinsicsOCULUS intrinsics; XrExternalCameraExtrinsicsOCULUS extrinsics; } XrExternalCameraOCULUS; typedef XrResult (*PFN_xrEnumerateExternalCamerasOCULUS)(XrSession session, uint32_t cameraCapacityInput, uint32_t* cameraCountOutput, XrExternalCameraOCULUS* cameras);
XrResult  xrEnumerateExternalCamerasOCULUS(XrSession session, uint32_t cameraCapacityInput, uint32_t* cameraCountOutput, XrExternalCameraOCULUS* cameras);
#line 6781 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 6782 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef enum XrPerformanceMetricsCounterUnitMETA { XR_PERFORMANCE_METRICS_COUNTER_UNIT_GENERIC_META = 0, XR_PERFORMANCE_METRICS_COUNTER_UNIT_PERCENTAGE_META = 1, XR_PERFORMANCE_METRICS_COUNTER_UNIT_MILLISECONDS_META = 2, XR_PERFORMANCE_METRICS_COUNTER_UNIT_BYTES_META = 3, XR_PERFORMANCE_METRICS_COUNTER_UNIT_HERTZ_META = 4, XR_PERFORMANCE_METRICS_COUNTER_UNIT_MAX_ENUM_META = 0x7FFFFFFF } XrPerformanceMetricsCounterUnitMETA; typedef XrFlags64 XrPerformanceMetricsCounterFlagsMETA; static const XrPerformanceMetricsCounterFlagsMETA XR_PERFORMANCE_METRICS_COUNTER_ANY_VALUE_VALID_BIT_META = 0x00000001; static const XrPerformanceMetricsCounterFlagsMETA XR_PERFORMANCE_METRICS_COUNTER_UINT_VALUE_VALID_BIT_META = 0x00000002; static const XrPerformanceMetricsCounterFlagsMETA XR_PERFORMANCE_METRICS_COUNTER_FLOAT_VALUE_VALID_BIT_META = 0x00000004; typedef struct XrPerformanceMetricsStateMETA { XrStructureType type; const void* next; XrBool32 enabled; } XrPerformanceMetricsStateMETA; typedef struct XrPerformanceMetricsCounterMETA { XrStructureType type; const void* next; XrPerformanceMetricsCounterFlagsMETA counterFlags; XrPerformanceMetricsCounterUnitMETA counterUnit; uint32_t uintValue; float floatValue; } XrPerformanceMetricsCounterMETA; typedef XrResult (*PFN_xrEnumeratePerformanceMetricsCounterPathsMETA)(XrInstance instance, uint32_t counterPathCapacityInput, uint32_t* counterPathCountOutput, XrPath* counterPaths);
typedef XrResult (*PFN_xrSetPerformanceMetricsStateMETA)(XrSession session, const XrPerformanceMetricsStateMETA* state);
typedef XrResult (*PFN_xrGetPerformanceMetricsStateMETA)(XrSession session, XrPerformanceMetricsStateMETA* state);
typedef XrResult (*PFN_xrQueryPerformanceMetricsCounterMETA)(XrSession session, XrPath counterPath, XrPerformanceMetricsCounterMETA* counter);
XrResult  xrEnumeratePerformanceMetricsCounterPathsMETA(XrInstance instance, uint32_t counterPathCapacityInput, uint32_t* counterPathCountOutput, XrPath* counterPaths);
XrResult  xrSetPerformanceMetricsStateMETA(XrSession session, const XrPerformanceMetricsStateMETA* state);
XrResult  xrGetPerformanceMetricsStateMETA(XrSession session, XrPerformanceMetricsStateMETA* state);
XrResult  xrQueryPerformanceMetricsCounterMETA(XrSession session, XrPath counterPath, XrPerformanceMetricsCounterMETA* counter);
#line 6845 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 6846 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrSpaceListSaveInfoFB { XrStructureType type; const void* next; uint32_t spaceCount; XrSpace* spaces; XrSpaceStorageLocationFB location; } XrSpaceListSaveInfoFB; typedef struct XrEventDataSpaceListSaveCompleteFB { XrStructureType type; const void* next; XrAsyncRequestIdFB requestId; XrResult result; } XrEventDataSpaceListSaveCompleteFB; typedef XrResult (*PFN_xrSaveSpaceListFB)(XrSession session, const XrSpaceListSaveInfoFB* info, XrAsyncRequestIdFB* requestId);
XrResult  xrSaveSpaceListFB(XrSession session, const XrSpaceListSaveInfoFB* info, XrAsyncRequestIdFB* requestId);
#line 6876 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 6877 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef uint64_t XrSpaceUserIdFB; typedef struct XrSpaceUserCreateInfoFB { XrStructureType type; const void* next; XrSpaceUserIdFB userId; } XrSpaceUserCreateInfoFB; typedef XrResult (*PFN_xrCreateSpaceUserFB)(XrSession session, const XrSpaceUserCreateInfoFB* info, XrSpaceUserFB* user);
typedef XrResult (*PFN_xrGetSpaceUserIdFB)(XrSpaceUserFB user, XrSpaceUserIdFB* userId);
typedef XrResult (*PFN_xrDestroySpaceUserFB)(XrSpaceUserFB user);
XrResult  xrCreateSpaceUserFB(XrSession session, const XrSpaceUserCreateInfoFB* info, XrSpaceUserFB* user);
XrResult  xrGetSpaceUserIdFB(XrSpaceUserFB user, XrSpaceUserIdFB* userId);
XrResult  xrDestroySpaceUserFB(XrSpaceUserFB user);
#line 6914 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 6915 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrSystemHeadsetIdPropertiesMETA { XrStructureType type; void* next; XrUuidEXT id; } XrSystemHeadsetIdPropertiesMETA; typedef struct XrRecommendedLayerResolutionMETA { XrStructureType type; void* next; XrExtent2Di recommendedImageDimensions; XrBool32 isValid; } XrRecommendedLayerResolutionMETA; typedef struct XrRecommendedLayerResolutionGetInfoMETA { XrStructureType type; const void* next; const XrCompositionLayerBaseHeader* layer; XrTime predictedDisplayTime; } XrRecommendedLayerResolutionGetInfoMETA; typedef XrResult (*PFN_xrGetRecommendedLayerResolutionMETA)(XrSession session, const XrRecommendedLayerResolutionGetInfoMETA* info, XrRecommendedLayerResolutionMETA* resolution);
XrResult  xrGetRecommendedLayerResolutionMETA(XrSession session, const XrRecommendedLayerResolutionGetInfoMETA* info, XrRecommendedLayerResolutionMETA* resolution);
#line 6963 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 6964 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrPassthroughColorLutMETA_T* XrPassthroughColorLutMETA; typedef enum XrPassthroughColorLutChannelsMETA { XR_PASSTHROUGH_COLOR_LUT_CHANNELS_RGB_META = 1, XR_PASSTHROUGH_COLOR_LUT_CHANNELS_RGBA_META = 2, XR_PASSTHROUGH_COLOR_LUT_CHANNELS_MAX_ENUM_META = 0x7FFFFFFF } XrPassthroughColorLutChannelsMETA; typedef struct XrPassthroughColorLutDataMETA { uint32_t bufferSize; const uint8_t* buffer; } XrPassthroughColorLutDataMETA; typedef struct XrPassthroughColorLutCreateInfoMETA { XrStructureType type; const void* next; XrPassthroughColorLutChannelsMETA channels; uint32_t resolution; XrPassthroughColorLutDataMETA data; } XrPassthroughColorLutCreateInfoMETA; typedef struct XrPassthroughColorLutUpdateInfoMETA { XrStructureType type; const void* next; XrPassthroughColorLutDataMETA data; } XrPassthroughColorLutUpdateInfoMETA; typedef struct XrPassthroughColorMapLutMETA { XrStructureType type; const void* next; XrPassthroughColorLutMETA colorLut; float weight; } XrPassthroughColorMapLutMETA; typedef struct XrPassthroughColorMapInterpolatedLutMETA { XrStructureType type; const void* next; XrPassthroughColorLutMETA sourceColorLut; XrPassthroughColorLutMETA targetColorLut; float weight; } XrPassthroughColorMapInterpolatedLutMETA; typedef struct XrSystemPassthroughColorLutPropertiesMETA { XrStructureType type; const void* next; uint32_t maxColorLutResolution; } XrSystemPassthroughColorLutPropertiesMETA; typedef XrResult (*PFN_xrCreatePassthroughColorLutMETA)(XrPassthroughFB passthrough, const XrPassthroughColorLutCreateInfoMETA* createInfo, XrPassthroughColorLutMETA* colorLut);
typedef XrResult (*PFN_xrDestroyPassthroughColorLutMETA)(XrPassthroughColorLutMETA colorLut);
typedef XrResult (*PFN_xrUpdatePassthroughColorLutMETA)(XrPassthroughColorLutMETA colorLut, const XrPassthroughColorLutUpdateInfoMETA* updateInfo);
XrResult  xrCreatePassthroughColorLutMETA(XrPassthroughFB passthrough, const XrPassthroughColorLutCreateInfoMETA* createInfo, XrPassthroughColorLutMETA* colorLut);
XrResult  xrDestroyPassthroughColorLutMETA(XrPassthroughColorLutMETA colorLut);
XrResult  xrUpdatePassthroughColorLutMETA(XrPassthroughColorLutMETA colorLut, const XrPassthroughColorLutUpdateInfoMETA* updateInfo);
#line 7038 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 7039 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrSpaceTriangleMeshGetInfoMETA { XrStructureType type; const void* next; } XrSpaceTriangleMeshGetInfoMETA; typedef struct XrSpaceTriangleMeshMETA { XrStructureType type; void* next; uint32_t vertexCapacityInput; uint32_t vertexCountOutput; XrVector3f* vertices; uint32_t indexCapacityInput; uint32_t indexCountOutput; uint32_t* indices; } XrSpaceTriangleMeshMETA; typedef XrResult (*PFN_xrGetSpaceTriangleMeshMETA)(XrSpace space, const XrSpaceTriangleMeshGetInfoMETA* getInfo, XrSpaceTriangleMeshMETA* triangleMeshOutput);
XrResult  xrGetSpaceTriangleMeshMETA(XrSpace space, const XrSpaceTriangleMeshGetInfoMETA* getInfo, XrSpaceTriangleMeshMETA* triangleMeshOutput);
#line 7070 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 7071 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef enum XrFullBodyJointMETA { XR_FULL_BODY_JOINT_ROOT_META = 0, XR_FULL_BODY_JOINT_HIPS_META = 1, XR_FULL_BODY_JOINT_SPINE_LOWER_META = 2, XR_FULL_BODY_JOINT_SPINE_MIDDLE_META = 3, XR_FULL_BODY_JOINT_SPINE_UPPER_META = 4, XR_FULL_BODY_JOINT_CHEST_META = 5, XR_FULL_BODY_JOINT_NECK_META = 6, XR_FULL_BODY_JOINT_HEAD_META = 7, XR_FULL_BODY_JOINT_LEFT_SHOULDER_META = 8, XR_FULL_BODY_JOINT_LEFT_SCAPULA_META = 9, XR_FULL_BODY_JOINT_LEFT_ARM_UPPER_META = 10, XR_FULL_BODY_JOINT_LEFT_ARM_LOWER_META = 11, XR_FULL_BODY_JOINT_LEFT_HAND_WRIST_TWIST_META = 12, XR_FULL_BODY_JOINT_RIGHT_SHOULDER_META = 13, XR_FULL_BODY_JOINT_RIGHT_SCAPULA_META = 14, XR_FULL_BODY_JOINT_RIGHT_ARM_UPPER_META = 15, XR_FULL_BODY_JOINT_RIGHT_ARM_LOWER_META = 16, XR_FULL_BODY_JOINT_RIGHT_HAND_WRIST_TWIST_META = 17, XR_FULL_BODY_JOINT_LEFT_HAND_PALM_META = 18, XR_FULL_BODY_JOINT_LEFT_HAND_WRIST_META = 19, XR_FULL_BODY_JOINT_LEFT_HAND_THUMB_METACARPAL_META = 20, XR_FULL_BODY_JOINT_LEFT_HAND_THUMB_PROXIMAL_META = 21, XR_FULL_BODY_JOINT_LEFT_HAND_THUMB_DISTAL_META = 22, XR_FULL_BODY_JOINT_LEFT_HAND_THUMB_TIP_META = 23, XR_FULL_BODY_JOINT_LEFT_HAND_INDEX_METACARPAL_META = 24, XR_FULL_BODY_JOINT_LEFT_HAND_INDEX_PROXIMAL_META = 25, XR_FULL_BODY_JOINT_LEFT_HAND_INDEX_INTERMEDIATE_META = 26, XR_FULL_BODY_JOINT_LEFT_HAND_INDEX_DISTAL_META = 27, XR_FULL_BODY_JOINT_LEFT_HAND_INDEX_TIP_META = 28, XR_FULL_BODY_JOINT_LEFT_HAND_MIDDLE_METACARPAL_META = 29, XR_FULL_BODY_JOINT_LEFT_HAND_MIDDLE_PROXIMAL_META = 30, XR_FULL_BODY_JOINT_LEFT_HAND_MIDDLE_INTERMEDIATE_META = 31, XR_FULL_BODY_JOINT_LEFT_HAND_MIDDLE_DISTAL_META = 32, XR_FULL_BODY_JOINT_LEFT_HAND_MIDDLE_TIP_META = 33, XR_FULL_BODY_JOINT_LEFT_HAND_RING_METACARPAL_META = 34, XR_FULL_BODY_JOINT_LEFT_HAND_RING_PROXIMAL_META = 35, XR_FULL_BODY_JOINT_LEFT_HAND_RING_INTERMEDIATE_META = 36, XR_FULL_BODY_JOINT_LEFT_HAND_RING_DISTAL_META = 37, XR_FULL_BODY_JOINT_LEFT_HAND_RING_TIP_META = 38, XR_FULL_BODY_JOINT_LEFT_HAND_LITTLE_METACARPAL_META = 39, XR_FULL_BODY_JOINT_LEFT_HAND_LITTLE_PROXIMAL_META = 40, XR_FULL_BODY_JOINT_LEFT_HAND_LITTLE_INTERMEDIATE_META = 41, XR_FULL_BODY_JOINT_LEFT_HAND_LITTLE_DISTAL_META = 42, XR_FULL_BODY_JOINT_LEFT_HAND_LITTLE_TIP_META = 43, XR_FULL_BODY_JOINT_RIGHT_HAND_PALM_META = 44, XR_FULL_BODY_JOINT_RIGHT_HAND_WRIST_META = 45, XR_FULL_BODY_JOINT_RIGHT_HAND_THUMB_METACARPAL_META = 46, XR_FULL_BODY_JOINT_RIGHT_HAND_THUMB_PROXIMAL_META = 47, XR_FULL_BODY_JOINT_RIGHT_HAND_THUMB_DISTAL_META = 48, XR_FULL_BODY_JOINT_RIGHT_HAND_THUMB_TIP_META = 49, XR_FULL_BODY_JOINT_RIGHT_HAND_INDEX_METACARPAL_META = 50, XR_FULL_BODY_JOINT_RIGHT_HAND_INDEX_PROXIMAL_META = 51, XR_FULL_BODY_JOINT_RIGHT_HAND_INDEX_INTERMEDIATE_META = 52, XR_FULL_BODY_JOINT_RIGHT_HAND_INDEX_DISTAL_META = 53, XR_FULL_BODY_JOINT_RIGHT_HAND_INDEX_TIP_META = 54, XR_FULL_BODY_JOINT_RIGHT_HAND_MIDDLE_METACARPAL_META = 55, XR_FULL_BODY_JOINT_RIGHT_HAND_MIDDLE_PROXIMAL_META = 56, XR_FULL_BODY_JOINT_RIGHT_HAND_MIDDLE_INTERMEDIATE_META = 57, XR_FULL_BODY_JOINT_RIGHT_HAND_MIDDLE_DISTAL_META = 58, XR_FULL_BODY_JOINT_RIGHT_HAND_MIDDLE_TIP_META = 59, XR_FULL_BODY_JOINT_RIGHT_HAND_RING_METACARPAL_META = 60, XR_FULL_BODY_JOINT_RIGHT_HAND_RING_PROXIMAL_META = 61, XR_FULL_BODY_JOINT_RIGHT_HAND_RING_INTERMEDIATE_META = 62, XR_FULL_BODY_JOINT_RIGHT_HAND_RING_DISTAL_META = 63, XR_FULL_BODY_JOINT_RIGHT_HAND_RING_TIP_META = 64, XR_FULL_BODY_JOINT_RIGHT_HAND_LITTLE_METACARPAL_META = 65, XR_FULL_BODY_JOINT_RIGHT_HAND_LITTLE_PROXIMAL_META = 66, XR_FULL_BODY_JOINT_RIGHT_HAND_LITTLE_INTERMEDIATE_META = 67, XR_FULL_BODY_JOINT_RIGHT_HAND_LITTLE_DISTAL_META = 68, XR_FULL_BODY_JOINT_RIGHT_HAND_LITTLE_TIP_META = 69, XR_FULL_BODY_JOINT_LEFT_UPPER_LEG_META = 70, XR_FULL_BODY_JOINT_LEFT_LOWER_LEG_META = 71, XR_FULL_BODY_JOINT_LEFT_FOOT_ANKLE_TWIST_META = 72, XR_FULL_BODY_JOINT_LEFT_FOOT_ANKLE_META = 73, XR_FULL_BODY_JOINT_LEFT_FOOT_SUBTALAR_META = 74, XR_FULL_BODY_JOINT_LEFT_FOOT_TRANSVERSE_META = 75, XR_FULL_BODY_JOINT_LEFT_FOOT_BALL_META = 76, XR_FULL_BODY_JOINT_RIGHT_UPPER_LEG_META = 77, XR_FULL_BODY_JOINT_RIGHT_LOWER_LEG_META = 78, XR_FULL_BODY_JOINT_RIGHT_FOOT_ANKLE_TWIST_META = 79, XR_FULL_BODY_JOINT_RIGHT_FOOT_ANKLE_META = 80, XR_FULL_BODY_JOINT_RIGHT_FOOT_SUBTALAR_META = 81, XR_FULL_BODY_JOINT_RIGHT_FOOT_TRANSVERSE_META = 82, XR_FULL_BODY_JOINT_RIGHT_FOOT_BALL_META = 83, XR_FULL_BODY_JOINT_COUNT_META = 84, XR_FULL_BODY_JOINT_NONE_META = 85, XR_FULL_BODY_JOINT_MAX_ENUM_META = 0x7FFFFFFF } XrFullBodyJointMETA; typedef struct XrSystemPropertiesBodyTrackingFullBodyMETA { XrStructureType type; void* next; XrBool32 supportsFullBodyTracking; } XrSystemPropertiesBodyTrackingFullBodyMETA; typedef struct XrEventDataPassthroughLayerResumedMETA { XrStructureType type; const void* next; XrPassthroughLayerFB layer; } XrEventDataPassthroughLayerResumedMETA; typedef struct XrFaceTracker2FB_T* XrFaceTracker2FB; typedef enum XrFaceExpression2FB { XR_FACE_EXPRESSION2_BROW_LOWERER_L_FB = 0, XR_FACE_EXPRESSION2_BROW_LOWERER_R_FB = 1, XR_FACE_EXPRESSION2_CHEEK_PUFF_L_FB = 2, XR_FACE_EXPRESSION2_CHEEK_PUFF_R_FB = 3, XR_FACE_EXPRESSION2_CHEEK_RAISER_L_FB = 4, XR_FACE_EXPRESSION2_CHEEK_RAISER_R_FB = 5, XR_FACE_EXPRESSION2_CHEEK_SUCK_L_FB = 6, XR_FACE_EXPRESSION2_CHEEK_SUCK_R_FB = 7, XR_FACE_EXPRESSION2_CHIN_RAISER_B_FB = 8, XR_FACE_EXPRESSION2_CHIN_RAISER_T_FB = 9, XR_FACE_EXPRESSION2_DIMPLER_L_FB = 10, XR_FACE_EXPRESSION2_DIMPLER_R_FB = 11, XR_FACE_EXPRESSION2_EYES_CLOSED_L_FB = 12, XR_FACE_EXPRESSION2_EYES_CLOSED_R_FB = 13, XR_FACE_EXPRESSION2_EYES_LOOK_DOWN_L_FB = 14, XR_FACE_EXPRESSION2_EYES_LOOK_DOWN_R_FB = 15, XR_FACE_EXPRESSION2_EYES_LOOK_LEFT_L_FB = 16, XR_FACE_EXPRESSION2_EYES_LOOK_LEFT_R_FB = 17, XR_FACE_EXPRESSION2_EYES_LOOK_RIGHT_L_FB = 18, XR_FACE_EXPRESSION2_EYES_LOOK_RIGHT_R_FB = 19, XR_FACE_EXPRESSION2_EYES_LOOK_UP_L_FB = 20, XR_FACE_EXPRESSION2_EYES_LOOK_UP_R_FB = 21, XR_FACE_EXPRESSION2_INNER_BROW_RAISER_L_FB = 22, XR_FACE_EXPRESSION2_INNER_BROW_RAISER_R_FB = 23, XR_FACE_EXPRESSION2_JAW_DROP_FB = 24, XR_FACE_EXPRESSION2_JAW_SIDEWAYS_LEFT_FB = 25, XR_FACE_EXPRESSION2_JAW_SIDEWAYS_RIGHT_FB = 26, XR_FACE_EXPRESSION2_JAW_THRUST_FB = 27, XR_FACE_EXPRESSION2_LID_TIGHTENER_L_FB = 28, XR_FACE_EXPRESSION2_LID_TIGHTENER_R_FB = 29, XR_FACE_EXPRESSION2_LIP_CORNER_DEPRESSOR_L_FB = 30, XR_FACE_EXPRESSION2_LIP_CORNER_DEPRESSOR_R_FB = 31, XR_FACE_EXPRESSION2_LIP_CORNER_PULLER_L_FB = 32, XR_FACE_EXPRESSION2_LIP_CORNER_PULLER_R_FB = 33, XR_FACE_EXPRESSION2_LIP_FUNNELER_LB_FB = 34, XR_FACE_EXPRESSION2_LIP_FUNNELER_LT_FB = 35, XR_FACE_EXPRESSION2_LIP_FUNNELER_RB_FB = 36, XR_FACE_EXPRESSION2_LIP_FUNNELER_RT_FB = 37, XR_FACE_EXPRESSION2_LIP_PRESSOR_L_FB = 38, XR_FACE_EXPRESSION2_LIP_PRESSOR_R_FB = 39, XR_FACE_EXPRESSION2_LIP_PUCKER_L_FB = 40, XR_FACE_EXPRESSION2_LIP_PUCKER_R_FB = 41, XR_FACE_EXPRESSION2_LIP_STRETCHER_L_FB = 42, XR_FACE_EXPRESSION2_LIP_STRETCHER_R_FB = 43, XR_FACE_EXPRESSION2_LIP_SUCK_LB_FB = 44, XR_FACE_EXPRESSION2_LIP_SUCK_LT_FB = 45, XR_FACE_EXPRESSION2_LIP_SUCK_RB_FB = 46, XR_FACE_EXPRESSION2_LIP_SUCK_RT_FB = 47, XR_FACE_EXPRESSION2_LIP_TIGHTENER_L_FB = 48, XR_FACE_EXPRESSION2_LIP_TIGHTENER_R_FB = 49, XR_FACE_EXPRESSION2_LIPS_TOWARD_FB = 50, XR_FACE_EXPRESSION2_LOWER_LIP_DEPRESSOR_L_FB = 51, XR_FACE_EXPRESSION2_LOWER_LIP_DEPRESSOR_R_FB = 52, XR_FACE_EXPRESSION2_MOUTH_LEFT_FB = 53, XR_FACE_EXPRESSION2_MOUTH_RIGHT_FB = 54, XR_FACE_EXPRESSION2_NOSE_WRINKLER_L_FB = 55, XR_FACE_EXPRESSION2_NOSE_WRINKLER_R_FB = 56, XR_FACE_EXPRESSION2_OUTER_BROW_RAISER_L_FB = 57, XR_FACE_EXPRESSION2_OUTER_BROW_RAISER_R_FB = 58, XR_FACE_EXPRESSION2_UPPER_LID_RAISER_L_FB = 59, XR_FACE_EXPRESSION2_UPPER_LID_RAISER_R_FB = 60, XR_FACE_EXPRESSION2_UPPER_LIP_RAISER_L_FB = 61, XR_FACE_EXPRESSION2_UPPER_LIP_RAISER_R_FB = 62, XR_FACE_EXPRESSION2_TONGUE_TIP_INTERDENTAL_FB = 63, XR_FACE_EXPRESSION2_TONGUE_TIP_ALVEOLAR_FB = 64, XR_FACE_EXPRESSION2_TONGUE_FRONT_DORSAL_PALATE_FB = 65, XR_FACE_EXPRESSION2_TONGUE_MID_DORSAL_PALATE_FB = 66, XR_FACE_EXPRESSION2_TONGUE_BACK_DORSAL_VELAR_FB = 67, XR_FACE_EXPRESSION2_TONGUE_OUT_FB = 68, XR_FACE_EXPRESSION2_TONGUE_RETREAT_FB = 69, XR_FACE_EXPRESSION2_COUNT_FB = 70, XR_FACE_EXPRESSION_2FB_MAX_ENUM_FB = 0x7FFFFFFF } XrFaceExpression2FB; typedef enum XrFaceExpressionSet2FB { XR_FACE_EXPRESSION_SET2_DEFAULT_FB = 0, XR_FACE_EXPRESSION_SET_2FB_MAX_ENUM_FB = 0x7FFFFFFF } XrFaceExpressionSet2FB; typedef enum XrFaceTrackingDataSource2FB { XR_FACE_TRACKING_DATA_SOURCE2_VISUAL_FB = 0, XR_FACE_TRACKING_DATA_SOURCE2_AUDIO_FB = 1, XR_FACE_TRACKING_DATA_SOURCE_2FB_MAX_ENUM_FB = 0x7FFFFFFF } XrFaceTrackingDataSource2FB; typedef enum XrFaceConfidence2FB { XR_FACE_CONFIDENCE2_LOWER_FACE_FB = 0, XR_FACE_CONFIDENCE2_UPPER_FACE_FB = 1, XR_FACE_CONFIDENCE2_COUNT_FB = 2, XR_FACE_CONFIDENCE_2FB_MAX_ENUM_FB = 0x7FFFFFFF } XrFaceConfidence2FB; typedef struct XrSystemFaceTrackingProperties2FB { XrStructureType type; void* next; XrBool32 supportsVisualFaceTracking; XrBool32 supportsAudioFaceTracking; } XrSystemFaceTrackingProperties2FB; typedef struct XrFaceTrackerCreateInfo2FB { XrStructureType type; const void* next; XrFaceExpressionSet2FB faceExpressionSet; uint32_t requestedDataSourceCount; XrFaceTrackingDataSource2FB* requestedDataSources; } XrFaceTrackerCreateInfo2FB; typedef struct XrFaceExpressionInfo2FB { XrStructureType type; const void* next; XrTime time; } XrFaceExpressionInfo2FB; typedef struct XrFaceExpressionWeights2FB { XrStructureType type; void* next; uint32_t weightCount; float* weights; uint32_t confidenceCount; float* confidences; XrBool32 isValid; XrBool32 isEyeFollowingBlendshapesValid; XrFaceTrackingDataSource2FB dataSource; XrTime time; } XrFaceExpressionWeights2FB; typedef XrResult (*PFN_xrCreateFaceTracker2FB)(XrSession session, const XrFaceTrackerCreateInfo2FB* createInfo, XrFaceTracker2FB* faceTracker);
typedef XrResult (*PFN_xrDestroyFaceTracker2FB)(XrFaceTracker2FB faceTracker);
typedef XrResult (*PFN_xrGetFaceExpressionWeights2FB)(XrFaceTracker2FB faceTracker, const XrFaceExpressionInfo2FB* expressionInfo, XrFaceExpressionWeights2FB* expressionWeights);
XrResult  xrCreateFaceTracker2FB(XrSession session, const XrFaceTrackerCreateInfo2FB* createInfo, XrFaceTracker2FB* faceTracker);
XrResult  xrDestroyFaceTracker2FB(XrFaceTracker2FB faceTracker);
XrResult  xrGetFaceExpressionWeights2FB(XrFaceTracker2FB faceTracker, const XrFaceExpressionInfo2FB* expressionInfo, XrFaceExpressionWeights2FB* expressionWeights);
#line 7352 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 7353 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrSystemSpatialEntitySharingPropertiesMETA { XrStructureType type; void* next; XrBool32 supportsSpatialEntitySharing; } XrSystemSpatialEntitySharingPropertiesMETA; typedef struct XrShareSpacesRecipientBaseHeaderMETA { XrStructureType type; const void* next; } XrShareSpacesRecipientBaseHeaderMETA; typedef struct XrShareSpacesInfoMETA { XrStructureType type; const void* next; uint32_t spaceCount; XrSpace* spaces; const XrShareSpacesRecipientBaseHeaderMETA* recipientInfo; } XrShareSpacesInfoMETA; typedef struct XrEventDataShareSpacesCompleteMETA { XrStructureType type; const void* next; XrAsyncRequestIdFB requestId; XrResult result; } XrEventDataShareSpacesCompleteMETA; typedef XrResult (*PFN_xrShareSpacesMETA)(XrSession session, const XrShareSpacesInfoMETA* info, XrAsyncRequestIdFB* requestId);
XrResult  xrShareSpacesMETA(XrSession session, const XrShareSpacesInfoMETA* info, XrAsyncRequestIdFB* requestId);
#line 7396 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 7397 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrEnvironmentDepthProviderMETA_T* XrEnvironmentDepthProviderMETA; typedef struct XrEnvironmentDepthSwapchainMETA_T* XrEnvironmentDepthSwapchainMETA; typedef XrFlags64 XrEnvironmentDepthProviderCreateFlagsMETA; typedef XrFlags64 XrEnvironmentDepthSwapchainCreateFlagsMETA; typedef struct XrEnvironmentDepthProviderCreateInfoMETA { XrStructureType type; const void* next; XrEnvironmentDepthProviderCreateFlagsMETA createFlags; } XrEnvironmentDepthProviderCreateInfoMETA; typedef struct XrEnvironmentDepthSwapchainCreateInfoMETA { XrStructureType type; const void* next; XrEnvironmentDepthSwapchainCreateFlagsMETA createFlags; } XrEnvironmentDepthSwapchainCreateInfoMETA; typedef struct XrEnvironmentDepthSwapchainStateMETA { XrStructureType type; void* next; uint32_t width; uint32_t height; } XrEnvironmentDepthSwapchainStateMETA; typedef struct XrEnvironmentDepthImageAcquireInfoMETA { XrStructureType type; const void* next; XrSpace space; XrTime displayTime; } XrEnvironmentDepthImageAcquireInfoMETA; typedef struct XrEnvironmentDepthImageViewMETA { XrStructureType type; const void* next; XrFovf fov; XrPosef pose; } XrEnvironmentDepthImageViewMETA; typedef struct XrEnvironmentDepthImageMETA { XrStructureType type; const void* next; uint32_t swapchainIndex; float nearZ; float farZ; XrEnvironmentDepthImageViewMETA views[2]; } XrEnvironmentDepthImageMETA; typedef struct XrEnvironmentDepthHandRemovalSetInfoMETA { XrStructureType type; const void* next; XrBool32 enabled; } XrEnvironmentDepthHandRemovalSetInfoMETA; typedef struct XrSystemEnvironmentDepthPropertiesMETA { XrStructureType type; void* next; XrBool32 supportsEnvironmentDepth; XrBool32 supportsHandRemoval; } XrSystemEnvironmentDepthPropertiesMETA; typedef XrResult (*PFN_xrCreateEnvironmentDepthProviderMETA)(XrSession session, const XrEnvironmentDepthProviderCreateInfoMETA* createInfo, XrEnvironmentDepthProviderMETA* environmentDepthProvider);
typedef XrResult (*PFN_xrDestroyEnvironmentDepthProviderMETA)(XrEnvironmentDepthProviderMETA environmentDepthProvider);
typedef XrResult (*PFN_xrStartEnvironmentDepthProviderMETA)(XrEnvironmentDepthProviderMETA environmentDepthProvider);
typedef XrResult (*PFN_xrStopEnvironmentDepthProviderMETA)(XrEnvironmentDepthProviderMETA environmentDepthProvider);
typedef XrResult (*PFN_xrCreateEnvironmentDepthSwapchainMETA)(XrEnvironmentDepthProviderMETA environmentDepthProvider, const XrEnvironmentDepthSwapchainCreateInfoMETA* createInfo, XrEnvironmentDepthSwapchainMETA* swapchain);
typedef XrResult (*PFN_xrDestroyEnvironmentDepthSwapchainMETA)(XrEnvironmentDepthSwapchainMETA swapchain);
typedef XrResult (*PFN_xrEnumerateEnvironmentDepthSwapchainImagesMETA)(XrEnvironmentDepthSwapchainMETA swapchain, uint32_t imageCapacityInput, uint32_t* imageCountOutput, XrSwapchainImageBaseHeader* images);
typedef XrResult (*PFN_xrGetEnvironmentDepthSwapchainStateMETA)(XrEnvironmentDepthSwapchainMETA swapchain, XrEnvironmentDepthSwapchainStateMETA* state);
typedef XrResult (*PFN_xrAcquireEnvironmentDepthImageMETA)(XrEnvironmentDepthProviderMETA environmentDepthProvider, const XrEnvironmentDepthImageAcquireInfoMETA* acquireInfo, XrEnvironmentDepthImageMETA* environmentDepthImage);
typedef XrResult (*PFN_xrSetEnvironmentDepthHandRemovalMETA)(XrEnvironmentDepthProviderMETA environmentDepthProvider, const XrEnvironmentDepthHandRemovalSetInfoMETA* setInfo);
XrResult  xrCreateEnvironmentDepthProviderMETA(XrSession session, const XrEnvironmentDepthProviderCreateInfoMETA* createInfo, XrEnvironmentDepthProviderMETA* environmentDepthProvider);
XrResult  xrDestroyEnvironmentDepthProviderMETA(XrEnvironmentDepthProviderMETA environmentDepthProvider);
XrResult  xrStartEnvironmentDepthProviderMETA(XrEnvironmentDepthProviderMETA environmentDepthProvider);
XrResult  xrStopEnvironmentDepthProviderMETA(XrEnvironmentDepthProviderMETA environmentDepthProvider);
XrResult  xrCreateEnvironmentDepthSwapchainMETA(XrEnvironmentDepthProviderMETA environmentDepthProvider, const XrEnvironmentDepthSwapchainCreateInfoMETA* createInfo, XrEnvironmentDepthSwapchainMETA* swapchain);
XrResult  xrDestroyEnvironmentDepthSwapchainMETA(XrEnvironmentDepthSwapchainMETA swapchain);
XrResult  xrEnumerateEnvironmentDepthSwapchainImagesMETA(XrEnvironmentDepthSwapchainMETA swapchain, uint32_t imageCapacityInput, uint32_t* imageCountOutput, XrSwapchainImageBaseHeader* images);
XrResult  xrGetEnvironmentDepthSwapchainStateMETA(XrEnvironmentDepthSwapchainMETA swapchain, XrEnvironmentDepthSwapchainStateMETA* state);
XrResult  xrAcquireEnvironmentDepthImageMETA(XrEnvironmentDepthProviderMETA environmentDepthProvider, const XrEnvironmentDepthImageAcquireInfoMETA* acquireInfo, XrEnvironmentDepthImageMETA* environmentDepthImage);
XrResult  xrSetEnvironmentDepthHandRemovalMETA(XrEnvironmentDepthProviderMETA environmentDepthProvider, const XrEnvironmentDepthHandRemovalSetInfoMETA* setInfo);
#line 7523 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 7524 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef uint64_t XrRenderModelIdEXT; typedef struct XrRenderModelEXT_T* XrRenderModelEXT; typedef struct XrRenderModelAssetEXT_T* XrRenderModelAssetEXT; typedef struct XrRenderModelCreateInfoEXT { XrStructureType type; const void* next; XrRenderModelIdEXT renderModelId; uint32_t gltfExtensionCount; const char* const* gltfExtensions; } XrRenderModelCreateInfoEXT; typedef struct XrRenderModelPropertiesGetInfoEXT { XrStructureType type; const void* next; } XrRenderModelPropertiesGetInfoEXT; typedef struct XrRenderModelPropertiesEXT { XrStructureType type; void* next; XrUuidEXT cacheId; uint32_t animatableNodeCount; } XrRenderModelPropertiesEXT; typedef struct XrRenderModelSpaceCreateInfoEXT { XrStructureType type; const void* next; XrRenderModelEXT renderModel; } XrRenderModelSpaceCreateInfoEXT; typedef struct XrRenderModelStateGetInfoEXT { XrStructureType type; const void* next; XrTime displayTime; } XrRenderModelStateGetInfoEXT; typedef struct XrRenderModelNodeStateEXT { XrPosef nodePose; XrBool32 isVisible; } XrRenderModelNodeStateEXT; typedef struct XrRenderModelStateEXT { XrStructureType type; void* next; uint32_t nodeStateCount; XrRenderModelNodeStateEXT* nodeStates; } XrRenderModelStateEXT; typedef struct XrRenderModelAssetCreateInfoEXT { XrStructureType type; const void* next; XrUuidEXT cacheId; } XrRenderModelAssetCreateInfoEXT; typedef struct XrRenderModelAssetDataGetInfoEXT { XrStructureType type; const void* next; } XrRenderModelAssetDataGetInfoEXT; typedef struct XrRenderModelAssetDataEXT { XrStructureType type; void* next; uint32_t bufferCapacityInput; uint32_t bufferCountOutput; uint8_t* buffer; } XrRenderModelAssetDataEXT; typedef struct XrRenderModelAssetPropertiesGetInfoEXT { XrStructureType type; const void* next; } XrRenderModelAssetPropertiesGetInfoEXT; typedef struct XrRenderModelAssetNodePropertiesEXT { char uniqueName[64]; } XrRenderModelAssetNodePropertiesEXT; typedef struct XrRenderModelAssetPropertiesEXT { XrStructureType type; void* next; uint32_t nodePropertyCount; XrRenderModelAssetNodePropertiesEXT* nodeProperties; } XrRenderModelAssetPropertiesEXT; typedef XrResult (*PFN_xrCreateRenderModelEXT)(XrSession session, const XrRenderModelCreateInfoEXT* createInfo, XrRenderModelEXT* renderModel);
typedef XrResult (*PFN_xrDestroyRenderModelEXT)(XrRenderModelEXT renderModel);
typedef XrResult (*PFN_xrGetRenderModelPropertiesEXT)(XrRenderModelEXT renderModel, const XrRenderModelPropertiesGetInfoEXT* getInfo, XrRenderModelPropertiesEXT* properties);
typedef XrResult (*PFN_xrCreateRenderModelSpaceEXT)(XrSession session, const XrRenderModelSpaceCreateInfoEXT* createInfo, XrSpace* space);
typedef XrResult (*PFN_xrCreateRenderModelAssetEXT)(XrSession session, const XrRenderModelAssetCreateInfoEXT* createInfo, XrRenderModelAssetEXT* asset);
typedef XrResult (*PFN_xrDestroyRenderModelAssetEXT)(XrRenderModelAssetEXT asset);
typedef XrResult (*PFN_xrGetRenderModelAssetDataEXT)(XrRenderModelAssetEXT asset, const XrRenderModelAssetDataGetInfoEXT* getInfo, XrRenderModelAssetDataEXT* buffer);
typedef XrResult (*PFN_xrGetRenderModelAssetPropertiesEXT)(XrRenderModelAssetEXT asset, const XrRenderModelAssetPropertiesGetInfoEXT* getInfo, XrRenderModelAssetPropertiesEXT* properties);
typedef XrResult (*PFN_xrGetRenderModelStateEXT)(XrRenderModelEXT renderModel, const XrRenderModelStateGetInfoEXT* getInfo, XrRenderModelStateEXT* state);
XrResult  xrCreateRenderModelEXT(XrSession session, const XrRenderModelCreateInfoEXT* createInfo, XrRenderModelEXT* renderModel);
XrResult  xrDestroyRenderModelEXT(XrRenderModelEXT renderModel);
XrResult  xrGetRenderModelPropertiesEXT(XrRenderModelEXT renderModel, const XrRenderModelPropertiesGetInfoEXT* getInfo, XrRenderModelPropertiesEXT* properties);
XrResult  xrCreateRenderModelSpaceEXT(XrSession session, const XrRenderModelSpaceCreateInfoEXT* createInfo, XrSpace* space);
XrResult  xrCreateRenderModelAssetEXT(XrSession session, const XrRenderModelAssetCreateInfoEXT* createInfo, XrRenderModelAssetEXT* asset);
XrResult  xrDestroyRenderModelAssetEXT(XrRenderModelAssetEXT asset);
XrResult  xrGetRenderModelAssetDataEXT(XrRenderModelAssetEXT asset, const XrRenderModelAssetDataGetInfoEXT* getInfo, XrRenderModelAssetDataEXT* buffer);
XrResult  xrGetRenderModelAssetPropertiesEXT(XrRenderModelAssetEXT asset, const XrRenderModelAssetPropertiesGetInfoEXT* getInfo, XrRenderModelAssetPropertiesEXT* properties);
XrResult  xrGetRenderModelStateEXT(XrRenderModelEXT renderModel, const XrRenderModelStateGetInfoEXT* getInfo, XrRenderModelStateEXT* state);
#line 7674 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 7675 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrInteractionRenderModelIdsEnumerateInfoEXT { XrStructureType type; const void* next; } XrInteractionRenderModelIdsEnumerateInfoEXT; typedef struct XrInteractionRenderModelSubactionPathInfoEXT { XrStructureType type; const void* next; } XrInteractionRenderModelSubactionPathInfoEXT; typedef struct XrInteractionRenderModelTopLevelUserPathGetInfoEXT { XrStructureType type; const void* next; uint32_t topLevelUserPathCount; const XrPath* topLevelUserPaths; } XrInteractionRenderModelTopLevelUserPathGetInfoEXT; typedef struct XrEventDataInteractionRenderModelsChangedEXT { XrStructureType type; const void* next; } XrEventDataInteractionRenderModelsChangedEXT; typedef XrResult (*PFN_xrEnumerateInteractionRenderModelIdsEXT)(XrSession session, const XrInteractionRenderModelIdsEnumerateInfoEXT* getInfo, uint32_t renderModelIdCapacityInput, uint32_t* renderModelIdCountOutput, XrRenderModelIdEXT* renderModelIds);
typedef XrResult (*PFN_xrEnumerateRenderModelSubactionPathsEXT)(XrRenderModelEXT renderModel, const XrInteractionRenderModelSubactionPathInfoEXT* info, uint32_t pathCapacityInput, uint32_t* pathCountOutput, XrPath* paths);
typedef XrResult (*PFN_xrGetRenderModelPoseTopLevelUserPathEXT)(XrRenderModelEXT renderModel, const XrInteractionRenderModelTopLevelUserPathGetInfoEXT* info, XrPath* topLevelUserPath);
XrResult  xrEnumerateInteractionRenderModelIdsEXT(XrSession session, const XrInteractionRenderModelIdsEnumerateInfoEXT* getInfo, uint32_t renderModelIdCapacityInput, uint32_t* renderModelIdCountOutput, XrRenderModelIdEXT* renderModelIds);
XrResult  xrEnumerateRenderModelSubactionPathsEXT(XrRenderModelEXT renderModel, const XrInteractionRenderModelSubactionPathInfoEXT* info, uint32_t pathCapacityInput, uint32_t* pathCountOutput, XrPath* paths);
XrResult  xrGetRenderModelPoseTopLevelUserPathEXT(XrRenderModelEXT renderModel, const XrInteractionRenderModelTopLevelUserPathGetInfoEXT* info, XrPath* topLevelUserPath);
#line 7728 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 7729 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef enum XrTrackingOptimizationSettingsDomainQCOM { XR_TRACKING_OPTIMIZATION_SETTINGS_DOMAIN_ALL_QCOM = 1, XR_TRACKING_OPTIMIZATION_SETTINGS_DOMAIN_MAX_ENUM_QCOM = 0x7FFFFFFF } XrTrackingOptimizationSettingsDomainQCOM; typedef enum XrTrackingOptimizationSettingsHintQCOM { XR_TRACKING_OPTIMIZATION_SETTINGS_HINT_NONE_QCOM = 0, XR_TRACKING_OPTIMIZATION_SETTINGS_HINT_LONG_RANGE_PRIORIZATION_QCOM = 1, XR_TRACKING_OPTIMIZATION_SETTINGS_HINT_CLOSE_RANGE_PRIORIZATION_QCOM = 2, XR_TRACKING_OPTIMIZATION_SETTINGS_HINT_LOW_POWER_PRIORIZATION_QCOM = 3, XR_TRACKING_OPTIMIZATION_SETTINGS_HINT_HIGH_POWER_PRIORIZATION_QCOM = 4, XR_TRACKING_OPTIMIZATION_SETTINGS_HINT_MAX_ENUM_QCOM = 0x7FFFFFFF } XrTrackingOptimizationSettingsHintQCOM; typedef XrResult (*PFN_xrSetTrackingOptimizationSettingsHintQCOM)(XrSession session, XrTrackingOptimizationSettingsDomainQCOM domain, XrTrackingOptimizationSettingsHintQCOM hint);
XrResult  xrSetTrackingOptimizationSettingsHintQCOM(XrSession session, XrTrackingOptimizationSettingsDomainQCOM domain, XrTrackingOptimizationSettingsHintQCOM hint);
#line 7764 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 7765 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrPassthroughHTC_T* XrPassthroughHTC; typedef enum XrPassthroughFormHTC { XR_PASSTHROUGH_FORM_PLANAR_HTC = 0, XR_PASSTHROUGH_FORM_PROJECTED_HTC = 1, XR_PASSTHROUGH_FORM_MAX_ENUM_HTC = 0x7FFFFFFF } XrPassthroughFormHTC; typedef struct XrPassthroughCreateInfoHTC { XrStructureType type; const void* next; XrPassthroughFormHTC form; } XrPassthroughCreateInfoHTC; typedef struct XrPassthroughColorHTC { XrStructureType type; const void* next; float alpha; } XrPassthroughColorHTC; typedef struct XrPassthroughMeshTransformInfoHTC { XrStructureType type; const void* next; uint32_t vertexCount; const XrVector3f* vertices; uint32_t indexCount; const uint32_t* indices; XrSpace baseSpace; XrTime time; XrPosef pose; XrVector3f scale; } XrPassthroughMeshTransformInfoHTC; typedef struct XrCompositionLayerPassthroughHTC { XrStructureType type; const void* next; XrCompositionLayerFlags layerFlags; XrSpace space; XrPassthroughHTC passthrough; XrPassthroughColorHTC color; } XrCompositionLayerPassthroughHTC; typedef XrResult (*PFN_xrCreatePassthroughHTC)(XrSession session, const XrPassthroughCreateInfoHTC* createInfo, XrPassthroughHTC* passthrough);
typedef XrResult (*PFN_xrDestroyPassthroughHTC)(XrPassthroughHTC passthrough);
XrResult  xrCreatePassthroughHTC(XrSession session, const XrPassthroughCreateInfoHTC* createInfo, XrPassthroughHTC* passthrough);
XrResult  xrDestroyPassthroughHTC(XrPassthroughHTC passthrough);
#line 7826 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 7827 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef enum XrFoveationModeHTC { XR_FOVEATION_MODE_DISABLE_HTC = 0, XR_FOVEATION_MODE_FIXED_HTC = 1, XR_FOVEATION_MODE_DYNAMIC_HTC = 2, XR_FOVEATION_MODE_CUSTOM_HTC = 3, XR_FOVEATION_MODE_MAX_ENUM_HTC = 0x7FFFFFFF } XrFoveationModeHTC; typedef enum XrFoveationLevelHTC { XR_FOVEATION_LEVEL_NONE_HTC = 0, XR_FOVEATION_LEVEL_LOW_HTC = 1, XR_FOVEATION_LEVEL_MEDIUM_HTC = 2, XR_FOVEATION_LEVEL_HIGH_HTC = 3, XR_FOVEATION_LEVEL_MAX_ENUM_HTC = 0x7FFFFFFF } XrFoveationLevelHTC; typedef XrFlags64 XrFoveationDynamicFlagsHTC; static const XrFoveationDynamicFlagsHTC XR_FOVEATION_DYNAMIC_LEVEL_ENABLED_BIT_HTC = 0x00000001; static const XrFoveationDynamicFlagsHTC XR_FOVEATION_DYNAMIC_CLEAR_FOV_ENABLED_BIT_HTC = 0x00000002; static const XrFoveationDynamicFlagsHTC XR_FOVEATION_DYNAMIC_FOCAL_CENTER_OFFSET_ENABLED_BIT_HTC = 0x00000004; typedef struct XrFoveationApplyInfoHTC { XrStructureType type; const void* next; XrFoveationModeHTC mode; uint32_t subImageCount; XrSwapchainSubImage* subImages; } XrFoveationApplyInfoHTC; typedef struct XrFoveationConfigurationHTC { XrFoveationLevelHTC level; float clearFovDegree; XrVector2f focalCenterOffset; } XrFoveationConfigurationHTC; typedef struct XrFoveationDynamicModeInfoHTC { XrStructureType type; const void* next; XrFoveationDynamicFlagsHTC dynamicFlags; } XrFoveationDynamicModeInfoHTC; typedef struct XrFoveationCustomModeInfoHTC { XrStructureType type; const void* next; uint32_t configCount; const XrFoveationConfigurationHTC* configs; } XrFoveationCustomModeInfoHTC; typedef XrResult (*PFN_xrApplyFoveationHTC)(XrSession session, const XrFoveationApplyInfoHTC* applyInfo);
XrResult  xrApplyFoveationHTC(XrSession session, const XrFoveationApplyInfoHTC* applyInfo);
#line 7893 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 7894 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrSystemAnchorPropertiesHTC { XrStructureType type; void* next; XrBool32 supportsAnchor; } XrSystemAnchorPropertiesHTC; typedef struct XrSpatialAnchorNameHTC { char name[256]; } XrSpatialAnchorNameHTC; typedef struct XrSpatialAnchorCreateInfoHTC { XrStructureType type; const void* next; XrSpace space; XrPosef poseInSpace; XrSpatialAnchorNameHTC name; } XrSpatialAnchorCreateInfoHTC; typedef XrResult (*PFN_xrCreateSpatialAnchorHTC)(XrSession session, const XrSpatialAnchorCreateInfoHTC* createInfo, XrSpace* anchor);
typedef XrResult (*PFN_xrGetSpatialAnchorNameHTC)(XrSpace anchor, XrSpatialAnchorNameHTC* name);
XrResult  xrCreateSpatialAnchorHTC(XrSession session, const XrSpatialAnchorCreateInfoHTC* createInfo, XrSpace* anchor);
XrResult  xrGetSpatialAnchorNameHTC(XrSpace anchor, XrSpatialAnchorNameHTC* name);
#line 7934 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 7935 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrBodyTrackerHTC_T* XrBodyTrackerHTC; typedef enum XrBodyJointHTC { XR_BODY_JOINT_PELVIS_HTC = 0, XR_BODY_JOINT_LEFT_HIP_HTC = 1, XR_BODY_JOINT_LEFT_KNEE_HTC = 2, XR_BODY_JOINT_LEFT_ANKLE_HTC = 3, XR_BODY_JOINT_LEFT_FEET_HTC = 4, XR_BODY_JOINT_RIGHT_HIP_HTC = 5, XR_BODY_JOINT_RIGHT_KNEE_HTC = 6, XR_BODY_JOINT_RIGHT_ANKLE_HTC = 7, XR_BODY_JOINT_RIGHT_FEET_HTC = 8, XR_BODY_JOINT_WAIST_HTC = 9, XR_BODY_JOINT_SPINE_LOWER_HTC = 10, XR_BODY_JOINT_SPINE_MIDDLE_HTC = 11, XR_BODY_JOINT_SPINE_HIGH_HTC = 12, XR_BODY_JOINT_CHEST_HTC = 13, XR_BODY_JOINT_NECK_HTC = 14, XR_BODY_JOINT_HEAD_HTC = 15, XR_BODY_JOINT_LEFT_CLAVICLE_HTC = 16, XR_BODY_JOINT_LEFT_SCAPULA_HTC = 17, XR_BODY_JOINT_LEFT_ARM_HTC = 18, XR_BODY_JOINT_LEFT_ELBOW_HTC = 19, XR_BODY_JOINT_LEFT_WRIST_HTC = 20, XR_BODY_JOINT_RIGHT_CLAVICLE_HTC = 21, XR_BODY_JOINT_RIGHT_SCAPULA_HTC = 22, XR_BODY_JOINT_RIGHT_ARM_HTC = 23, XR_BODY_JOINT_RIGHT_ELBOW_HTC = 24, XR_BODY_JOINT_RIGHT_WRIST_HTC = 25, XR_BODY_JOINT_MAX_ENUM_HTC = 0x7FFFFFFF } XrBodyJointHTC; typedef enum XrBodyJointSetHTC { XR_BODY_JOINT_SET_FULL_HTC = 0, XR_BODY_JOINT_SET_MAX_ENUM_HTC = 0x7FFFFFFF } XrBodyJointSetHTC; typedef enum XrBodyJointConfidenceHTC { XR_BODY_JOINT_CONFIDENCE_NONE_HTC = 0, XR_BODY_JOINT_CONFIDENCE_LOW_HTC = 1, XR_BODY_JOINT_CONFIDENCE_HIGH_HTC = 2, XR_BODY_JOINT_CONFIDENCE_MAX_ENUM_HTC = 0x7FFFFFFF } XrBodyJointConfidenceHTC; typedef struct XrSystemBodyTrackingPropertiesHTC { XrStructureType type; void* next; XrBool32 supportsBodyTracking; } XrSystemBodyTrackingPropertiesHTC; typedef struct XrBodyTrackerCreateInfoHTC { XrStructureType type; const void* next; XrBodyJointSetHTC bodyJointSet; } XrBodyTrackerCreateInfoHTC; typedef struct XrBodyJointsLocateInfoHTC { XrStructureType type; const void* next; XrSpace baseSpace; XrTime time; } XrBodyJointsLocateInfoHTC; typedef struct XrBodyJointLocationHTC { XrSpaceLocationFlags locationFlags; XrPosef pose; } XrBodyJointLocationHTC; typedef struct XrBodyJointLocationsHTC { XrStructureType type; void* next; XrSpaceLocationFlags combinedLocationFlags; XrBodyJointConfidenceHTC confidenceLevel; uint32_t jointLocationCount; XrBodyJointLocationHTC* jointLocations; uint32_t skeletonGenerationId; } XrBodyJointLocationsHTC; typedef struct XrBodySkeletonJointHTC { XrPosef pose; } XrBodySkeletonJointHTC; typedef struct XrBodySkeletonHTC { XrStructureType type; void* next; uint32_t jointCount; XrBodySkeletonJointHTC* joints; } XrBodySkeletonHTC; typedef XrResult (*PFN_xrCreateBodyTrackerHTC)(XrSession session, const XrBodyTrackerCreateInfoHTC* createInfo, XrBodyTrackerHTC* bodyTracker);
typedef XrResult (*PFN_xrDestroyBodyTrackerHTC)(XrBodyTrackerHTC bodyTracker);
typedef XrResult (*PFN_xrLocateBodyJointsHTC)(XrBodyTrackerHTC bodyTracker, const XrBodyJointsLocateInfoHTC* locateInfo, XrBodyJointLocationsHTC* locations);
typedef XrResult (*PFN_xrGetBodySkeletonHTC)(XrBodyTrackerHTC bodyTracker, XrSpace baseSpace, uint32_t skeletonGenerationId, XrBodySkeletonHTC* skeleton);
XrResult  xrCreateBodyTrackerHTC(XrSession session, const XrBodyTrackerCreateInfoHTC* createInfo, XrBodyTrackerHTC* bodyTracker);
XrResult  xrDestroyBodyTrackerHTC(XrBodyTrackerHTC bodyTracker);
XrResult  xrLocateBodyJointsHTC(XrBodyTrackerHTC bodyTracker, const XrBodyJointsLocateInfoHTC* locateInfo, XrBodyJointLocationsHTC* locations);
XrResult  xrGetBodySkeletonHTC(XrBodyTrackerHTC bodyTracker, XrSpace baseSpace, uint32_t skeletonGenerationId, XrBodySkeletonHTC* skeleton);
#line 8059 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 8060 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrActiveActionSetPriorityEXT { XrActionSet actionSet; uint32_t priorityOverride; } XrActiveActionSetPriorityEXT; typedef struct XrActiveActionSetPrioritiesEXT { XrStructureType type; const void* next; uint32_t actionSetPriorityCount; const XrActiveActionSetPriorityEXT* actionSetPriorities; } XrActiveActionSetPrioritiesEXT; typedef enum XrForceFeedbackCurlLocationMNDX { XR_FORCE_FEEDBACK_CURL_LOCATION_THUMB_CURL_MNDX = 0, XR_FORCE_FEEDBACK_CURL_LOCATION_INDEX_CURL_MNDX = 1, XR_FORCE_FEEDBACK_CURL_LOCATION_MIDDLE_CURL_MNDX = 2, XR_FORCE_FEEDBACK_CURL_LOCATION_RING_CURL_MNDX = 3, XR_FORCE_FEEDBACK_CURL_LOCATION_LITTLE_CURL_MNDX = 4, XR_FORCE_FEEDBACK_CURL_LOCATION_MAX_ENUM_MNDX = 0x7FFFFFFF } XrForceFeedbackCurlLocationMNDX; typedef struct XrSystemForceFeedbackCurlPropertiesMNDX { XrStructureType type; void* next; XrBool32 supportsForceFeedbackCurl; } XrSystemForceFeedbackCurlPropertiesMNDX; typedef struct XrForceFeedbackCurlApplyLocationMNDX { XrForceFeedbackCurlLocationMNDX location; float value; } XrForceFeedbackCurlApplyLocationMNDX; typedef struct XrForceFeedbackCurlApplyLocationsMNDX { XrStructureType type; const void* next; uint32_t locationCount; XrForceFeedbackCurlApplyLocationMNDX* locations; } XrForceFeedbackCurlApplyLocationsMNDX; typedef XrResult (*PFN_xrApplyForceFeedbackCurlMNDX)(XrHandTrackerEXT handTracker, const XrForceFeedbackCurlApplyLocationsMNDX* locations);
XrResult  xrApplyForceFeedbackCurlMNDX(XrHandTrackerEXT handTracker, const XrForceFeedbackCurlApplyLocationsMNDX* locations);
#line 8121 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 8122 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrBodyTrackerBD_T* XrBodyTrackerBD; typedef enum XrBodyJointBD { XR_BODY_JOINT_PELVIS_BD = 0, XR_BODY_JOINT_LEFT_HIP_BD = 1, XR_BODY_JOINT_RIGHT_HIP_BD = 2, XR_BODY_JOINT_SPINE1_BD = 3, XR_BODY_JOINT_LEFT_KNEE_BD = 4, XR_BODY_JOINT_RIGHT_KNEE_BD = 5, XR_BODY_JOINT_SPINE2_BD = 6, XR_BODY_JOINT_LEFT_ANKLE_BD = 7, XR_BODY_JOINT_RIGHT_ANKLE_BD = 8, XR_BODY_JOINT_SPINE3_BD = 9, XR_BODY_JOINT_LEFT_FOOT_BD = 10, XR_BODY_JOINT_RIGHT_FOOT_BD = 11, XR_BODY_JOINT_NECK_BD = 12, XR_BODY_JOINT_LEFT_COLLAR_BD = 13, XR_BODY_JOINT_RIGHT_COLLAR_BD = 14, XR_BODY_JOINT_HEAD_BD = 15, XR_BODY_JOINT_LEFT_SHOULDER_BD = 16, XR_BODY_JOINT_RIGHT_SHOULDER_BD = 17, XR_BODY_JOINT_LEFT_ELBOW_BD = 18, XR_BODY_JOINT_RIGHT_ELBOW_BD = 19, XR_BODY_JOINT_LEFT_WRIST_BD = 20, XR_BODY_JOINT_RIGHT_WRIST_BD = 21, XR_BODY_JOINT_LEFT_HAND_BD = 22, XR_BODY_JOINT_RIGHT_HAND_BD = 23, XR_BODY_JOINT_MAX_ENUM_BD = 0x7FFFFFFF } XrBodyJointBD; typedef enum XrBodyJointSetBD { XR_BODY_JOINT_SET_BODY_WITHOUT_ARM_BD = 1, XR_BODY_JOINT_SET_FULL_BODY_JOINTS_BD = 2, XR_BODY_JOINT_SET_MAX_ENUM_BD = 0x7FFFFFFF } XrBodyJointSetBD; typedef struct XrSystemBodyTrackingPropertiesBD { XrStructureType type; void* next; XrBool32 supportsBodyTracking; } XrSystemBodyTrackingPropertiesBD; typedef struct XrBodyTrackerCreateInfoBD { XrStructureType type; const void* next; XrBodyJointSetBD jointSet; } XrBodyTrackerCreateInfoBD; typedef struct XrBodyJointsLocateInfoBD { XrStructureType type; const void* next; XrSpace baseSpace; XrTime time; } XrBodyJointsLocateInfoBD; typedef struct XrBodyJointLocationBD { XrSpaceLocationFlags locationFlags; XrPosef pose; } XrBodyJointLocationBD; typedef struct XrBodyJointLocationsBD { XrStructureType type; void* next; XrBool32 allJointPosesTracked; uint32_t jointLocationCount; XrBodyJointLocationBD* jointLocations; } XrBodyJointLocationsBD; typedef XrResult (*PFN_xrCreateBodyTrackerBD)(XrSession session, const XrBodyTrackerCreateInfoBD* createInfo, XrBodyTrackerBD* bodyTracker);
typedef XrResult (*PFN_xrDestroyBodyTrackerBD)(XrBodyTrackerBD bodyTracker);
typedef XrResult (*PFN_xrLocateBodyJointsBD)(XrBodyTrackerBD bodyTracker, const XrBodyJointsLocateInfoBD* locateInfo, XrBodyJointLocationsBD* locations);
XrResult  xrCreateBodyTrackerBD(XrSession session, const XrBodyTrackerCreateInfoBD* createInfo, XrBodyTrackerBD* bodyTracker);
XrResult  xrDestroyBodyTrackerBD(XrBodyTrackerBD bodyTracker);
XrResult  xrLocateBodyJointsBD(XrBodyTrackerBD bodyTracker, const XrBodyJointsLocateInfoBD* locateInfo, XrBodyJointLocationsBD* locations);
#line 8227 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 8228 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef uint64_t XrSpatialEntityIdBD; typedef struct XrSenseDataProviderBD_T* XrSenseDataProviderBD; typedef struct XrSenseDataSnapshotBD_T* XrSenseDataSnapshotBD; typedef struct XrAnchorBD_T* XrAnchorBD; typedef enum XrSpatialEntityComponentTypeBD { XR_SPATIAL_ENTITY_COMPONENT_TYPE_LOCATION_BD = 0, XR_SPATIAL_ENTITY_COMPONENT_TYPE_SEMANTIC_BD = 1, XR_SPATIAL_ENTITY_COMPONENT_TYPE_BOUNDING_BOX_2D_BD = 2, XR_SPATIAL_ENTITY_COMPONENT_TYPE_POLYGON_BD = 3, XR_SPATIAL_ENTITY_COMPONENT_TYPE_BOUNDING_BOX_3D_BD = 4, XR_SPATIAL_ENTITY_COMPONENT_TYPE_TRIANGLE_MESH_BD = 5, XR_SPATIAL_ENTITY_COMPONENT_TYPE_PLANE_ORIENTATION_BD = 1000396000, XR_SPATIAL_ENTITY_COMPONENT_TYPE_MAX_ENUM_BD = 0x7FFFFFFF } XrSpatialEntityComponentTypeBD; typedef enum XrSemanticLabelBD { XR_SEMANTIC_LABEL_UNKNOWN_BD = 0, XR_SEMANTIC_LABEL_FLOOR_BD = 1, XR_SEMANTIC_LABEL_CEILING_BD = 2, XR_SEMANTIC_LABEL_WALL_BD = 3, XR_SEMANTIC_LABEL_DOOR_BD = 4, XR_SEMANTIC_LABEL_WINDOW_BD = 5, XR_SEMANTIC_LABEL_OPENING_BD = 6, XR_SEMANTIC_LABEL_TABLE_BD = 7, XR_SEMANTIC_LABEL_SOFA_BD = 8, XR_SEMANTIC_LABEL_CHAIR_BD = 9, XR_SEMANTIC_LABEL_HUMAN_BD = 10, XR_SEMANTIC_LABEL_BEAM_BD = 11, XR_SEMANTIC_LABEL_COLUMN_BD = 12, XR_SEMANTIC_LABEL_CURTAIN_BD = 13, XR_SEMANTIC_LABEL_CABINET_BD = 14, XR_SEMANTIC_LABEL_BED_BD = 15, XR_SEMANTIC_LABEL_PLANT_BD = 16, XR_SEMANTIC_LABEL_SCREEN_BD = 17, XR_SEMANTIC_LABEL_VIRTUAL_WALL_BD = 18, XR_SEMANTIC_LABEL_REFRIGERATOR_BD = 19, XR_SEMANTIC_LABEL_WASHING_MACHINE_BD = 20, XR_SEMANTIC_LABEL_AIR_CONDITIONER_BD = 21, XR_SEMANTIC_LABEL_LAMP_BD = 22, XR_SEMANTIC_LABEL_WALL_ART_BD = 23, XR_SEMANTIC_LABEL_STAIRWAY_BD = 24, XR_SEMANTIC_LABEL_MAX_ENUM_BD = 0x7FFFFFFF } XrSemanticLabelBD; typedef enum XrSenseDataProviderTypeBD { XR_SENSE_DATA_PROVIDER_TYPE_ANCHOR_BD = 1000390000, XR_SENSE_DATA_PROVIDER_TYPE_SCENE_BD = 1000392000, XR_SENSE_DATA_PROVIDER_TYPE_MESH_BD = 1000393000, XR_SENSE_DATA_PROVIDER_TYPE_PLANE_BD = 1000396000, XR_SENSE_DATA_PROVIDER_TYPE_MAX_ENUM_BD = 0x7FFFFFFF } XrSenseDataProviderTypeBD; typedef enum XrSenseDataProviderStateBD { XR_SENSE_DATA_PROVIDER_STATE_INITIALIZED_BD = 0, XR_SENSE_DATA_PROVIDER_STATE_RUNNING_BD = 1, XR_SENSE_DATA_PROVIDER_STATE_STOPPED_BD = 2, XR_SENSE_DATA_PROVIDER_STATE_MAX_ENUM_BD = 0x7FFFFFFF } XrSenseDataProviderStateBD; typedef struct XrSystemSpatialSensingPropertiesBD { XrStructureType type; void* next; XrBool32 supportsSpatialSensing; } XrSystemSpatialSensingPropertiesBD; typedef struct XrSpatialEntityComponentGetInfoBD { XrStructureType type; const void* next; XrSpatialEntityIdBD entityId; XrSpatialEntityComponentTypeBD componentType; } XrSpatialEntityComponentGetInfoBD; typedef struct XrSpatialEntityComponentDataBaseHeaderBD { XrStructureType type; void* next; } XrSpatialEntityComponentDataBaseHeaderBD; typedef struct XrSpatialEntityLocationGetInfoBD { XrStructureType type; const void* next; XrSpace baseSpace; } XrSpatialEntityLocationGetInfoBD; typedef struct XrSpatialEntityComponentDataLocationBD { XrStructureType type; void* next; XrSpaceLocation location; } XrSpatialEntityComponentDataLocationBD; typedef struct XrSpatialEntityComponentDataSemanticBD { XrStructureType type; void* next; uint32_t labelCapacityInput; uint32_t labelCountOutput; XrSemanticLabelBD* labels; } XrSpatialEntityComponentDataSemanticBD; typedef struct XrSpatialEntityComponentDataBoundingBox2DBD { XrStructureType type; void* next; XrRect2Df boundingBox2D; } XrSpatialEntityComponentDataBoundingBox2DBD; typedef struct XrSpatialEntityComponentDataPolygonBD { XrStructureType type; void* next; uint32_t vertexCapacityInput; uint32_t vertexCountOutput; XrVector2f* vertices; } XrSpatialEntityComponentDataPolygonBD; typedef struct XrSpatialEntityComponentDataBoundingBox3DBD { XrStructureType type; void* next; XrBoxf boundingBox3D; } XrSpatialEntityComponentDataBoundingBox3DBD; typedef struct XrSpatialEntityComponentDataTriangleMeshBD { XrStructureType type; void* next; uint32_t vertexCapacityInput; uint32_t vertexCountOutput; XrVector3f* vertices; uint32_t indexCapacityInput; uint32_t indexCountOutput; uint16_t* indices; } XrSpatialEntityComponentDataTriangleMeshBD; typedef struct XrSenseDataProviderCreateInfoBD { XrStructureType type; const void* next; XrSenseDataProviderTypeBD providerType; } XrSenseDataProviderCreateInfoBD; typedef struct XrSenseDataProviderStartInfoBD { XrStructureType type; const void* next; } XrSenseDataProviderStartInfoBD; typedef struct XrEventDataSenseDataProviderStateChangedBD { XrStructureType type; const void* next; XrSenseDataProviderBD provider; XrSenseDataProviderStateBD newState; } XrEventDataSenseDataProviderStateChangedBD; typedef struct XrEventDataSenseDataUpdatedBD { XrStructureType type; const void* next; XrSenseDataProviderBD provider; } XrEventDataSenseDataUpdatedBD; typedef struct XrSenseDataQueryInfoBD { XrStructureType type; const void* next; } XrSenseDataQueryInfoBD; typedef struct XrSenseDataQueryCompletionBD { XrStructureType type; void* next; XrResult futureResult; XrSenseDataSnapshotBD snapshot; } XrSenseDataQueryCompletionBD; typedef struct XrQueriedSenseDataGetInfoBD { XrStructureType type; const void* next; } XrQueriedSenseDataGetInfoBD; typedef struct XrSpatialEntityStateBD { XrStructureType type; void* next; XrSpatialEntityIdBD entityId; XrTime lastUpdateTime; XrUuidEXT uuid; } XrSpatialEntityStateBD; typedef struct XrQueriedSenseDataBD { XrStructureType type; void* next; uint32_t stateCapacityInput; uint32_t stateCountOutput; XrSpatialEntityStateBD* states; } XrQueriedSenseDataBD; typedef struct XrSenseDataFilterUuidBD { XrStructureType type; const void* next; uint32_t uuidCount; const XrUuidEXT* uuids; } XrSenseDataFilterUuidBD; typedef struct XrSenseDataFilterSemanticBD { XrStructureType type; const void* next; uint32_t labelCount; const XrSemanticLabelBD* labels; } XrSenseDataFilterSemanticBD; typedef struct XrSpatialEntityAnchorCreateInfoBD { XrStructureType type; const void* next; XrSenseDataSnapshotBD snapshot; XrSpatialEntityIdBD entityId; } XrSpatialEntityAnchorCreateInfoBD; typedef struct XrAnchorSpaceCreateInfoBD { XrStructureType type; const void* next; XrAnchorBD anchor; XrPosef poseInAnchorSpace; } XrAnchorSpaceCreateInfoBD; typedef struct XrFutureCompletionEXT { XrStructureType type; void* next; XrResult futureResult; } XrFutureCompletionEXT; typedef XrResult (*PFN_xrEnumerateSpatialEntityComponentTypesBD)(XrSenseDataSnapshotBD snapshot, XrSpatialEntityIdBD entityId, uint32_t componentTypeCapacityInput, uint32_t* componentTypeCountOutput, XrSpatialEntityComponentTypeBD* componentTypes);
typedef XrResult (*PFN_xrGetSpatialEntityUuidBD)(XrSenseDataSnapshotBD snapshot, XrSpatialEntityIdBD entityId, XrUuidEXT* uuid);
typedef XrResult (*PFN_xrGetSpatialEntityComponentDataBD)(XrSenseDataSnapshotBD snapshot, const XrSpatialEntityComponentGetInfoBD* getInfo, XrSpatialEntityComponentDataBaseHeaderBD* componentData);
typedef XrResult (*PFN_xrCreateSenseDataProviderBD)(XrSession session, const XrSenseDataProviderCreateInfoBD* createInfo, XrSenseDataProviderBD* provider);
typedef XrResult (*PFN_xrStartSenseDataProviderAsyncBD)(XrSenseDataProviderBD provider, const XrSenseDataProviderStartInfoBD* startInfo, XrFutureEXT* future);
typedef XrResult (*PFN_xrStartSenseDataProviderCompleteBD)(XrSession session, XrFutureEXT future, XrFutureCompletionEXT* completion);
typedef XrResult (*PFN_xrGetSenseDataProviderStateBD)(XrSenseDataProviderBD provider, XrSenseDataProviderStateBD* state);
typedef XrResult (*PFN_xrQuerySenseDataAsyncBD)(XrSenseDataProviderBD provider, const XrSenseDataQueryInfoBD* queryInfo, XrFutureEXT* future);
typedef XrResult (*PFN_xrQuerySenseDataCompleteBD)(XrSenseDataProviderBD provider, XrFutureEXT future, XrSenseDataQueryCompletionBD* completion);
typedef XrResult (*PFN_xrDestroySenseDataSnapshotBD)(XrSenseDataSnapshotBD snapshot);
typedef XrResult (*PFN_xrGetQueriedSenseDataBD)(XrSenseDataSnapshotBD snapshot, XrQueriedSenseDataGetInfoBD* getInfo, XrQueriedSenseDataBD* queriedSenseData);
typedef XrResult (*PFN_xrStopSenseDataProviderBD)(XrSenseDataProviderBD provider);
typedef XrResult (*PFN_xrDestroySenseDataProviderBD)(XrSenseDataProviderBD provider);
typedef XrResult (*PFN_xrCreateSpatialEntityAnchorBD)(XrSenseDataProviderBD provider, const XrSpatialEntityAnchorCreateInfoBD* createInfo, XrAnchorBD* anchor);
typedef XrResult (*PFN_xrDestroyAnchorBD)(XrAnchorBD anchor);
typedef XrResult (*PFN_xrGetAnchorUuidBD)(XrAnchorBD anchor, XrUuidEXT* uuid);
typedef XrResult (*PFN_xrCreateAnchorSpaceBD)(XrSession session, const XrAnchorSpaceCreateInfoBD* createInfo, XrSpace* space);
XrResult  xrEnumerateSpatialEntityComponentTypesBD(XrSenseDataSnapshotBD snapshot, XrSpatialEntityIdBD entityId, uint32_t componentTypeCapacityInput, uint32_t* componentTypeCountOutput, XrSpatialEntityComponentTypeBD* componentTypes);
XrResult  xrGetSpatialEntityUuidBD(XrSenseDataSnapshotBD snapshot, XrSpatialEntityIdBD entityId, XrUuidEXT* uuid);
XrResult  xrGetSpatialEntityComponentDataBD(XrSenseDataSnapshotBD snapshot, const XrSpatialEntityComponentGetInfoBD* getInfo, XrSpatialEntityComponentDataBaseHeaderBD* componentData);
XrResult  xrCreateSenseDataProviderBD(XrSession session, const XrSenseDataProviderCreateInfoBD* createInfo, XrSenseDataProviderBD* provider);
XrResult  xrStartSenseDataProviderAsyncBD(XrSenseDataProviderBD provider, const XrSenseDataProviderStartInfoBD* startInfo, XrFutureEXT* future);
XrResult  xrStartSenseDataProviderCompleteBD(XrSession session, XrFutureEXT future, XrFutureCompletionEXT* completion);
XrResult  xrGetSenseDataProviderStateBD(XrSenseDataProviderBD provider, XrSenseDataProviderStateBD* state);
XrResult  xrQuerySenseDataAsyncBD(XrSenseDataProviderBD provider, const XrSenseDataQueryInfoBD* queryInfo, XrFutureEXT* future);
XrResult  xrQuerySenseDataCompleteBD(XrSenseDataProviderBD provider, XrFutureEXT future, XrSenseDataQueryCompletionBD* completion);
XrResult  xrDestroySenseDataSnapshotBD(XrSenseDataSnapshotBD snapshot);
XrResult  xrGetQueriedSenseDataBD(XrSenseDataSnapshotBD snapshot, XrQueriedSenseDataGetInfoBD* getInfo, XrQueriedSenseDataBD* queriedSenseData);
XrResult  xrStopSenseDataProviderBD(XrSenseDataProviderBD provider);
XrResult  xrDestroySenseDataProviderBD(XrSenseDataProviderBD provider);
XrResult  xrCreateSpatialEntityAnchorBD(XrSenseDataProviderBD provider, const XrSpatialEntityAnchorCreateInfoBD* createInfo, XrAnchorBD* anchor);
XrResult  xrDestroyAnchorBD(XrAnchorBD anchor);
XrResult  xrGetAnchorUuidBD(XrAnchorBD anchor, XrUuidEXT* uuid);
XrResult  xrCreateAnchorSpaceBD(XrSession session, const XrAnchorSpaceCreateInfoBD* createInfo, XrSpace* space);
#line 8559 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 8560 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef enum XrPersistenceLocationBD { XR_PERSISTENCE_LOCATION_LOCAL_BD = 0, XR_PERSISTENCE_LOCATION_MAX_ENUM_BD = 0x7FFFFFFF } XrPersistenceLocationBD; typedef struct XrSystemSpatialAnchorPropertiesBD { XrStructureType type; void* next; XrBool32 supportsSpatialAnchor; } XrSystemSpatialAnchorPropertiesBD; typedef struct XrSpatialAnchorCreateInfoBD { XrStructureType type; const void* next; XrSpace space; XrPosef pose; XrTime time; } XrSpatialAnchorCreateInfoBD; typedef struct XrSpatialAnchorCreateCompletionBD { XrStructureType type; void* next; XrResult futureResult; XrAnchorBD anchor; XrUuidEXT uuid; } XrSpatialAnchorCreateCompletionBD; typedef struct XrSpatialAnchorPersistInfoBD { XrStructureType type; const void* next; XrPersistenceLocationBD location; XrAnchorBD anchor; } XrSpatialAnchorPersistInfoBD; typedef struct XrSpatialAnchorUnpersistInfoBD { XrStructureType type; const void* next; XrPersistenceLocationBD location; XrAnchorBD anchor; } XrSpatialAnchorUnpersistInfoBD; typedef XrResult (*PFN_xrCreateSpatialAnchorAsyncBD)(XrSenseDataProviderBD provider, const XrSpatialAnchorCreateInfoBD* info, XrFutureEXT* future);
typedef XrResult (*PFN_xrCreateSpatialAnchorCompleteBD)(XrSenseDataProviderBD provider, XrFutureEXT future, XrSpatialAnchorCreateCompletionBD* completion);
typedef XrResult (*PFN_xrPersistSpatialAnchorAsyncBD)(XrSenseDataProviderBD provider, const XrSpatialAnchorPersistInfoBD* info, XrFutureEXT* future);
typedef XrResult (*PFN_xrPersistSpatialAnchorCompleteBD)(XrSenseDataProviderBD provider, XrFutureEXT future, XrFutureCompletionEXT* completion);
typedef XrResult (*PFN_xrUnpersistSpatialAnchorAsyncBD)(XrSenseDataProviderBD provider, const XrSpatialAnchorUnpersistInfoBD* info, XrFutureEXT* future);
typedef XrResult (*PFN_xrUnpersistSpatialAnchorCompleteBD)(XrSenseDataProviderBD provider, XrFutureEXT future, XrFutureCompletionEXT* completion);
XrResult  xrCreateSpatialAnchorAsyncBD(XrSenseDataProviderBD provider, const XrSpatialAnchorCreateInfoBD* info, XrFutureEXT* future);
XrResult  xrCreateSpatialAnchorCompleteBD(XrSenseDataProviderBD provider, XrFutureEXT future, XrSpatialAnchorCreateCompletionBD* completion);
XrResult  xrPersistSpatialAnchorAsyncBD(XrSenseDataProviderBD provider, const XrSpatialAnchorPersistInfoBD* info, XrFutureEXT* future);
XrResult  xrPersistSpatialAnchorCompleteBD(XrSenseDataProviderBD provider, XrFutureEXT future, XrFutureCompletionEXT* completion);
XrResult  xrUnpersistSpatialAnchorAsyncBD(XrSenseDataProviderBD provider, const XrSpatialAnchorUnpersistInfoBD* info, XrFutureEXT* future);
XrResult  xrUnpersistSpatialAnchorCompleteBD(XrSenseDataProviderBD provider, XrFutureEXT future, XrFutureCompletionEXT* completion);
#line 8647 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 8648 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrSystemSpatialAnchorSharingPropertiesBD { XrStructureType type; void* next; XrBool32 supportsSpatialAnchorSharing; } XrSystemSpatialAnchorSharingPropertiesBD; typedef struct XrSpatialAnchorShareInfoBD { XrStructureType type; const void* next; XrAnchorBD anchor; } XrSpatialAnchorShareInfoBD; typedef struct XrSharedSpatialAnchorDownloadInfoBD { XrStructureType type; const void* next; XrUuidEXT uuid; } XrSharedSpatialAnchorDownloadInfoBD; typedef XrResult (*PFN_xrShareSpatialAnchorAsyncBD)(XrSenseDataProviderBD provider, const XrSpatialAnchorShareInfoBD* info, XrFutureEXT* future);
typedef XrResult (*PFN_xrShareSpatialAnchorCompleteBD)(XrSenseDataProviderBD provider, XrFutureEXT future, XrFutureCompletionEXT* completion);
typedef XrResult (*PFN_xrDownloadSharedSpatialAnchorAsyncBD)(XrSenseDataProviderBD provider, const XrSharedSpatialAnchorDownloadInfoBD* info, XrFutureEXT* future);
typedef XrResult (*PFN_xrDownloadSharedSpatialAnchorCompleteBD)(XrSenseDataProviderBD provider, XrFutureEXT future, XrFutureCompletionEXT* completion);
XrResult  xrShareSpatialAnchorAsyncBD(XrSenseDataProviderBD provider, const XrSpatialAnchorShareInfoBD* info, XrFutureEXT* future);
XrResult  xrShareSpatialAnchorCompleteBD(XrSenseDataProviderBD provider, XrFutureEXT future, XrFutureCompletionEXT* completion);
XrResult  xrDownloadSharedSpatialAnchorAsyncBD(XrSenseDataProviderBD provider, const XrSharedSpatialAnchorDownloadInfoBD* info, XrFutureEXT* future);
XrResult  xrDownloadSharedSpatialAnchorCompleteBD(XrSenseDataProviderBD provider, XrFutureEXT future, XrFutureCompletionEXT* completion);
#line 8700 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 8701 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrSystemSpatialScenePropertiesBD { XrStructureType type; void* next; XrBool32 supportsSpatialScene; } XrSystemSpatialScenePropertiesBD; typedef struct XrSceneCaptureInfoBD { XrStructureType type; const void* next; } XrSceneCaptureInfoBD; typedef XrResult (*PFN_xrCaptureSceneAsyncBD)(XrSenseDataProviderBD provider, const XrSceneCaptureInfoBD* info, XrFutureEXT* future);
typedef XrResult (*PFN_xrCaptureSceneCompleteBD)(XrSenseDataProviderBD provider, XrFutureEXT future, XrFutureCompletionEXT* completion);
XrResult  xrCaptureSceneAsyncBD(XrSenseDataProviderBD provider, const XrSceneCaptureInfoBD* info, XrFutureEXT* future);
XrResult  xrCaptureSceneCompleteBD(XrSenseDataProviderBD provider, XrFutureEXT future, XrFutureCompletionEXT* completion);
#line 8734 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 8735 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef enum XrSpatialMeshLodBD { XR_SPATIAL_MESH_LOD_COARSE_BD = 0, XR_SPATIAL_MESH_LOD_MEDIUM_BD = 1, XR_SPATIAL_MESH_LOD_FINE_BD = 2, XR_SPATIAL_MESH_LOD_MAX_ENUM_BD = 0x7FFFFFFF } XrSpatialMeshLodBD; typedef XrFlags64 XrSpatialMeshConfigFlagsBD; static const XrSpatialMeshConfigFlagsBD XR_SPATIAL_MESH_CONFIG_SEMANTIC_BIT_BD = 0x00000001; static const XrSpatialMeshConfigFlagsBD XR_SPATIAL_MESH_CONFIG_ALIGN_SEMANTIC_WITH_VERTEX_BIT_BD = 0x00000002; typedef struct XrSystemSpatialMeshPropertiesBD { XrStructureType type; void* next; XrBool32 supportsSpatialMesh; } XrSystemSpatialMeshPropertiesBD; typedef struct XrSenseDataProviderCreateInfoSpatialMeshBD { XrStructureType type; const void* next; XrSpatialMeshConfigFlagsBD configFlags; XrSpatialMeshLodBD lod; } XrSenseDataProviderCreateInfoSpatialMeshBD; typedef struct XrFuturePollResultProgressBD { XrStructureType type; void* next; XrBool32 isSupported; uint32_t progressPercentage; } XrFuturePollResultProgressBD; typedef enum XrPlaneOrientationBD { XR_PLANE_ORIENTATION_HORIZONTAL_UPWARD_BD = 0, XR_PLANE_ORIENTATION_HORIZONTAL_DOWNWARD_BD = 1, XR_PLANE_ORIENTATION_VERTICAL_BD = 2, XR_PLANE_ORIENTATION_ARBITRARY_BD = 3, XR_PLANE_ORIENTATION_MAX_ENUM_BD = 0x7FFFFFFF } XrPlaneOrientationBD; typedef struct XrSystemSpatialPlanePropertiesBD { XrStructureType type; void* next; XrBool32 supportsSpatialPlane; } XrSystemSpatialPlanePropertiesBD; typedef struct XrSpatialEntityComponentDataPlaneOrientationBD { XrStructureType type; void* next; XrPlaneOrientationBD orientation; } XrSpatialEntityComponentDataPlaneOrientationBD; typedef struct XrSenseDataFilterPlaneOrientationBD { XrStructureType type; const void* next; uint32_t orientationCount; XrPlaneOrientationBD* orientations; } XrSenseDataFilterPlaneOrientationBD; typedef enum XrHandTrackingDataSourceEXT { XR_HAND_TRACKING_DATA_SOURCE_UNOBSTRUCTED_EXT = 1, XR_HAND_TRACKING_DATA_SOURCE_CONTROLLER_EXT = 2, XR_HAND_TRACKING_DATA_SOURCE_MAX_ENUM_EXT = 0x7FFFFFFF } XrHandTrackingDataSourceEXT; typedef struct XrHandTrackingDataSourceInfoEXT { XrStructureType type; const void* next; uint32_t requestedDataSourceCount; XrHandTrackingDataSourceEXT* requestedDataSources; } XrHandTrackingDataSourceInfoEXT; typedef struct XrHandTrackingDataSourceStateEXT { XrStructureType type; void* next; XrBool32 isActive; XrHandTrackingDataSourceEXT dataSource; } XrHandTrackingDataSourceStateEXT; typedef struct XrPlaneDetectorEXT_T* XrPlaneDetectorEXT; typedef enum XrPlaneDetectorOrientationEXT { XR_PLANE_DETECTOR_ORIENTATION_HORIZONTAL_UPWARD_EXT = 0, XR_PLANE_DETECTOR_ORIENTATION_HORIZONTAL_DOWNWARD_EXT = 1, XR_PLANE_DETECTOR_ORIENTATION_VERTICAL_EXT = 2, XR_PLANE_DETECTOR_ORIENTATION_ARBITRARY_EXT = 3, XR_PLANE_DETECTOR_ORIENTATION_MAX_ENUM_EXT = 0x7FFFFFFF } XrPlaneDetectorOrientationEXT; typedef enum XrPlaneDetectorSemanticTypeEXT { XR_PLANE_DETECTOR_SEMANTIC_TYPE_UNDEFINED_EXT = 0, XR_PLANE_DETECTOR_SEMANTIC_TYPE_CEILING_EXT = 1, XR_PLANE_DETECTOR_SEMANTIC_TYPE_FLOOR_EXT = 2, XR_PLANE_DETECTOR_SEMANTIC_TYPE_WALL_EXT = 3, XR_PLANE_DETECTOR_SEMANTIC_TYPE_PLATFORM_EXT = 4, XR_PLANE_DETECTOR_SEMANTIC_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF } XrPlaneDetectorSemanticTypeEXT; typedef enum XrPlaneDetectionStateEXT { XR_PLANE_DETECTION_STATE_NONE_EXT = 0, XR_PLANE_DETECTION_STATE_PENDING_EXT = 1, XR_PLANE_DETECTION_STATE_DONE_EXT = 2, XR_PLANE_DETECTION_STATE_ERROR_EXT = 3, XR_PLANE_DETECTION_STATE_FATAL_EXT = 4, XR_PLANE_DETECTION_STATE_MAX_ENUM_EXT = 0x7FFFFFFF } XrPlaneDetectionStateEXT; typedef XrFlags64 XrPlaneDetectionCapabilityFlagsEXT; static const XrPlaneDetectionCapabilityFlagsEXT XR_PLANE_DETECTION_CAPABILITY_PLANE_DETECTION_BIT_EXT = 0x00000001; static const XrPlaneDetectionCapabilityFlagsEXT XR_PLANE_DETECTION_CAPABILITY_PLANE_HOLES_BIT_EXT = 0x00000002; static const XrPlaneDetectionCapabilityFlagsEXT XR_PLANE_DETECTION_CAPABILITY_SEMANTIC_CEILING_BIT_EXT = 0x00000004; static const XrPlaneDetectionCapabilityFlagsEXT XR_PLANE_DETECTION_CAPABILITY_SEMANTIC_FLOOR_BIT_EXT = 0x00000008; static const XrPlaneDetectionCapabilityFlagsEXT XR_PLANE_DETECTION_CAPABILITY_SEMANTIC_WALL_BIT_EXT = 0x00000010; static const XrPlaneDetectionCapabilityFlagsEXT XR_PLANE_DETECTION_CAPABILITY_SEMANTIC_PLATFORM_BIT_EXT = 0x00000020; static const XrPlaneDetectionCapabilityFlagsEXT XR_PLANE_DETECTION_CAPABILITY_ORIENTATION_BIT_EXT = 0x00000040; typedef XrFlags64 XrPlaneDetectorFlagsEXT; static const XrPlaneDetectorFlagsEXT XR_PLANE_DETECTOR_ENABLE_CONTOUR_BIT_EXT = 0x00000001; typedef struct XrSystemPlaneDetectionPropertiesEXT { XrStructureType type; void* next; XrPlaneDetectionCapabilityFlagsEXT supportedFeatures; } XrSystemPlaneDetectionPropertiesEXT; typedef struct XrPlaneDetectorCreateInfoEXT { XrStructureType type; const void* next; XrPlaneDetectorFlagsEXT flags; } XrPlaneDetectorCreateInfoEXT; typedef XrExtent3Df XrExtent3DfEXT; typedef struct XrPlaneDetectorBeginInfoEXT { XrStructureType type; const void* next; XrSpace baseSpace; XrTime time; uint32_t orientationCount; const XrPlaneDetectorOrientationEXT* orientations; uint32_t semanticTypeCount; const XrPlaneDetectorSemanticTypeEXT* semanticTypes; uint32_t maxPlanes; float minArea; XrPosef boundingBoxPose; XrExtent3DfEXT boundingBoxExtent; } XrPlaneDetectorBeginInfoEXT; typedef struct XrPlaneDetectorGetInfoEXT { XrStructureType type; const void* next; XrSpace baseSpace; XrTime time; } XrPlaneDetectorGetInfoEXT; typedef struct XrPlaneDetectorLocationEXT { XrStructureType type; void* next; uint64_t planeId; XrSpaceLocationFlags locationFlags; XrPosef pose; XrExtent2Df extents; XrPlaneDetectorOrientationEXT orientation; XrPlaneDetectorSemanticTypeEXT semanticType; uint32_t polygonBufferCount; } XrPlaneDetectorLocationEXT; typedef struct XrPlaneDetectorLocationsEXT { XrStructureType type; void* next; uint32_t planeLocationCapacityInput; uint32_t planeLocationCountOutput; XrPlaneDetectorLocationEXT* planeLocations; } XrPlaneDetectorLocationsEXT; typedef struct XrPlaneDetectorPolygonBufferEXT { XrStructureType type; void* next; uint32_t vertexCapacityInput; uint32_t vertexCountOutput; XrVector2f* vertices; } XrPlaneDetectorPolygonBufferEXT; typedef XrResult (*PFN_xrCreatePlaneDetectorEXT)(XrSession session, const XrPlaneDetectorCreateInfoEXT* createInfo, XrPlaneDetectorEXT* planeDetector);
typedef XrResult (*PFN_xrDestroyPlaneDetectorEXT)(XrPlaneDetectorEXT planeDetector);
typedef XrResult (*PFN_xrBeginPlaneDetectionEXT)(XrPlaneDetectorEXT planeDetector, const XrPlaneDetectorBeginInfoEXT* beginInfo);
typedef XrResult (*PFN_xrGetPlaneDetectionStateEXT)(XrPlaneDetectorEXT planeDetector, XrPlaneDetectionStateEXT* state);
typedef XrResult (*PFN_xrGetPlaneDetectionsEXT)(XrPlaneDetectorEXT planeDetector, const XrPlaneDetectorGetInfoEXT* info, XrPlaneDetectorLocationsEXT* locations);
typedef XrResult (*PFN_xrGetPlanePolygonBufferEXT)(XrPlaneDetectorEXT planeDetector, uint64_t planeId, uint32_t polygonBufferIndex, XrPlaneDetectorPolygonBufferEXT* polygonBuffer);
XrResult  xrCreatePlaneDetectorEXT(XrSession session, const XrPlaneDetectorCreateInfoEXT* createInfo, XrPlaneDetectorEXT* planeDetector);
XrResult  xrDestroyPlaneDetectorEXT(XrPlaneDetectorEXT planeDetector);
XrResult  xrBeginPlaneDetectionEXT(XrPlaneDetectorEXT planeDetector, const XrPlaneDetectorBeginInfoEXT* beginInfo);
XrResult  xrGetPlaneDetectionStateEXT(XrPlaneDetectorEXT planeDetector, XrPlaneDetectionStateEXT* state);
XrResult  xrGetPlaneDetectionsEXT(XrPlaneDetectorEXT planeDetector, const XrPlaneDetectorGetInfoEXT* info, XrPlaneDetectorLocationsEXT* locations);
XrResult  xrGetPlanePolygonBufferEXT(XrPlaneDetectorEXT planeDetector, uint64_t planeId, uint32_t polygonBufferIndex, XrPlaneDetectorPolygonBufferEXT* polygonBuffer);
#line 9003 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 9004 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef enum XrFutureStateEXT { XR_FUTURE_STATE_PENDING_EXT = 1, XR_FUTURE_STATE_READY_EXT = 2, XR_FUTURE_STATE_MAX_ENUM_EXT = 0x7FFFFFFF } XrFutureStateEXT; typedef struct XrFutureCancelInfoEXT { XrStructureType type; const void* next; XrFutureEXT future; } XrFutureCancelInfoEXT; typedef struct XrFuturePollInfoEXT { XrStructureType type; const void* next; XrFutureEXT future; } XrFuturePollInfoEXT; typedef struct XrFutureCompletionBaseHeaderEXT { XrStructureType type; void* next; XrResult futureResult; } XrFutureCompletionBaseHeaderEXT; typedef struct XrFuturePollResultEXT { XrStructureType type; void* next; XrFutureStateEXT state; } XrFuturePollResultEXT; typedef XrResult (*PFN_xrPollFutureEXT)(XrInstance instance, const XrFuturePollInfoEXT* pollInfo, XrFuturePollResultEXT* pollResult);
typedef XrResult (*PFN_xrCancelFutureEXT)(XrInstance instance, const XrFutureCancelInfoEXT* cancelInfo);
XrResult  xrPollFutureEXT(XrInstance instance, const XrFuturePollInfoEXT* pollInfo, XrFuturePollResultEXT* pollResult);
XrResult  xrCancelFutureEXT(XrInstance instance, const XrFutureCancelInfoEXT* cancelInfo);
#line 9061 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 9062 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrEventDataUserPresenceChangedEXT { XrStructureType type; const void* next; XrSession session; XrBool32 isUserPresent; } XrEventDataUserPresenceChangedEXT; typedef struct XrSystemUserPresencePropertiesEXT { XrStructureType type; void* next; XrBool32 supportsUserPresence; } XrSystemUserPresencePropertiesEXT; typedef enum XrHeadsetFitStatusML { XR_HEADSET_FIT_STATUS_UNKNOWN_ML = 0, XR_HEADSET_FIT_STATUS_NOT_WORN_ML = 1, XR_HEADSET_FIT_STATUS_GOOD_FIT_ML = 2, XR_HEADSET_FIT_STATUS_BAD_FIT_ML = 3, XR_HEADSET_FIT_STATUS_MAX_ENUM_ML = 0x7FFFFFFF } XrHeadsetFitStatusML; typedef enum XrEyeCalibrationStatusML { XR_EYE_CALIBRATION_STATUS_UNKNOWN_ML = 0, XR_EYE_CALIBRATION_STATUS_NONE_ML = 1, XR_EYE_CALIBRATION_STATUS_COARSE_ML = 2, XR_EYE_CALIBRATION_STATUS_FINE_ML = 3, XR_EYE_CALIBRATION_STATUS_MAX_ENUM_ML = 0x7FFFFFFF } XrEyeCalibrationStatusML; typedef struct XrEventDataHeadsetFitChangedML { XrStructureType type; const void* next; XrHeadsetFitStatusML status; XrTime time; } XrEventDataHeadsetFitChangedML; typedef struct XrEventDataEyeCalibrationChangedML { XrStructureType type; const void* next; XrEyeCalibrationStatusML status; } XrEventDataEyeCalibrationChangedML; typedef struct XrUserCalibrationEnableEventsInfoML { XrStructureType type; const void* next; XrBool32 enabled; } XrUserCalibrationEnableEventsInfoML; typedef XrResult (*PFN_xrEnableUserCalibrationEventsML)(XrInstance instance, const XrUserCalibrationEnableEventsInfoML* enableInfo);
XrResult  xrEnableUserCalibrationEventsML(XrInstance instance, const XrUserCalibrationEnableEventsInfoML* enableInfo);
#line 9131 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 9132 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrSystemNotificationsSetInfoML { XrStructureType type; const void* next; XrBool32 suppressNotifications; } XrSystemNotificationsSetInfoML; typedef XrResult (*PFN_xrSetSystemNotificationsML)(XrInstance instance, const XrSystemNotificationsSetInfoML* info);
XrResult  xrSetSystemNotificationsML(XrInstance instance, const XrSystemNotificationsSetInfoML* info);
#line 9152 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 9153 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrWorldMeshDetectorML_T* XrWorldMeshDetectorML; typedef enum XrWorldMeshDetectorLodML { XR_WORLD_MESH_DETECTOR_LOD_MINIMUM_ML = 0, XR_WORLD_MESH_DETECTOR_LOD_MEDIUM_ML = 1, XR_WORLD_MESH_DETECTOR_LOD_MAXIMUM_ML = 2, XR_WORLD_MESH_DETECTOR_LOD_MAX_ENUM_ML = 0x7FFFFFFF } XrWorldMeshDetectorLodML; typedef enum XrWorldMeshBlockStatusML { XR_WORLD_MESH_BLOCK_STATUS_NEW_ML = 0, XR_WORLD_MESH_BLOCK_STATUS_UPDATED_ML = 1, XR_WORLD_MESH_BLOCK_STATUS_DELETED_ML = 2, XR_WORLD_MESH_BLOCK_STATUS_UNCHANGED_ML = 3, XR_WORLD_MESH_BLOCK_STATUS_MAX_ENUM_ML = 0x7FFFFFFF } XrWorldMeshBlockStatusML; typedef enum XrWorldMeshBlockResultML { XR_WORLD_MESH_BLOCK_RESULT_SUCCESS_ML = 0, XR_WORLD_MESH_BLOCK_RESULT_FAILED_ML = 1, XR_WORLD_MESH_BLOCK_RESULT_PENDING_ML = 2, XR_WORLD_MESH_BLOCK_RESULT_PARTIAL_UPDATE_ML = 3, XR_WORLD_MESH_BLOCK_RESULT_MAX_ENUM_ML = 0x7FFFFFFF } XrWorldMeshBlockResultML; typedef XrFlags64 XrWorldMeshDetectorFlagsML; static const XrWorldMeshDetectorFlagsML XR_WORLD_MESH_DETECTOR_POINT_CLOUD_BIT_ML = 0x00000001; static const XrWorldMeshDetectorFlagsML XR_WORLD_MESH_DETECTOR_COMPUTE_NORMALS_BIT_ML = 0x00000002; static const XrWorldMeshDetectorFlagsML XR_WORLD_MESH_DETECTOR_COMPUTE_CONFIDENCE_BIT_ML = 0x00000004; static const XrWorldMeshDetectorFlagsML XR_WORLD_MESH_DETECTOR_PLANARIZE_BIT_ML = 0x00000008; static const XrWorldMeshDetectorFlagsML XR_WORLD_MESH_DETECTOR_REMOVE_MESH_SKIRT_BIT_ML = 0x00000010; static const XrWorldMeshDetectorFlagsML XR_WORLD_MESH_DETECTOR_INDEX_ORDER_CW_BIT_ML = 0x00000020; typedef struct XrWorldMeshDetectorCreateInfoML { XrStructureType type; const void* next; } XrWorldMeshDetectorCreateInfoML; typedef struct XrWorldMeshBlockStateML { XrStructureType type; void* next; XrUuidEXT uuid; XrPosef meshBoundingBoxCenter; XrExtent3DfEXT meshBoundingBoxExtents; XrTime lastUpdateTime; XrWorldMeshBlockStatusML status; } XrWorldMeshBlockStateML; typedef struct XrWorldMeshStateRequestInfoML { XrStructureType type; const void* next; XrSpace baseSpace; XrTime time; XrPosef boundingBoxCenter; XrExtent3DfEXT boundingBoxExtents; } XrWorldMeshStateRequestInfoML; typedef struct XrWorldMeshStateRequestCompletionML { XrStructureType type; void* next; XrResult futureResult; XrTime timestamp; uint32_t meshBlockStateCapacityInput; uint32_t meshBlockStateCountOutput; XrWorldMeshBlockStateML* meshBlockStates; } XrWorldMeshStateRequestCompletionML; typedef struct XrWorldMeshBufferRecommendedSizeInfoML { XrStructureType type; const void* next; uint32_t maxBlockCount; } XrWorldMeshBufferRecommendedSizeInfoML; typedef struct XrWorldMeshBufferSizeML { XrStructureType type; void* next; uint32_t size; } XrWorldMeshBufferSizeML; typedef struct XrWorldMeshBufferML { XrStructureType type; void* next; uint32_t bufferSize; void* buffer; } XrWorldMeshBufferML; typedef struct XrWorldMeshBlockRequestML { XrStructureType type; void* next; XrUuidEXT uuid; XrWorldMeshDetectorLodML lod; } XrWorldMeshBlockRequestML; typedef struct XrWorldMeshGetInfoML { XrStructureType type; const void* next; XrWorldMeshDetectorFlagsML flags; float fillHoleLength; float disconnectedComponentArea; uint32_t blockCount; XrWorldMeshBlockRequestML* blocks; } XrWorldMeshGetInfoML; typedef struct XrWorldMeshBlockML { XrStructureType type; void* next; XrUuidEXT uuid; XrWorldMeshBlockResultML blockResult; XrWorldMeshDetectorLodML lod; XrWorldMeshDetectorFlagsML flags; uint32_t indexCount; uint16_t* indexBuffer; uint32_t vertexCount; XrVector3f* vertexBuffer; uint32_t normalCount; XrVector3f* normalBuffer; uint32_t confidenceCount; float* confidenceBuffer; } XrWorldMeshBlockML; typedef struct XrWorldMeshRequestCompletionInfoML { XrStructureType type; const void* next; XrSpace meshSpace; XrTime meshSpaceLocateTime; } XrWorldMeshRequestCompletionInfoML; typedef struct XrWorldMeshRequestCompletionML { XrStructureType type; void* next; XrResult futureResult; uint32_t blockCount; XrWorldMeshBlockML* blocks; } XrWorldMeshRequestCompletionML; typedef XrResult (*PFN_xrCreateWorldMeshDetectorML)(XrSession session, const XrWorldMeshDetectorCreateInfoML* createInfo, XrWorldMeshDetectorML* detector);
typedef XrResult (*PFN_xrDestroyWorldMeshDetectorML)(XrWorldMeshDetectorML detector);
typedef XrResult (*PFN_xrRequestWorldMeshStateAsyncML)(XrWorldMeshDetectorML detector, const XrWorldMeshStateRequestInfoML* stateRequest, XrFutureEXT* future);
typedef XrResult (*PFN_xrRequestWorldMeshStateCompleteML)(XrWorldMeshDetectorML detector, XrFutureEXT future, XrWorldMeshStateRequestCompletionML* completion);
typedef XrResult (*PFN_xrGetWorldMeshBufferRecommendSizeML)(XrWorldMeshDetectorML detector, const XrWorldMeshBufferRecommendedSizeInfoML* sizeInfo, XrWorldMeshBufferSizeML* size);
typedef XrResult (*PFN_xrAllocateWorldMeshBufferML)(XrWorldMeshDetectorML detector, const XrWorldMeshBufferSizeML* size, XrWorldMeshBufferML* buffer);
typedef XrResult (*PFN_xrFreeWorldMeshBufferML)(XrWorldMeshDetectorML detector, const XrWorldMeshBufferML* buffer);
typedef XrResult (*PFN_xrRequestWorldMeshAsyncML)(XrWorldMeshDetectorML detector, const XrWorldMeshGetInfoML* getInfo, XrWorldMeshBufferML* buffer, XrFutureEXT* future);
typedef XrResult (*PFN_xrRequestWorldMeshCompleteML)(XrWorldMeshDetectorML detector, const XrWorldMeshRequestCompletionInfoML* completionInfo, XrFutureEXT future, XrWorldMeshRequestCompletionML* completion);
XrResult  xrCreateWorldMeshDetectorML(XrSession session, const XrWorldMeshDetectorCreateInfoML* createInfo, XrWorldMeshDetectorML* detector);
XrResult  xrDestroyWorldMeshDetectorML(XrWorldMeshDetectorML detector);
XrResult  xrRequestWorldMeshStateAsyncML(XrWorldMeshDetectorML detector, const XrWorldMeshStateRequestInfoML* stateRequest, XrFutureEXT* future);
XrResult  xrRequestWorldMeshStateCompleteML(XrWorldMeshDetectorML detector, XrFutureEXT future, XrWorldMeshStateRequestCompletionML* completion);
XrResult  xrGetWorldMeshBufferRecommendSizeML(XrWorldMeshDetectorML detector, const XrWorldMeshBufferRecommendedSizeInfoML* sizeInfo, XrWorldMeshBufferSizeML* size);
XrResult  xrAllocateWorldMeshBufferML(XrWorldMeshDetectorML detector, const XrWorldMeshBufferSizeML* size, XrWorldMeshBufferML* buffer);
XrResult  xrFreeWorldMeshBufferML(XrWorldMeshDetectorML detector, const XrWorldMeshBufferML* buffer);
XrResult  xrRequestWorldMeshAsyncML(XrWorldMeshDetectorML detector, const XrWorldMeshGetInfoML* getInfo, XrWorldMeshBufferML* buffer, XrFutureEXT* future);
XrResult  xrRequestWorldMeshCompleteML(XrWorldMeshDetectorML detector, const XrWorldMeshRequestCompletionInfoML* completionInfo, XrFutureEXT future, XrWorldMeshRequestCompletionML* completion);
#line 9351 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 9352 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrFacialExpressionClientML_T* XrFacialExpressionClientML; typedef enum XrFacialBlendShapeML { XR_FACIAL_BLEND_SHAPE_BROW_LOWERER_L_ML = 0, XR_FACIAL_BLEND_SHAPE_BROW_LOWERER_R_ML = 1, XR_FACIAL_BLEND_SHAPE_CHEEK_RAISER_L_ML = 2, XR_FACIAL_BLEND_SHAPE_CHEEK_RAISER_R_ML = 3, XR_FACIAL_BLEND_SHAPE_CHIN_RAISER_ML = 4, XR_FACIAL_BLEND_SHAPE_DIMPLER_L_ML = 5, XR_FACIAL_BLEND_SHAPE_DIMPLER_R_ML = 6, XR_FACIAL_BLEND_SHAPE_EYES_CLOSED_L_ML = 7, XR_FACIAL_BLEND_SHAPE_EYES_CLOSED_R_ML = 8, XR_FACIAL_BLEND_SHAPE_INNER_BROW_RAISER_L_ML = 9, XR_FACIAL_BLEND_SHAPE_INNER_BROW_RAISER_R_ML = 10, XR_FACIAL_BLEND_SHAPE_JAW_DROP_ML = 11, XR_FACIAL_BLEND_SHAPE_LID_TIGHTENER_L_ML = 12, XR_FACIAL_BLEND_SHAPE_LID_TIGHTENER_R_ML = 13, XR_FACIAL_BLEND_SHAPE_LIP_CORNER_DEPRESSOR_L_ML = 14, XR_FACIAL_BLEND_SHAPE_LIP_CORNER_DEPRESSOR_R_ML = 15, XR_FACIAL_BLEND_SHAPE_LIP_CORNER_PULLER_L_ML = 16, XR_FACIAL_BLEND_SHAPE_LIP_CORNER_PULLER_R_ML = 17, XR_FACIAL_BLEND_SHAPE_LIP_FUNNELER_LB_ML = 18, XR_FACIAL_BLEND_SHAPE_LIP_FUNNELER_LT_ML = 19, XR_FACIAL_BLEND_SHAPE_LIP_FUNNELER_RB_ML = 20, XR_FACIAL_BLEND_SHAPE_LIP_FUNNELER_RT_ML = 21, XR_FACIAL_BLEND_SHAPE_LIP_PRESSOR_L_ML = 22, XR_FACIAL_BLEND_SHAPE_LIP_PRESSOR_R_ML = 23, XR_FACIAL_BLEND_SHAPE_LIP_PUCKER_L_ML = 24, XR_FACIAL_BLEND_SHAPE_LIP_PUCKER_R_ML = 25, XR_FACIAL_BLEND_SHAPE_LIP_STRETCHER_L_ML = 26, XR_FACIAL_BLEND_SHAPE_LIP_STRETCHER_R_ML = 27, XR_FACIAL_BLEND_SHAPE_LIP_SUCK_LB_ML = 28, XR_FACIAL_BLEND_SHAPE_LIP_SUCK_LT_ML = 29, XR_FACIAL_BLEND_SHAPE_LIP_SUCK_RB_ML = 30, XR_FACIAL_BLEND_SHAPE_LIP_SUCK_RT_ML = 31, XR_FACIAL_BLEND_SHAPE_LIP_TIGHTENER_L_ML = 32, XR_FACIAL_BLEND_SHAPE_LIP_TIGHTENER_R_ML = 33, XR_FACIAL_BLEND_SHAPE_LIPS_TOWARD_ML = 34, XR_FACIAL_BLEND_SHAPE_LOWER_LIP_DEPRESSOR_L_ML = 35, XR_FACIAL_BLEND_SHAPE_LOWER_LIP_DEPRESSOR_R_ML = 36, XR_FACIAL_BLEND_SHAPE_NOSE_WRINKLER_L_ML = 37, XR_FACIAL_BLEND_SHAPE_NOSE_WRINKLER_R_ML = 38, XR_FACIAL_BLEND_SHAPE_OUTER_BROW_RAISER_L_ML = 39, XR_FACIAL_BLEND_SHAPE_OUTER_BROW_RAISER_R_ML = 40, XR_FACIAL_BLEND_SHAPE_UPPER_LID_RAISER_L_ML = 41, XR_FACIAL_BLEND_SHAPE_UPPER_LID_RAISER_R_ML = 42, XR_FACIAL_BLEND_SHAPE_UPPER_LIP_RAISER_L_ML = 43, XR_FACIAL_BLEND_SHAPE_UPPER_LIP_RAISER_R_ML = 44, XR_FACIAL_BLEND_SHAPE_TONGUE_OUT_ML = 45, XR_FACIAL_BLEND_SHAPE_MAX_ENUM_ML = 0x7FFFFFFF } XrFacialBlendShapeML; typedef XrFlags64 XrFacialExpressionBlendShapePropertiesFlagsML; static const XrFacialExpressionBlendShapePropertiesFlagsML XR_FACIAL_EXPRESSION_BLEND_SHAPE_PROPERTIES_VALID_BIT_ML = 0x00000001; static const XrFacialExpressionBlendShapePropertiesFlagsML XR_FACIAL_EXPRESSION_BLEND_SHAPE_PROPERTIES_TRACKED_BIT_ML = 0x00000002; typedef struct XrSystemFacialExpressionPropertiesML { XrStructureType type; void* next; XrBool32 supportsFacialExpression; } XrSystemFacialExpressionPropertiesML; typedef struct XrFacialExpressionClientCreateInfoML { XrStructureType type; const void* next; uint32_t requestedCount; const XrFacialBlendShapeML* requestedFacialBlendShapes; } XrFacialExpressionClientCreateInfoML; typedef struct XrFacialExpressionBlendShapeGetInfoML { XrStructureType type; const void* next; } XrFacialExpressionBlendShapeGetInfoML; typedef struct XrFacialExpressionBlendShapePropertiesML { XrStructureType type; void* next; XrFacialBlendShapeML requestedFacialBlendShape; float weight; XrFacialExpressionBlendShapePropertiesFlagsML flags; XrTime time; } XrFacialExpressionBlendShapePropertiesML; typedef XrResult (*PFN_xrCreateFacialExpressionClientML)(XrSession session, const XrFacialExpressionClientCreateInfoML* createInfo, XrFacialExpressionClientML* facialExpressionClient);
typedef XrResult (*PFN_xrDestroyFacialExpressionClientML)(XrFacialExpressionClientML facialExpressionClient);
typedef XrResult (*PFN_xrGetFacialExpressionBlendShapePropertiesML)(XrFacialExpressionClientML facialExpressionClient, const XrFacialExpressionBlendShapeGetInfoML* blendShapeGetInfo, uint32_t blendShapeCount, XrFacialExpressionBlendShapePropertiesML* blendShapes);
XrResult  xrCreateFacialExpressionClientML(XrSession session, const XrFacialExpressionClientCreateInfoML* createInfo, XrFacialExpressionClientML* facialExpressionClient);
XrResult  xrDestroyFacialExpressionClientML(XrFacialExpressionClientML facialExpressionClient);
XrResult  xrGetFacialExpressionBlendShapePropertiesML(XrFacialExpressionClientML facialExpressionClient, const XrFacialExpressionBlendShapeGetInfoML* blendShapeGetInfo, uint32_t blendShapeCount, XrFacialExpressionBlendShapePropertiesML* blendShapes);
#line 9463 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 9464 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrSystemSimultaneousHandsAndControllersPropertiesMETA { XrStructureType type; void* next; XrBool32 supportsSimultaneousHandsAndControllers; } XrSystemSimultaneousHandsAndControllersPropertiesMETA; typedef struct XrSimultaneousHandsAndControllersTrackingResumeInfoMETA { XrStructureType type; const void* next; } XrSimultaneousHandsAndControllersTrackingResumeInfoMETA; typedef struct XrSimultaneousHandsAndControllersTrackingPauseInfoMETA { XrStructureType type; const void* next; } XrSimultaneousHandsAndControllersTrackingPauseInfoMETA; typedef XrResult (*PFN_xrResumeSimultaneousHandsAndControllersTrackingMETA)(XrSession session, const XrSimultaneousHandsAndControllersTrackingResumeInfoMETA* resumeInfo);
typedef XrResult (*PFN_xrPauseSimultaneousHandsAndControllersTrackingMETA)(XrSession session, const XrSimultaneousHandsAndControllersTrackingPauseInfoMETA* pauseInfo);
XrResult  xrResumeSimultaneousHandsAndControllersTrackingMETA(XrSession session, const XrSimultaneousHandsAndControllersTrackingResumeInfoMETA* resumeInfo);
XrResult  xrPauseSimultaneousHandsAndControllersTrackingMETA(XrSession session, const XrSimultaneousHandsAndControllersTrackingPauseInfoMETA* pauseInfo);
#line 9512 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 9513 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrColocationDiscoveryStartInfoMETA { XrStructureType type; const void* next; } XrColocationDiscoveryStartInfoMETA; typedef struct XrColocationDiscoveryStopInfoMETA { XrStructureType type; const void* next; } XrColocationDiscoveryStopInfoMETA; typedef struct XrColocationAdvertisementStartInfoMETA { XrStructureType type; const void* next; uint32_t bufferSize; uint8_t* buffer; } XrColocationAdvertisementStartInfoMETA; typedef struct XrColocationAdvertisementStopInfoMETA { XrStructureType type; const void* next; } XrColocationAdvertisementStopInfoMETA; typedef struct XrEventDataStartColocationAdvertisementCompleteMETA { XrStructureType type; const void* next; XrAsyncRequestIdFB advertisementRequestId; XrResult result; XrUuid advertisementUuid; } XrEventDataStartColocationAdvertisementCompleteMETA; typedef struct XrEventDataStopColocationAdvertisementCompleteMETA { XrStructureType type; const void* next; XrAsyncRequestIdFB requestId; XrResult result; } XrEventDataStopColocationAdvertisementCompleteMETA; typedef struct XrEventDataColocationAdvertisementCompleteMETA { XrStructureType type; const void* next; XrAsyncRequestIdFB advertisementRequestId; XrResult result; } XrEventDataColocationAdvertisementCompleteMETA; typedef struct XrEventDataStartColocationDiscoveryCompleteMETA { XrStructureType type; const void* next; XrAsyncRequestIdFB discoveryRequestId; XrResult result; } XrEventDataStartColocationDiscoveryCompleteMETA; typedef struct XrEventDataColocationDiscoveryResultMETA { XrStructureType type; const void* next; XrAsyncRequestIdFB discoveryRequestId; XrUuid advertisementUuid; uint32_t bufferSize; uint8_t buffer[1024]; } XrEventDataColocationDiscoveryResultMETA; typedef struct XrEventDataColocationDiscoveryCompleteMETA { XrStructureType type; const void* next; XrAsyncRequestIdFB discoveryRequestId; XrResult result; } XrEventDataColocationDiscoveryCompleteMETA; typedef struct XrEventDataStopColocationDiscoveryCompleteMETA { XrStructureType type; const void* next; XrAsyncRequestIdFB requestId; XrResult result; } XrEventDataStopColocationDiscoveryCompleteMETA; typedef struct XrSystemColocationDiscoveryPropertiesMETA { XrStructureType type; void* next; XrBool32 supportsColocationDiscovery; } XrSystemColocationDiscoveryPropertiesMETA; typedef XrResult (*PFN_xrStartColocationDiscoveryMETA)(XrSession session, const XrColocationDiscoveryStartInfoMETA* info, XrAsyncRequestIdFB* discoveryRequestId);
typedef XrResult (*PFN_xrStopColocationDiscoveryMETA)(XrSession session, const XrColocationDiscoveryStopInfoMETA* info, XrAsyncRequestIdFB* requestId);
typedef XrResult (*PFN_xrStartColocationAdvertisementMETA)(XrSession session, const XrColocationAdvertisementStartInfoMETA* info, XrAsyncRequestIdFB* advertisementRequestId);
typedef XrResult (*PFN_xrStopColocationAdvertisementMETA)(XrSession session, const XrColocationAdvertisementStopInfoMETA* info, XrAsyncRequestIdFB* requestId);
XrResult  xrStartColocationDiscoveryMETA(XrSession session, const XrColocationDiscoveryStartInfoMETA* info, XrAsyncRequestIdFB* discoveryRequestId);
XrResult  xrStopColocationDiscoveryMETA(XrSession session, const XrColocationDiscoveryStopInfoMETA* info, XrAsyncRequestIdFB* requestId);
XrResult  xrStartColocationAdvertisementMETA(XrSession session, const XrColocationAdvertisementStartInfoMETA* info, XrAsyncRequestIdFB* advertisementRequestId);
XrResult  xrStopColocationAdvertisementMETA(XrSession session, const XrColocationAdvertisementStopInfoMETA* info, XrAsyncRequestIdFB* requestId);
#line 9634 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 9635 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrSystemSpatialEntityGroupSharingPropertiesMETA { XrStructureType type; void* next; XrBool32 supportsSpatialEntityGroupSharing; } XrSystemSpatialEntityGroupSharingPropertiesMETA; typedef struct XrShareSpacesRecipientGroupsMETA { XrStructureType type; const void* next; uint32_t groupCount; XrUuid* groups; } XrShareSpacesRecipientGroupsMETA; typedef struct XrSpaceGroupUuidFilterInfoMETA { XrStructureType type; const void* next; XrUuid groupUuid; } XrSpaceGroupUuidFilterInfoMETA; typedef uint64_t XrSpatialEntityIdEXT; typedef uint64_t XrSpatialBufferIdEXT; typedef struct XrSpatialEntityEXT_T* XrSpatialEntityEXT; typedef struct XrSpatialContextEXT_T* XrSpatialContextEXT; typedef struct XrSpatialSnapshotEXT_T* XrSpatialSnapshotEXT; typedef enum XrSpatialCapabilityEXT { XR_SPATIAL_CAPABILITY_PLANE_TRACKING_EXT = 1000741000, XR_SPATIAL_CAPABILITY_MARKER_TRACKING_QR_CODE_EXT = 1000743000, XR_SPATIAL_CAPABILITY_MARKER_TRACKING_MICRO_QR_CODE_EXT = 1000743001, XR_SPATIAL_CAPABILITY_MARKER_TRACKING_ARUCO_MARKER_EXT = 1000743002, XR_SPATIAL_CAPABILITY_MARKER_TRACKING_APRIL_TAG_EXT = 1000743003, XR_SPATIAL_CAPABILITY_ANCHOR_EXT = 1000762000, XR_SPATIAL_CAPABILITY_MAX_ENUM_EXT = 0x7FFFFFFF } XrSpatialCapabilityEXT; typedef enum XrSpatialCapabilityFeatureEXT { XR_SPATIAL_CAPABILITY_FEATURE_MARKER_TRACKING_FIXED_SIZE_MARKERS_EXT = 1000743000, XR_SPATIAL_CAPABILITY_FEATURE_MARKER_TRACKING_STATIC_MARKERS_EXT = 1000743001, XR_SPATIAL_CAPABILITY_FEATURE_MAX_ENUM_EXT = 0x7FFFFFFF } XrSpatialCapabilityFeatureEXT; typedef enum XrSpatialComponentTypeEXT { XR_SPATIAL_COMPONENT_TYPE_BOUNDED_2D_EXT = 1, XR_SPATIAL_COMPONENT_TYPE_BOUNDED_3D_EXT = 2, XR_SPATIAL_COMPONENT_TYPE_PARENT_EXT = 3, XR_SPATIAL_COMPONENT_TYPE_MESH_3D_EXT = 4, XR_SPATIAL_COMPONENT_TYPE_PLANE_ALIGNMENT_EXT = 1000741000, XR_SPATIAL_COMPONENT_TYPE_MESH_2D_EXT = 1000741001, XR_SPATIAL_COMPONENT_TYPE_POLYGON_2D_EXT = 1000741002, XR_SPATIAL_COMPONENT_TYPE_PLANE_SEMANTIC_LABEL_EXT = 1000741003, XR_SPATIAL_COMPONENT_TYPE_MARKER_EXT = 1000743000, XR_SPATIAL_COMPONENT_TYPE_ANCHOR_EXT = 1000762000, XR_SPATIAL_COMPONENT_TYPE_PERSISTENCE_EXT = 1000763000, XR_SPATIAL_COMPONENT_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF } XrSpatialComponentTypeEXT; typedef enum XrSpatialEntityTrackingStateEXT { XR_SPATIAL_ENTITY_TRACKING_STATE_STOPPED_EXT = 1, XR_SPATIAL_ENTITY_TRACKING_STATE_PAUSED_EXT = 2, XR_SPATIAL_ENTITY_TRACKING_STATE_TRACKING_EXT = 3, XR_SPATIAL_ENTITY_TRACKING_STATE_MAX_ENUM_EXT = 0x7FFFFFFF } XrSpatialEntityTrackingStateEXT; typedef enum XrSpatialBufferTypeEXT { XR_SPATIAL_BUFFER_TYPE_UNKNOWN_EXT = 0, XR_SPATIAL_BUFFER_TYPE_STRING_EXT = 1, XR_SPATIAL_BUFFER_TYPE_UINT8_EXT = 2, XR_SPATIAL_BUFFER_TYPE_UINT16_EXT = 3, XR_SPATIAL_BUFFER_TYPE_UINT32_EXT = 4, XR_SPATIAL_BUFFER_TYPE_FLOAT_EXT = 5, XR_SPATIAL_BUFFER_TYPE_VECTOR2F_EXT = 6, XR_SPATIAL_BUFFER_TYPE_VECTOR3F_EXT = 7, XR_SPATIAL_BUFFER_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF } XrSpatialBufferTypeEXT; typedef struct XrSpatialCapabilityComponentTypesEXT { XrStructureType type; void* next; uint32_t componentTypeCapacityInput; uint32_t componentTypeCountOutput; XrSpatialComponentTypeEXT* componentTypes; } XrSpatialCapabilityComponentTypesEXT; typedef struct XrSpatialCapabilityConfigurationBaseHeaderEXT { XrStructureType type; const void* next; XrSpatialCapabilityEXT capability; uint32_t enabledComponentCount; const XrSpatialComponentTypeEXT* enabledComponents; } XrSpatialCapabilityConfigurationBaseHeaderEXT; typedef struct XrSpatialContextCreateInfoEXT { XrStructureType type; const void* next; uint32_t capabilityConfigCount; const XrSpatialCapabilityConfigurationBaseHeaderEXT* const* capabilityConfigs; } XrSpatialContextCreateInfoEXT; typedef struct XrCreateSpatialContextCompletionEXT { XrStructureType type; void* next; XrResult futureResult; XrSpatialContextEXT spatialContext; } XrCreateSpatialContextCompletionEXT; typedef struct XrSpatialDiscoverySnapshotCreateInfoEXT { XrStructureType type; const void* next; uint32_t componentTypeCount; const XrSpatialComponentTypeEXT* componentTypes; } XrSpatialDiscoverySnapshotCreateInfoEXT; typedef struct XrCreateSpatialDiscoverySnapshotCompletionInfoEXT { XrStructureType type; const void* next; XrSpace baseSpace; XrTime time; XrFutureEXT future; } XrCreateSpatialDiscoverySnapshotCompletionInfoEXT; typedef struct XrCreateSpatialDiscoverySnapshotCompletionEXT { XrStructureType type; void* next; XrResult futureResult; XrSpatialSnapshotEXT snapshot; } XrCreateSpatialDiscoverySnapshotCompletionEXT; typedef struct XrSpatialComponentDataQueryConditionEXT { XrStructureType type; const void* next; uint32_t componentTypeCount; const XrSpatialComponentTypeEXT* componentTypes; } XrSpatialComponentDataQueryConditionEXT; typedef struct XrSpatialComponentDataQueryResultEXT { XrStructureType type; void* next; uint32_t entityIdCapacityInput; uint32_t entityIdCountOutput; XrSpatialEntityIdEXT* entityIds; uint32_t entityStateCapacityInput; uint32_t entityStateCountOutput; XrSpatialEntityTrackingStateEXT* entityStates; } XrSpatialComponentDataQueryResultEXT; typedef struct XrSpatialBufferEXT { XrSpatialBufferIdEXT bufferId; XrSpatialBufferTypeEXT bufferType; } XrSpatialBufferEXT; typedef struct XrSpatialBufferGetInfoEXT { XrStructureType type; const void* next; XrSpatialBufferIdEXT bufferId; } XrSpatialBufferGetInfoEXT; typedef struct XrSpatialBounded2DDataEXT { XrPosef center; XrExtent2Df extents; } XrSpatialBounded2DDataEXT; typedef struct XrSpatialComponentBounded2DListEXT { XrStructureType type; void* next; uint32_t boundCount; XrSpatialBounded2DDataEXT* bounds; } XrSpatialComponentBounded2DListEXT; typedef struct XrSpatialComponentBounded3DListEXT { XrStructureType type; void* next; uint32_t boundCount; XrBoxf* bounds; } XrSpatialComponentBounded3DListEXT; typedef struct XrSpatialComponentParentListEXT { XrStructureType type; void* next; uint32_t parentCount; XrSpatialEntityIdEXT* parents; } XrSpatialComponentParentListEXT; typedef struct XrSpatialMeshDataEXT { XrPosef origin; XrSpatialBufferEXT vertexBuffer; XrSpatialBufferEXT indexBuffer; } XrSpatialMeshDataEXT; typedef struct XrSpatialComponentMesh3DListEXT { XrStructureType type; void* next; uint32_t meshCount; XrSpatialMeshDataEXT* meshes; } XrSpatialComponentMesh3DListEXT; typedef struct XrSpatialEntityFromIdCreateInfoEXT { XrStructureType type; const void* next; XrSpatialEntityIdEXT entityId; } XrSpatialEntityFromIdCreateInfoEXT; typedef struct XrSpatialUpdateSnapshotCreateInfoEXT { XrStructureType type; const void* next; uint32_t entityCount; const XrSpatialEntityEXT* entities; uint32_t componentTypeCount; const XrSpatialComponentTypeEXT* componentTypes; XrSpace baseSpace; XrTime time; } XrSpatialUpdateSnapshotCreateInfoEXT; typedef struct XrEventDataSpatialDiscoveryRecommendedEXT { XrStructureType type; const void* next; XrSpatialContextEXT spatialContext; } XrEventDataSpatialDiscoveryRecommendedEXT; typedef struct XrSpatialFilterTrackingStateEXT { XrStructureType type; const void* next; XrSpatialEntityTrackingStateEXT trackingState; } XrSpatialFilterTrackingStateEXT; typedef XrResult (*PFN_xrEnumerateSpatialCapabilitiesEXT)(XrInstance instance, XrSystemId systemId, uint32_t capabilityCapacityInput, uint32_t* capabilityCountOutput, XrSpatialCapabilityEXT* capabilities);
typedef XrResult (*PFN_xrEnumerateSpatialCapabilityComponentTypesEXT)(XrInstance instance, XrSystemId systemId, XrSpatialCapabilityEXT capability, XrSpatialCapabilityComponentTypesEXT* capabilityComponents);
typedef XrResult (*PFN_xrEnumerateSpatialCapabilityFeaturesEXT)(XrInstance instance, XrSystemId systemId, XrSpatialCapabilityEXT capability, uint32_t capabilityFeatureCapacityInput, uint32_t* capabilityFeatureCountOutput, XrSpatialCapabilityFeatureEXT* capabilityFeatures);
typedef XrResult (*PFN_xrCreateSpatialContextAsyncEXT)(XrSession session, const XrSpatialContextCreateInfoEXT* createInfo, XrFutureEXT* future);
typedef XrResult (*PFN_xrCreateSpatialContextCompleteEXT)(XrSession session, XrFutureEXT future, XrCreateSpatialContextCompletionEXT* completion);
typedef XrResult (*PFN_xrDestroySpatialContextEXT)(XrSpatialContextEXT spatialContext);
typedef XrResult (*PFN_xrCreateSpatialDiscoverySnapshotAsyncEXT)(XrSpatialContextEXT spatialContext, const XrSpatialDiscoverySnapshotCreateInfoEXT* createInfo, XrFutureEXT* future);
typedef XrResult (*PFN_xrCreateSpatialDiscoverySnapshotCompleteEXT)(XrSpatialContextEXT spatialContext, const XrCreateSpatialDiscoverySnapshotCompletionInfoEXT* createSnapshotCompletionInfo, XrCreateSpatialDiscoverySnapshotCompletionEXT* completion);
typedef XrResult (*PFN_xrQuerySpatialComponentDataEXT)(XrSpatialSnapshotEXT snapshot, const XrSpatialComponentDataQueryConditionEXT* queryCondition, XrSpatialComponentDataQueryResultEXT* queryResult);
typedef XrResult (*PFN_xrDestroySpatialSnapshotEXT)(XrSpatialSnapshotEXT snapshot);
typedef XrResult (*PFN_xrCreateSpatialEntityFromIdEXT)(XrSpatialContextEXT spatialContext, const XrSpatialEntityFromIdCreateInfoEXT* createInfo, XrSpatialEntityEXT* spatialEntity);
typedef XrResult (*PFN_xrDestroySpatialEntityEXT)(XrSpatialEntityEXT spatialEntity);
typedef XrResult (*PFN_xrCreateSpatialUpdateSnapshotEXT)(XrSpatialContextEXT spatialContext, const XrSpatialUpdateSnapshotCreateInfoEXT* createInfo, XrSpatialSnapshotEXT* snapshot);
typedef XrResult (*PFN_xrGetSpatialBufferStringEXT)(XrSpatialSnapshotEXT snapshot, const XrSpatialBufferGetInfoEXT* info, uint32_t bufferCapacityInput, uint32_t* bufferCountOutput, char* buffer);
typedef XrResult (*PFN_xrGetSpatialBufferUint8EXT)(XrSpatialSnapshotEXT snapshot, const XrSpatialBufferGetInfoEXT* info, uint32_t bufferCapacityInput, uint32_t* bufferCountOutput, uint8_t* buffer);
typedef XrResult (*PFN_xrGetSpatialBufferUint16EXT)(XrSpatialSnapshotEXT snapshot, const XrSpatialBufferGetInfoEXT* info, uint32_t bufferCapacityInput, uint32_t* bufferCountOutput, uint16_t* buffer);
typedef XrResult (*PFN_xrGetSpatialBufferUint32EXT)(XrSpatialSnapshotEXT snapshot, const XrSpatialBufferGetInfoEXT* info, uint32_t bufferCapacityInput, uint32_t* bufferCountOutput, uint32_t* buffer);
typedef XrResult (*PFN_xrGetSpatialBufferFloatEXT)(XrSpatialSnapshotEXT snapshot, const XrSpatialBufferGetInfoEXT* info, uint32_t bufferCapacityInput, uint32_t* bufferCountOutput, float* buffer);
typedef XrResult (*PFN_xrGetSpatialBufferVector2fEXT)(XrSpatialSnapshotEXT snapshot, const XrSpatialBufferGetInfoEXT* info, uint32_t bufferCapacityInput, uint32_t* bufferCountOutput, XrVector2f* buffer);
typedef XrResult (*PFN_xrGetSpatialBufferVector3fEXT)(XrSpatialSnapshotEXT snapshot, const XrSpatialBufferGetInfoEXT* info, uint32_t bufferCapacityInput, uint32_t* bufferCountOutput, XrVector3f* buffer);
XrResult  xrEnumerateSpatialCapabilitiesEXT(XrInstance instance, XrSystemId systemId, uint32_t capabilityCapacityInput, uint32_t* capabilityCountOutput, XrSpatialCapabilityEXT* capabilities);
XrResult  xrEnumerateSpatialCapabilityComponentTypesEXT(XrInstance instance, XrSystemId systemId, XrSpatialCapabilityEXT capability, XrSpatialCapabilityComponentTypesEXT* capabilityComponents);
XrResult  xrEnumerateSpatialCapabilityFeaturesEXT(XrInstance instance, XrSystemId systemId, XrSpatialCapabilityEXT capability, uint32_t capabilityFeatureCapacityInput, uint32_t* capabilityFeatureCountOutput, XrSpatialCapabilityFeatureEXT* capabilityFeatures);
XrResult  xrCreateSpatialContextAsyncEXT(XrSession session, const XrSpatialContextCreateInfoEXT* createInfo, XrFutureEXT* future);
XrResult  xrCreateSpatialContextCompleteEXT(XrSession session, XrFutureEXT future, XrCreateSpatialContextCompletionEXT* completion);
XrResult  xrDestroySpatialContextEXT(XrSpatialContextEXT spatialContext);
XrResult  xrCreateSpatialDiscoverySnapshotAsyncEXT(XrSpatialContextEXT spatialContext, const XrSpatialDiscoverySnapshotCreateInfoEXT* createInfo, XrFutureEXT* future);
XrResult  xrCreateSpatialDiscoverySnapshotCompleteEXT(XrSpatialContextEXT spatialContext, const XrCreateSpatialDiscoverySnapshotCompletionInfoEXT* createSnapshotCompletionInfo, XrCreateSpatialDiscoverySnapshotCompletionEXT* completion);
XrResult  xrQuerySpatialComponentDataEXT(XrSpatialSnapshotEXT snapshot, const XrSpatialComponentDataQueryConditionEXT* queryCondition, XrSpatialComponentDataQueryResultEXT* queryResult);
XrResult  xrDestroySpatialSnapshotEXT(XrSpatialSnapshotEXT snapshot);
XrResult  xrCreateSpatialEntityFromIdEXT(XrSpatialContextEXT spatialContext, const XrSpatialEntityFromIdCreateInfoEXT* createInfo, XrSpatialEntityEXT* spatialEntity);
XrResult  xrDestroySpatialEntityEXT(XrSpatialEntityEXT spatialEntity);
XrResult  xrCreateSpatialUpdateSnapshotEXT(XrSpatialContextEXT spatialContext, const XrSpatialUpdateSnapshotCreateInfoEXT* createInfo, XrSpatialSnapshotEXT* snapshot);
XrResult  xrGetSpatialBufferStringEXT(XrSpatialSnapshotEXT snapshot, const XrSpatialBufferGetInfoEXT* info, uint32_t bufferCapacityInput, uint32_t* bufferCountOutput, char* buffer);
XrResult  xrGetSpatialBufferUint8EXT(XrSpatialSnapshotEXT snapshot, const XrSpatialBufferGetInfoEXT* info, uint32_t bufferCapacityInput, uint32_t* bufferCountOutput, uint8_t* buffer);
XrResult  xrGetSpatialBufferUint16EXT(XrSpatialSnapshotEXT snapshot, const XrSpatialBufferGetInfoEXT* info, uint32_t bufferCapacityInput, uint32_t* bufferCountOutput, uint16_t* buffer);
XrResult  xrGetSpatialBufferUint32EXT(XrSpatialSnapshotEXT snapshot, const XrSpatialBufferGetInfoEXT* info, uint32_t bufferCapacityInput, uint32_t* bufferCountOutput, uint32_t* buffer);
XrResult  xrGetSpatialBufferFloatEXT(XrSpatialSnapshotEXT snapshot, const XrSpatialBufferGetInfoEXT* info, uint32_t bufferCapacityInput, uint32_t* bufferCountOutput, float* buffer);
XrResult  xrGetSpatialBufferVector2fEXT(XrSpatialSnapshotEXT snapshot, const XrSpatialBufferGetInfoEXT* info, uint32_t bufferCapacityInput, uint32_t* bufferCountOutput, XrVector2f* buffer);
XrResult  xrGetSpatialBufferVector3fEXT(XrSpatialSnapshotEXT snapshot, const XrSpatialBufferGetInfoEXT* info, uint32_t bufferCapacityInput, uint32_t* bufferCountOutput, XrVector3f* buffer);
#line 10019 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 10020 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef enum XrSpatialPlaneAlignmentEXT { XR_SPATIAL_PLANE_ALIGNMENT_HORIZONTAL_UPWARD_EXT = 0, XR_SPATIAL_PLANE_ALIGNMENT_HORIZONTAL_DOWNWARD_EXT = 1, XR_SPATIAL_PLANE_ALIGNMENT_VERTICAL_EXT = 2, XR_SPATIAL_PLANE_ALIGNMENT_ARBITRARY_EXT = 3, XR_SPATIAL_PLANE_ALIGNMENT_MAX_ENUM_EXT = 0x7FFFFFFF } XrSpatialPlaneAlignmentEXT; typedef enum XrSpatialPlaneSemanticLabelEXT { XR_SPATIAL_PLANE_SEMANTIC_LABEL_UNCATEGORIZED_EXT = 1, XR_SPATIAL_PLANE_SEMANTIC_LABEL_FLOOR_EXT = 2, XR_SPATIAL_PLANE_SEMANTIC_LABEL_WALL_EXT = 3, XR_SPATIAL_PLANE_SEMANTIC_LABEL_CEILING_EXT = 4, XR_SPATIAL_PLANE_SEMANTIC_LABEL_TABLE_EXT = 5, XR_SPATIAL_PLANE_SEMANTIC_LABEL_MAX_ENUM_EXT = 0x7FFFFFFF } XrSpatialPlaneSemanticLabelEXT; typedef struct XrSpatialCapabilityConfigurationPlaneTrackingEXT { XrStructureType type; const void* next; XrSpatialCapabilityEXT capability; uint32_t enabledComponentCount; const XrSpatialComponentTypeEXT* enabledComponents; } XrSpatialCapabilityConfigurationPlaneTrackingEXT; typedef struct XrSpatialComponentPlaneAlignmentListEXT { XrStructureType type; void* next; uint32_t planeAlignmentCount; XrSpatialPlaneAlignmentEXT* planeAlignments; } XrSpatialComponentPlaneAlignmentListEXT; typedef struct XrSpatialComponentMesh2DListEXT { XrStructureType type; void* next; uint32_t meshCount; XrSpatialMeshDataEXT* meshes; } XrSpatialComponentMesh2DListEXT; typedef struct XrSpatialPolygon2DDataEXT { XrPosef origin; XrSpatialBufferEXT vertexBuffer; } XrSpatialPolygon2DDataEXT; typedef struct XrSpatialComponentPolygon2DListEXT { XrStructureType type; void* next; uint32_t polygonCount; XrSpatialPolygon2DDataEXT* polygons; } XrSpatialComponentPolygon2DListEXT; typedef struct XrSpatialComponentPlaneSemanticLabelListEXT { XrStructureType type; void* next; uint32_t semanticLabelCount; XrSpatialPlaneSemanticLabelEXT* semanticLabels; } XrSpatialComponentPlaneSemanticLabelListEXT; typedef enum XrSpatialMarkerArucoDictEXT { XR_SPATIAL_MARKER_ARUCO_DICT_4X4_50_EXT = 1, XR_SPATIAL_MARKER_ARUCO_DICT_4X4_100_EXT = 2, XR_SPATIAL_MARKER_ARUCO_DICT_4X4_250_EXT = 3, XR_SPATIAL_MARKER_ARUCO_DICT_4X4_1000_EXT = 4, XR_SPATIAL_MARKER_ARUCO_DICT_5X5_50_EXT = 5, XR_SPATIAL_MARKER_ARUCO_DICT_5X5_100_EXT = 6, XR_SPATIAL_MARKER_ARUCO_DICT_5X5_250_EXT = 7, XR_SPATIAL_MARKER_ARUCO_DICT_5X5_1000_EXT = 8, XR_SPATIAL_MARKER_ARUCO_DICT_6X6_50_EXT = 9, XR_SPATIAL_MARKER_ARUCO_DICT_6X6_100_EXT = 10, XR_SPATIAL_MARKER_ARUCO_DICT_6X6_250_EXT = 11, XR_SPATIAL_MARKER_ARUCO_DICT_6X6_1000_EXT = 12, XR_SPATIAL_MARKER_ARUCO_DICT_7X7_50_EXT = 13, XR_SPATIAL_MARKER_ARUCO_DICT_7X7_100_EXT = 14, XR_SPATIAL_MARKER_ARUCO_DICT_7X7_250_EXT = 15, XR_SPATIAL_MARKER_ARUCO_DICT_7X7_1000_EXT = 16, XR_SPATIAL_MARKER_ARUCO_DICT_MAX_ENUM_EXT = 0x7FFFFFFF } XrSpatialMarkerArucoDictEXT; typedef enum XrSpatialMarkerAprilTagDictEXT { XR_SPATIAL_MARKER_APRIL_TAG_DICT_16H5_EXT = 1, XR_SPATIAL_MARKER_APRIL_TAG_DICT_25H9_EXT = 2, XR_SPATIAL_MARKER_APRIL_TAG_DICT_36H10_EXT = 3, XR_SPATIAL_MARKER_APRIL_TAG_DICT_36H11_EXT = 4, XR_SPATIAL_MARKER_APRIL_TAG_DICT_MAX_ENUM_EXT = 0x7FFFFFFF } XrSpatialMarkerAprilTagDictEXT; typedef struct XrSpatialCapabilityConfigurationQrCodeEXT { XrStructureType type; const void* next; XrSpatialCapabilityEXT capability; uint32_t enabledComponentCount; const XrSpatialComponentTypeEXT* enabledComponents; } XrSpatialCapabilityConfigurationQrCodeEXT; typedef struct XrSpatialCapabilityConfigurationMicroQrCodeEXT { XrStructureType type; const void* next; XrSpatialCapabilityEXT capability; uint32_t enabledComponentCount; const XrSpatialComponentTypeEXT* enabledComponents; } XrSpatialCapabilityConfigurationMicroQrCodeEXT; typedef struct XrSpatialCapabilityConfigurationArucoMarkerEXT { XrStructureType type; const void* next; XrSpatialCapabilityEXT capability; uint32_t enabledComponentCount; const XrSpatialComponentTypeEXT* enabledComponents; XrSpatialMarkerArucoDictEXT arUcoDict; } XrSpatialCapabilityConfigurationArucoMarkerEXT; typedef struct XrSpatialCapabilityConfigurationAprilTagEXT { XrStructureType type; const void* next; XrSpatialCapabilityEXT capability; uint32_t enabledComponentCount; const XrSpatialComponentTypeEXT* enabledComponents; XrSpatialMarkerAprilTagDictEXT aprilDict; } XrSpatialCapabilityConfigurationAprilTagEXT; typedef struct XrSpatialMarkerSizeEXT { XrStructureType type; const void* next; float markerSideLength; } XrSpatialMarkerSizeEXT; typedef struct XrSpatialMarkerStaticOptimizationEXT { XrStructureType type; const void* next; XrBool32 optimizeForStaticMarker; } XrSpatialMarkerStaticOptimizationEXT; typedef struct XrSpatialMarkerDataEXT { XrSpatialCapabilityEXT capability; uint32_t markerId; XrSpatialBufferEXT data; } XrSpatialMarkerDataEXT; typedef struct XrSpatialComponentMarkerListEXT { XrStructureType type; void* next; uint32_t markerCount; XrSpatialMarkerDataEXT* markers; } XrSpatialComponentMarkerListEXT; typedef struct XrSpatialCapabilityConfigurationAnchorEXT { XrStructureType type; const void* next; XrSpatialCapabilityEXT capability; uint32_t enabledComponentCount; const XrSpatialComponentTypeEXT* enabledComponents; } XrSpatialCapabilityConfigurationAnchorEXT; typedef struct XrSpatialComponentAnchorListEXT { XrStructureType type; void* next; uint32_t locationCount; XrPosef* locations; } XrSpatialComponentAnchorListEXT; typedef struct XrSpatialAnchorCreateInfoEXT { XrStructureType type; const void* next; XrSpace baseSpace; XrTime time; XrPosef pose; } XrSpatialAnchorCreateInfoEXT; typedef XrResult (*PFN_xrCreateSpatialAnchorEXT)(XrSpatialContextEXT spatialContext, const XrSpatialAnchorCreateInfoEXT* createInfo, XrSpatialEntityIdEXT* anchorEntityId, XrSpatialEntityEXT* anchorEntity);
XrResult  xrCreateSpatialAnchorEXT(XrSpatialContextEXT spatialContext, const XrSpatialAnchorCreateInfoEXT* createInfo, XrSpatialEntityIdEXT* anchorEntityId, XrSpatialEntityEXT* anchorEntity);
#line 10230 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 10231 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrSpatialPersistenceContextEXT_T* XrSpatialPersistenceContextEXT; typedef enum XrSpatialPersistenceScopeEXT { XR_SPATIAL_PERSISTENCE_SCOPE_SYSTEM_MANAGED_EXT = 1, XR_SPATIAL_PERSISTENCE_SCOPE_LOCAL_ANCHORS_EXT = 1000781000, XR_SPATIAL_PERSISTENCE_SCOPE_MAX_ENUM_EXT = 0x7FFFFFFF } XrSpatialPersistenceScopeEXT; typedef enum XrSpatialPersistenceContextResultEXT { XR_SPATIAL_PERSISTENCE_CONTEXT_RESULT_SUCCESS_EXT = 0, XR_SPATIAL_PERSISTENCE_CONTEXT_RESULT_ENTITY_NOT_TRACKING_EXT = -1000781001, XR_SPATIAL_PERSISTENCE_CONTEXT_RESULT_PERSIST_UUID_NOT_FOUND_EXT = -1000781002, XR_SPATIAL_PERSISTENCE_CONTEXT_RESULT_MAX_ENUM_EXT = 0x7FFFFFFF } XrSpatialPersistenceContextResultEXT; typedef enum XrSpatialPersistenceStateEXT { XR_SPATIAL_PERSISTENCE_STATE_LOADED_EXT = 1, XR_SPATIAL_PERSISTENCE_STATE_NOT_FOUND_EXT = 2, XR_SPATIAL_PERSISTENCE_STATE_MAX_ENUM_EXT = 0x7FFFFFFF } XrSpatialPersistenceStateEXT; typedef struct XrSpatialPersistenceContextCreateInfoEXT { XrStructureType type; const void* next; XrSpatialPersistenceScopeEXT scope; } XrSpatialPersistenceContextCreateInfoEXT; typedef struct XrCreateSpatialPersistenceContextCompletionEXT { XrStructureType type; void* next; XrResult futureResult; XrSpatialPersistenceContextResultEXT createResult; XrSpatialPersistenceContextEXT persistenceContext; } XrCreateSpatialPersistenceContextCompletionEXT; typedef struct XrSpatialContextPersistenceConfigEXT { XrStructureType type; const void* next; uint32_t persistenceContextCount; const XrSpatialPersistenceContextEXT* persistenceContexts; } XrSpatialContextPersistenceConfigEXT; typedef struct XrSpatialDiscoveryPersistenceUuidFilterEXT { XrStructureType type; const void* next; uint32_t persistedUuidCount; const XrUuid* persistedUuids; } XrSpatialDiscoveryPersistenceUuidFilterEXT; typedef struct XrSpatialPersistenceDataEXT { XrUuid persistUuid; XrSpatialPersistenceStateEXT persistState; } XrSpatialPersistenceDataEXT; typedef struct XrSpatialComponentPersistenceListEXT { XrStructureType type; void* next; uint32_t persistDataCount; XrSpatialPersistenceDataEXT* persistData; } XrSpatialComponentPersistenceListEXT; typedef XrResult (*PFN_xrEnumerateSpatialPersistenceScopesEXT)(XrInstance instance, XrSystemId systemId, uint32_t persistenceScopeCapacityInput, uint32_t* persistenceScopeCountOutput, XrSpatialPersistenceScopeEXT* persistenceScopes);
typedef XrResult (*PFN_xrCreateSpatialPersistenceContextAsyncEXT)(XrSession session, const XrSpatialPersistenceContextCreateInfoEXT* createInfo, XrFutureEXT* future);
typedef XrResult (*PFN_xrCreateSpatialPersistenceContextCompleteEXT)(XrSession session, XrFutureEXT future, XrCreateSpatialPersistenceContextCompletionEXT* completion);
typedef XrResult (*PFN_xrDestroySpatialPersistenceContextEXT)(XrSpatialPersistenceContextEXT persistenceContext);
XrResult  xrEnumerateSpatialPersistenceScopesEXT(XrInstance instance, XrSystemId systemId, uint32_t persistenceScopeCapacityInput, uint32_t* persistenceScopeCountOutput, XrSpatialPersistenceScopeEXT* persistenceScopes);
XrResult  xrCreateSpatialPersistenceContextAsyncEXT(XrSession session, const XrSpatialPersistenceContextCreateInfoEXT* createInfo, XrFutureEXT* future);
XrResult  xrCreateSpatialPersistenceContextCompleteEXT(XrSession session, XrFutureEXT future, XrCreateSpatialPersistenceContextCompletionEXT* completion);
XrResult  xrDestroySpatialPersistenceContextEXT(XrSpatialPersistenceContextEXT persistenceContext);
#line 10327 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 10328 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" typedef struct XrSpatialEntityPersistInfoEXT { XrStructureType type; const void* next; XrSpatialContextEXT spatialContext; XrSpatialEntityIdEXT spatialEntityId; } XrSpatialEntityPersistInfoEXT; typedef struct XrPersistSpatialEntityCompletionEXT { XrStructureType type; void* next; XrResult futureResult; XrSpatialPersistenceContextResultEXT persistResult; XrUuid persistUuid; } XrPersistSpatialEntityCompletionEXT; typedef struct XrSpatialEntityUnpersistInfoEXT { XrStructureType type; const void* next; XrUuid persistUuid; } XrSpatialEntityUnpersistInfoEXT; typedef struct XrUnpersistSpatialEntityCompletionEXT { XrStructureType type; void* next; XrResult futureResult; XrSpatialPersistenceContextResultEXT unpersistResult; } XrUnpersistSpatialEntityCompletionEXT; typedef XrResult (*PFN_xrPersistSpatialEntityAsyncEXT)(XrSpatialPersistenceContextEXT persistenceContext, const XrSpatialEntityPersistInfoEXT* persistInfo, XrFutureEXT* future);
typedef XrResult (*PFN_xrPersistSpatialEntityCompleteEXT)(XrSpatialPersistenceContextEXT persistenceContext, XrFutureEXT future, XrPersistSpatialEntityCompletionEXT* completion);
typedef XrResult (*PFN_xrUnpersistSpatialEntityAsyncEXT)(XrSpatialPersistenceContextEXT persistenceContext, const XrSpatialEntityUnpersistInfoEXT* unpersistInfo, XrFutureEXT* future);
typedef XrResult (*PFN_xrUnpersistSpatialEntityCompleteEXT)(XrSpatialPersistenceContextEXT persistenceContext, XrFutureEXT future, XrUnpersistSpatialEntityCompletionEXT* completion);
XrResult  xrPersistSpatialEntityAsyncEXT(XrSpatialPersistenceContextEXT persistenceContext, const XrSpatialEntityPersistInfoEXT* persistInfo, XrFutureEXT* future);
XrResult  xrPersistSpatialEntityCompleteEXT(XrSpatialPersistenceContextEXT persistenceContext, XrFutureEXT future, XrPersistSpatialEntityCompletionEXT* completion);
XrResult  xrUnpersistSpatialEntityAsyncEXT(XrSpatialPersistenceContextEXT persistenceContext, const XrSpatialEntityUnpersistInfoEXT* unpersistInfo, XrFutureEXT* future);
XrResult  xrUnpersistSpatialEntityCompleteEXT(XrSpatialPersistenceContextEXT persistenceContext, XrFutureEXT future, XrUnpersistSpatialEntityCompletionEXT* completion);
#line 10389 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 10390 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" #line 10396 "C:\\Users\\Red\\Documents\\GameMakerStudio2\\_tools\\GM-OpenXR\\extensions\\GM_OpenXR\\scr\\GMBridge\\input\\include\\openxr\\openxr.h" 